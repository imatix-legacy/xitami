/*---------------------------------------------------------------------------*
 *  smttran.d - LIBERO dialog data definitions for smttran.c.                *
 *  Generated by LIBERO 2.30 on 26 Oct, 1999, 11:22.                         *
 *  Schema file used: smtschm.c.                                             *
 *---------------------------------------------------------------------------*/

/*- Symbolic constants and event numbers ------------------------------------*/

#define _LR_STOP                        0xFFFFL
#define _LR_NULL_EVENT                  -2
#define _LR_NULL_STATE                  -1
#define terminate_event                 -1
#define commit_event                    0
#define empty_event                     1
#define end_of_file_event               2
#define error_event                     3
#define exception_event                 4
#define get_block_event                 5
#define get_file_event                  6
#define get_huge_event                  7
#define incomplete_event                8
#define master_event                    9
#define ok_event                        10
#define put_block_event                 11
#define put_file_event                  12
#define put_huge_event                  13
#define read_ok_event                   14
#define readh_ok_event                  15
#define shutdown_event                  16
#define sock_closed_event               17
#define sock_error_event                18
#define write_ok_event                  19
#define writeh_ok_event                 20
#define _LR_STATE_after_init            0
#define _LR_STATE_getting_event         1
#define _LR_STATE_file_buffer_out       2
#define _LR_STATE_file_buffer_in        3
#define _LR_STATE_defaults              4
#define _LR_STATE_end_thread            5
#define _LR_defaults_state              4


/*- Function prototypes and macros ------------------------------------------*/

#ifndef MODULE
#define MODULE  static void             /*  Libero dialog modules            */
#endif

MODULE initialise_the_thread        (THREAD *thread);
MODULE open_file_for_input          (THREAD *thread);
MODULE read_file_data_buffer        (THREAD *thread);
MODULE convert_ascii_to_net_if_reqd (THREAD *thread);
MODULE put_buffer_to_socket         (THREAD *thread);
MODULE open_file_for_output         (THREAD *thread);
MODULE get_buffer_from_socket       (THREAD *thread);
MODULE create_put_block_request     (THREAD *thread);
MODULE process_transfer_requests    (THREAD *thread);
MODULE get_next_event_from_queue    (THREAD *thread);
MODULE create_get_block_request     (THREAD *thread);
MODULE create_put_huge_request      (THREAD *thread);
MODULE create_get_huge_request      (THREAD *thread);
MODULE create_put_file_thread       (THREAD *thread);
MODULE create_get_file_thread       (THREAD *thread);
MODULE okay_if_no_requests_left     (THREAD *thread);
MODULE update_request_after_write   (THREAD *thread);
MODULE update_request_after_read    (THREAD *thread);
MODULE update_request_after_writeh  (THREAD *thread);
MODULE update_request_after_readh   (THREAD *thread);
MODULE update_request_after_closed  (THREAD *thread);
MODULE update_request_after_error   (THREAD *thread);
MODULE signal_socket_closed         (THREAD *thread);
MODULE terminate_the_thread         (THREAD *thread);
MODULE signal_socket_error          (THREAD *thread);
MODULE convert_net_to_ascii_if_reqd (THREAD *thread);
MODULE write_file_data_buffer       (THREAD *thread);
MODULE signal_get_file_okay         (THREAD *thread);
MODULE check_thread_type            (THREAD *thread);
MODULE signal_put_file_okay         (THREAD *thread);
MODULE destroy_all_requests         (THREAD *thread);

#define the_next_event              _the_next_event
#define the_exception_event         _the_exception_event
#define the_external_event          _the_external_event
#define exception_raised            _exception_raised
#define io_completed                _io_completed


/*- Static areas shared by all threads --------------------------------------*/

static word _LR_nextst [6][21] =
{
    { 0,0,0,0,0,0,3,0,0,1,0,0,2,0,0,0,0,0,0,0,0 },
    { 1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,0,1,1,1,1 },
    { 0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,2,2,0 },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,3,3,0,0 },
    { 0,0,4,4,5,0,0,0,0,0,4,0,0,0,0,0,5,0,0,0,0 },
    { 0,0,0,0,0,0,5,0,0,5,0,0,5,0,0,0,0,0,0,0,0 }
};

static word _LR_action [6][21] =
{
    { 0,0,0,0,0,0,3,0,0,1,0,0,2,0,0,0,0,0,0,0,0 },
    { 10,11,0,0,0,5,9,7,0,0,0,4,8,6,13,15,0,16,17,12,14 },
    { 0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,0,20,21,18,0 },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,23,21,0,0 },
    { 0,0,25,26,24,0,0,0,0,0,1,0,0,0,0,0,24,0,0,0,0 },
    { 0,0,0,0,0,0,26,0,0,27,0,0,26,0,0,0,0,0,0,0,0 }
};

static word _LR_offset [] =
{
    0,
    0,
    1,
    6,
    9,
    13,
    17,
    21,
    25,
    29,
    33,
    36,
    38,
    41,
    44,
    47,
    50,
    53,
    56,
    60,
    62,
    65,
    68,
    72,
    75,
    77,
    80,
    82
};

static word _LR_vector [] =
{
    _LR_STOP,
    0,1,2,3,_LR_STOP,
    4,5,_LR_STOP,
    6,7,8,_LR_STOP,
    9,7,8,_LR_STOP,
    10,7,8,_LR_STOP,
    11,7,8,_LR_STOP,
    12,7,8,_LR_STOP,
    13,7,8,_LR_STOP,
    14,8,_LR_STOP,
    7,_LR_STOP,
    15,7,_LR_STOP,
    16,7,_LR_STOP,
    17,7,_LR_STOP,
    18,7,_LR_STOP,
    19,7,_LR_STOP,
    20,7,_LR_STOP,
    1,2,3,_LR_STOP,
    3,_LR_STOP,
    21,22,_LR_STOP,
    23,22,_LR_STOP,
    24,25,5,_LR_STOP,
    26,22,_LR_STOP,
    27,_LR_STOP,
    28,22,_LR_STOP,
    22,_LR_STOP,
    29,22,_LR_STOP
};

static HOOK *_LR_module [30] = {
    open_file_for_input,
    read_file_data_buffer,
    convert_ascii_to_net_if_reqd,
    put_buffer_to_socket,
    open_file_for_output,
    get_buffer_from_socket,
    create_put_block_request,
    process_transfer_requests,
    get_next_event_from_queue,
    create_get_block_request,
    create_put_huge_request,
    create_get_huge_request,
    create_put_file_thread,
    create_get_file_thread,
    okay_if_no_requests_left,
    update_request_after_write,
    update_request_after_read,
    update_request_after_writeh,
    update_request_after_readh,
    update_request_after_closed,
    update_request_after_error,
    signal_socket_closed,
    terminate_the_thread,
    signal_socket_error,
    convert_net_to_ascii_if_reqd,
    write_file_data_buffer,
    signal_get_file_okay,
    check_thread_type,
    signal_put_file_okay,
    destroy_all_requests
};

#if (defined (DEBUG))
static char *_LR_mname [30] =
{
     "Open-File-For-Input",
     "Read-File-Data-Buffer",
     "Convert-Ascii-To-Net-If-Reqd",
     "Put-Buffer-To-Socket",
     "Open-File-For-Output",
     "Get-Buffer-From-Socket",
     "Create-Put-Block-Request",
     "Process-Transfer-Requests",
     "Get-Next-Event-From-Queue",
     "Create-Get-Block-Request",
     "Create-Put-Huge-Request",
     "Create-Get-Huge-Request",
     "Create-Put-File-Thread",
     "Create-Get-File-Thread",
     "Okay-If-No-Requests-Left",
     "Update-Request-After-Write",
     "Update-Request-After-Read",
     "Update-Request-After-Writeh",
     "Update-Request-After-Readh",
     "Update-Request-After-Closed",
     "Update-Request-After-Error",
     "Signal-Socket-Closed",
     "Terminate-The-Thread",
     "Signal-Socket-Error",
     "Convert-Net-To-Ascii-If-Reqd",
     "Write-File-Data-Buffer",
     "Signal-Get-File-Okay",
     "Check-Thread-Type",
     "Signal-Put-File-Okay",
     "Destroy-All-Requests"
};

static char *_LR_sname [6] =
{
     "After-Init",
     "Getting-Event",
     "File-Buffer-Out",
     "File-Buffer-In",
     "Defaults",
     "End-Thread"
};

static char *_LR_ename [21] =
{
     "Commit-Event",
     "Empty-Event",
     "End-Of-File-Event",
     "Error-Event",
     "Exception-Event",
     "Get-Block-Event",
     "Get-File-Event",
     "Get-Huge-Event",
     "Incomplete-Event",
     "Master-Event",
     "Ok-Event",
     "Put-Block-Event",
     "Put-File-Event",
     "Put-Huge-Event",
     "Read-Ok-Event",
     "Readh-Ok-Event",
     "Shutdown-Event",
     "Sock-Closed-Event",
     "Sock-Error-Event",
     "Write-Ok-Event",
     "Writeh-Ok-Event"
};
#else
static char *_LR_mname [30] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10",
     "11",
     "12",
     "13",
     "14",
     "15",
     "16",
     "17",
     "18",
     "19",
     "20",
     "21",
     "22",
     "23",
     "24",
     "25",
     "26",
     "27",
     "28",
     "29"
};

static char *_LR_sname [6] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5"
};

static char *_LR_ename [21] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10",
     "11",
     "12",
     "13",
     "14",
     "15",
     "16",
     "17",
     "18",
     "19",
     "20"
};
#endif
