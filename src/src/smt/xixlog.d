/*---------------------------------------------------------------------------*
 *  xixlog.d - LIBERO dialog data definitions for xixlog.c.                  *
 *  Generated by LIBERO 2.30 on 19 Nov, 1999,  9:55.                         *
 *  Schema file used: smtschm.c.                                             *
 *---------------------------------------------------------------------------*/

/*- Symbolic constants and event numbers ------------------------------------*/

#define _LR_STOP                        0xFFFFL
#define _LR_NULL_EVENT                  -2
#define _LR_NULL_STATE                  -1
#define terminate_event                 -1
#define clear_event                     0
#define close_event                     1
#define concat_old_event                2
#define cycle_event                     3
#define cycle_now_event                 4
#define delete_old_event                5
#define error_event                     6
#define exception_event                 7
#define log_event                       8
#define move_old_event                  9
#define ok_event                        10
#define open_event                      11
#define process_old_event               12
#define put_event                       13
#define rdns_end_event                  14
#define rdns_error_event                15
#define rdns_host_event                 16
#define rdns_required_event             17
#define rdns_timeout_event              18
#define rename_old_event                19
#define set_rdns_event                  20
#define shutdown_event                  21
#define timer_event                     22
#define _LR_STATE_after_init            0
#define _LR_STATE_before_opening        1
#define _LR_STATE_cycle_before_open     2
#define _LR_STATE_cycle_while_closed    3
#define _LR_STATE_logfile_open          4
#define _LR_STATE_before_writing_log    5
#define _LR_STATE_expect_rdns_reply     6
#define _LR_STATE_defaults              7
#define _LR_defaults_state              7


/*- Function prototypes and macros ------------------------------------------*/

#ifndef MODULE
#define MODULE  static void             /*  Libero dialog modules            */
#endif

MODULE initialise_the_thread        (THREAD *thread);
MODULE create_event_queue           (THREAD *thread);
MODULE terminate_the_thread         (THREAD *thread);
MODULE get_logfile_parameters       (THREAD *thread);
MODULE build_log_filename           (THREAD *thread);
MODULE check_if_cycle_before_open   (THREAD *thread);
MODULE open_logfile_append          (THREAD *thread);
MODULE recalculate_cycle_timer      (THREAD *thread);
MODULE check_queued_events_if_any   (THREAD *thread);
MODULE check_cycle_method           (THREAD *thread);
MODULE delete_old_logfile           (THREAD *thread);
MODULE rename_old_logfile           (THREAD *thread);
MODULE open_logfile_create          (THREAD *thread);
MODULE move_old_logfile             (THREAD *thread);
MODULE concat_old_logfile           (THREAD *thread);
MODULE process_old_logfile          (THREAD *thread);
MODULE get_log_request_arguments    (THREAD *thread);
MODULE check_if_rdns_required       (THREAD *thread);
MODULE write_plain_log_entry        (THREAD *thread);
MODULE close_logfile                (THREAD *thread);
MODULE flush_event_queue            (THREAD *thread);
MODULE check_if_cycle_while_open    (THREAD *thread);
MODULE write_request_log_entry      (THREAD *thread);
MODULE free_log_request_arguments   (THREAD *thread);
MODULE send_request_to_resolver     (THREAD *thread);
MODULE use_resolved_host_name       (THREAD *thread);
MODULE signal_rdns_error            (THREAD *thread);
MODULE signal_rdns_timeout          (THREAD *thread);
MODULE requeue_the_event            (THREAD *thread);
MODULE initialise_rdns_library      (THREAD *thread);
MODULE destroy_event_queue          (THREAD *thread);

#define the_next_event              _the_next_event
#define the_exception_event         _the_exception_event
#define the_external_event          _the_external_event
#define exception_raised            _exception_raised
#define io_completed                _io_completed


/*- Static areas shared by all threads --------------------------------------*/

static word _LR_nextst [8][23] =
{
    { 0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 1,0,0,3,2,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,0,4,0,0,4,0,0,0,4,0,0,4,0,0,0,0,0,0,4,0,0,0 },
    { 0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0 },
    { 4,1,0,2,2,0,0,0,5,0,0,0,0,4,0,0,0,0,0,0,0,0,4 },
    { 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,6,0,0,0,0,0 },
    { 6,6,0,6,0,0,0,0,6,0,0,0,0,0,4,4,4,0,4,0,0,0,6 },
    { 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 }
};

static word _LR_action [8][23] =
{
    { 0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 5,0,0,4,4,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,0,9,0,0,7,0,0,0,8,0,0,10,0,0,0,0,0,0,6,0,0,0 },
    { 0,0,13,0,0,5,0,0,0,12,0,0,14,0,0,0,0,0,0,11,0,0,0 },
    { 18,19,0,17,17,0,0,0,15,0,0,0,0,16,0,0,0,0,0,0,0,0,20 },
    { 0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,22,0,0,0,0,0 },
    { 26,26,0,26,0,0,0,0,26,0,0,0,0,0,21,24,23,0,25,0,0,0,27 },
    { 30,30,30,30,30,30,30,29,30,30,30,30,30,30,30,30,30,30,30,30
     ,28,29,30
    }
};

static word _LR_offset [] =
{
    0,
    0,
    2,
    4,
    11,
    13,
    15,
    20,
    24,
    29,
    34,
    39,
    41,
    43,
    46,
    48,
    51,
    54,
    57,
    61,
    64,
    68,
    72,
    74,
    79,
    84,
    89,
    91,
    93,
    95,
    98
};

static word _LR_vector [] =
{
    0,_LR_STOP,
    1,_LR_STOP,
    2,3,4,5,6,7,_LR_STOP,
    8,_LR_STOP,
    9,_LR_STOP,
    10,5,6,7,_LR_STOP,
    11,6,7,_LR_STOP,
    12,5,6,7,_LR_STOP,
    13,5,6,7,_LR_STOP,
    14,11,6,7,_LR_STOP,
    10,_LR_STOP,
    12,_LR_STOP,
    13,9,_LR_STOP,
    14,_LR_STOP,
    15,16,_LR_STOP,
    17,7,_LR_STOP,
    18,8,_LR_STOP,
    18,11,7,_LR_STOP,
    18,19,_LR_STOP,
    20,6,7,_LR_STOP,
    21,22,7,_LR_STOP,
    23,_LR_STOP,
    24,21,22,7,_LR_STOP,
    25,21,22,7,_LR_STOP,
    26,21,22,7,_LR_STOP,
    27,_LR_STOP,
    6,_LR_STOP,
    28,_LR_STOP,
    29,1,_LR_STOP,
    _LR_STOP
};

static HOOK *_LR_module [30] = {
    create_event_queue,
    terminate_the_thread,
    get_logfile_parameters,
    build_log_filename,
    check_if_cycle_before_open,
    open_logfile_append,
    recalculate_cycle_timer,
    check_queued_events_if_any,
    check_cycle_method,
    delete_old_logfile,
    rename_old_logfile,
    open_logfile_create,
    move_old_logfile,
    concat_old_logfile,
    process_old_logfile,
    get_log_request_arguments,
    check_if_rdns_required,
    write_plain_log_entry,
    close_logfile,
    flush_event_queue,
    check_if_cycle_while_open,
    write_request_log_entry,
    free_log_request_arguments,
    send_request_to_resolver,
    use_resolved_host_name,
    signal_rdns_error,
    signal_rdns_timeout,
    requeue_the_event,
    initialise_rdns_library,
    destroy_event_queue
};

#if (defined (DEBUG))
static char *_LR_mname [30] =
{
     "Create-Event-Queue",
     "Terminate-The-Thread",
     "Get-Logfile-Parameters",
     "Build-Log-Filename",
     "Check-If-Cycle-Before-Open",
     "Open-Logfile-Append",
     "Recalculate-Cycle-Timer",
     "Check-Queued-Events-If-Any",
     "Check-Cycle-Method",
     "Delete-Old-Logfile",
     "Rename-Old-Logfile",
     "Open-Logfile-Create",
     "Move-Old-Logfile",
     "Concat-Old-Logfile",
     "Process-Old-Logfile",
     "Get-Log-Request-Arguments",
     "Check-If-Rdns-Required",
     "Write-Plain-Log-Entry",
     "Close-Logfile",
     "Flush-Event-Queue",
     "Check-If-Cycle-While-Open",
     "Write-Request-Log-Entry",
     "Free-Log-Request-Arguments",
     "Send-Request-To-Resolver",
     "Use-Resolved-Host-Name",
     "Signal-Rdns-Error",
     "Signal-Rdns-Timeout",
     "Requeue-The-Event",
     "Initialise-Rdns-Library",
     "Destroy-Event-Queue"
};

static char *_LR_sname [8] =
{
     "After-Init",
     "Before-Opening",
     "Cycle-Before-Open",
     "Cycle-While-Closed",
     "Logfile-Open",
     "Before-Writing-Log",
     "Expect-Rdns-Reply",
     "Defaults"
};

static char *_LR_ename [23] =
{
     "Clear-Event",
     "Close-Event",
     "Concat-Old-Event",
     "Cycle-Event",
     "Cycle-Now-Event",
     "Delete-Old-Event",
     "Error-Event",
     "Exception-Event",
     "Log-Event",
     "Move-Old-Event",
     "Ok-Event",
     "Open-Event",
     "Process-Old-Event",
     "Put-Event",
     "Rdns-End-Event",
     "Rdns-Error-Event",
     "Rdns-Host-Event",
     "Rdns-Required-Event",
     "Rdns-Timeout-Event",
     "Rename-Old-Event",
     "Set-Rdns-Event",
     "Shutdown-Event",
     "Timer-Event"
};
#else
static char *_LR_mname [30] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10",
     "11",
     "12",
     "13",
     "14",
     "15",
     "16",
     "17",
     "18",
     "19",
     "20",
     "21",
     "22",
     "23",
     "24",
     "25",
     "26",
     "27",
     "28",
     "29"
};

static char *_LR_sname [8] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7"
};

static char *_LR_ename [23] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10",
     "11",
     "12",
     "13",
     "14",
     "15",
     "16",
     "17",
     "18",
     "19",
     "20",
     "21",
     "22"
};
#endif
