.-----------------------------------------------------------------
.-  xitami1.txt  -  Main Xitami documentation source
.-  Copyright (c) 1996,99 iMatix Corporation
.-----------------------------------------------------------------

.define BASE      index
.define author    iMatix Corporation
.define written   10 Nov 1996
.define revised   &date("d mmm, yyyy")
.include prelude.def

.ignore header
.page Welcome To Xitami

.H1 $(TITLE)

<P>Welcome to the Xitami online documentation.  These pages describe how to
install, use, and configure Xitami for your needs.  You can go directly to
the $(*toc=Table of Contents).  You'll also find a large
$(*faqlink=FAQ_section) that provides answers to many frequently-asked
questions.  Please read this FAQ before asking for technical support.  The
$(*group=Xitami discussion group) is an active forum and an excellent place
to ask questions and discuss issues surrounding Xitami.

<P>To download Xitami go to the $(*download=Download_Corner).

<P>If you use Xitami, please register now for information about bug fixes
and updates.  It's free - just <A HREF="mailto:register-xitami@imatix.com">
send us an e-mail</A> with subject 'register' and your comments, if any.

<P>Xitami is a high-quality portable free web server. It is distributed with
source code according to a liberal $(*license=License_Agreement). Please
take a minute to read this.

<P>What's special about Xitami?
<UL>
<LI>It runs on all UNIX platforms, OS/2, OpenVMS, Windows 3.x, Windows 95,
and Windows NT.  At iMatix, we make software portability a reality.
<LI>You'll be surprised at how easily Xitami installs.  Since the software
comes fully configured, you don't need to change a single option to run it.
<LI>Xitami is small, fast, and robust: it's based on a solid software
engineering tools that we developed for multithreaded TCP/IP servers.
<LI>Unlike any other web server, Xitami was designed as a set of portable
reusable components.  It's easy to extend and reincorporate.
</UL>

<P>If you're a software developer, visit the $(*imatix=iMatix_home_page) and
take a look at our other products. $(*libero=Libero), $(*sfl=SFL), and
$(*smt=SMT) are the unique software tools that make Xitami fast and
portable. You can use them freely in any project; if you intend to extend
Xitami, you'll want these tools.

.ignore header
<H3>Summary of Xitami Features</H3>
<UL>
<LI>Server supports HTTP/1.0, FTP, CGI/1.1, SSI protocols, server-side image
maps, user-defined MIME types, multiple document roots, persistent
connections, on-the-fly server reconfiguration, customisable error messages,
multilingual HTML documents and multilingual CGI scripts, HTTP GET, HEAD,
PUT, DELETE, MOVE, and COPY methods, customisable HTTP headers;
<LI>Security: basic authentication per directory, FTP access rights per user
and per directory, on-the-fly user and password management, Unix setuid,
restrict access by IP address, safe CGIs, SSL option (Xitami/Pro);
<LI>Logging: CLF, IIS, XML, and custom log file formats, programmed log
file cycling, asynchronous reverse DNS lookups;
<LI>Virtual hosts: multihoming HTTP and FTP hosts, HTTP/1.1 virtual hosts,
full independent configuration (log files, web spaces, access rights,...)
per virtual host;
<LI>Configuration: editable config files, or through a web-based
administration interface (WBA) that includes virtual host wizard, server
control (restart, terminate), active connection monitor, and full
configuration of server options, security, users, etc.;
<LI>Applications: direct support for CGI scripts in Perl, Awk, Rexx, Python,
WSX protocol for plug-in extensions, SSI protocol for dynamic web pages,
ISAPI under Windows, filter protocol for arbitrary web page filters, LRWP
protocol for persistent (fast CGI) applications in Perl, C, Python, Java,
Java Servlets;
<LI>Deployment: installs ready-to-run, portable to Windows, OS/2, Unix,
OpenVMS, fully portable web sites and web applications;
<LI>Performance: internal multithreading engine, fast even on slower
systems, small footprint, option to restrict HTTP and FTP connections,
FTP quota manager.
</UL>

.-----------------------------------------------------------------
.page Table Of Contents
.build anchor toc

.ignore header
<H1>$(TITLE)</H1>

.include contents.def

.-----------------------------------------------------------------
.page Installing Xitami
.build anchor download

<H2>$(TITLE)</H2>

<P>You can install Xitami in a few minutes on all platforms. For Windows,
Xitami comes with an installation Wizard. For OS/2 it is supplied as a
pre-built zip file. For UNIX and OpenVMS, Xitami is provided as a source kit
- you need an ANSI C compiler to rebuild it.

.define xisite http://users.skynet.be/sky37432
.macro mirror -
<TD ALIGN="CENTER" VALIGN="TOP">$1<BR><A HREF="$3"> -
<IMG SRC="$2" WIDTH=100 HEIGHT=75 ALT="$1"></A> -
.if "$4" ne "none" -
<BR><A HREF="$4">FTP access</A> -
.endif

<H3>Worldwide Mirror Sites</H3>

<P>Click on the image that displays first:
<BR>
<TABLE><TR>

.-      1=Country  2=Image  3=HTTP  4=FTP if any
.-
.mirror USA -
        http://www.nlbox.com/xitami/xitami1.gif -
        ftp://ftp.nlbox.com/xitami -
        ftp://ftp.nlbox.com/xitami

.mirror USA -
        http://www.xitami.com/xitami1.gif -
        http://www.xitami.com/ -
        none

.mirror Belgium -
        $(xisite)/xitami1.gif -
        $(xisite)/ -
        none

.mirror Mexico -
        http://mmc.unam.mx/server/xitami1.gif -
        http://mmc.unam.mx/server/ -
        none

.mirror Thailand -
        http://std.siamu.ac.th/imatix/xitami1.gif -
        http://std.siamu.ac.th/imatix/ -
        none
</TABLE>

.build anchor www.imatix.com
<H3>Current Production Release - $(version)</H3>

.file_table %(vxi) $(xisite)

<H3>Next Alpha Release - 2.5b2</H3>

.file_table 25b2   $(xisite)

.define kit_win16           $(xisite)/bw16%(vxi).exe
.define kit_win32           $(xisite)/bw32%(vxi).exe
.define kit_win32_console   $(xisite)/bc32%(vxi).exe
.define kit_win32_service   $(xisite)/bs32%(vxi).exe
.define kit_win32_src       $(xisite)/swin%(vxi).zip
.define kit_os2             $(xisite)/bos2%(vxi).zip
.define kit_unix            $(xisite)/suni%(vxi).tgz

<HR>
.build anchor win32
<H3>Xitami for Windows 95/98 or NT</H3>

<P>Download and run the $(*kit_win32=32-bit_Windows_package). The
installation Wizard will prompt you for an installation directory, and will
build a program group and icons to run Xitami. To run the installation
Wizard without the iMatix logo display, pass is "-nologo" on the command
line.

<P>You can uninstall Xitami by double-clicking the Uninstall icon. Under
Windows 95 and NT 4.x you can also select the 'Add/Remove Programs' option
in the control panel. Xitami maintains various items in the Windows
registry which the uninstall script should remove.

<P>When you have installed Xitami, run it, then connect with any web
browser. You should see the "Welcome To Xitami" test page. If Xitami cannot
run on its normal port (80), it shows an error message: this can happen if
another server is using port 80. You can use an alternative HTTP port such
as 5080. You then connect using the URL <TT>http://localhost:5080/</TT>.

<P>You can also download the $(*kit_win32_src=source_package) for Windows.
This compiles under MSVC 4.x or 5.x, and is necessary if you want to extend
the server using the WSX add-on protocol.  To build from the source package,
unzip it into a directory (e.g. c:\xitami\src) and double click on the
xitami.mdp file.  This launches MSVC.  Click on the 'Build' button, wait
until everything compiles, then click on 'Run'.  Note that this source
package contains the console (DOS box) version of Xitami.

<P>If you use Windows 95, be aware that the earlier versions of this OS
can get into serious problems when heavily loaded with TCP/IP connections.
While Win95 is adequate for testing and for small sites, we cannot really
recommend it for serious sites - use NT or Linux.  If you find that your
Win95 system shows the classic 'Blue Screen of Death' when the server is
heavily loaded, consider installing the various patches and upgrades that
are supplied on the Microsoft site.

<HR>
.build anchor win32_console
<H3>Vanilla Xitami for Windows 95/98 and NT</H3>

<P>The console version of Xitami is less good-looking than the full Windows
version, but runs a little faster. Otherwise it offers exactly the same
functionality, and is fully compatible in terms of log files, security, etc.
Download and run the $(*kit_win32_console=32-bit_Windows_console_package).
The installation program will prompt you for an installation directory, and
will build a program group and icons to run Xitami.

<P>Users of Windows 98 have reported that the console version of Xitami runs
more stably than the graphic version.  This may be due to the MSVC runtime,
but in any case: if your GUI version of Xitami crashes after heavy use under
Win98, try using the console version.

<P>When you have installed Xitami, run xidos32, then connect with any web
browser. You should see the "Welcome To Xitami" test page. If Xitami cannot
run on its normal port (80), it shows an error message: this can happen if
another server is using port 80. To use an alternative HTTP port, use the
'-b' option. This shifts the standard HTTP and FTP ports by some 'base'. For
example, '-b 5000' runs the Xitami HTTP service on port 5080 and the FTP
service on port 5021. You would then connect using
<TT>http://localhost:5080/</TT>.

<P>To halt Xitami, press Ctrl-C. This shuts-down the server cleanly.

<P>You can uninstall Xitami by double-clicking the Uninstall icon. Under
Windows 95 and NT 4.x you can also select the 'Add/Remove Programs' option
in the control panel.

<H4>Using Xitami as a Service Under Windows 95</H4>
<P>You can also install the console version as a service under Windows
95/98.  This is a little-known ability of Win95/98, and it allows you to
automatically run Xitami when the computer boots, rather than when a user
logs in.  The Xitami console version installation package asks whether you
want to install it as a Win95 service.  If you choose this option, it
creates a small dispatcher, called "C:\Service.bat" which simply changes to
the Xitami directory and then runs Xitami.

<P>To start the dispatcher, the installation script adds an entry to the
registry, under "SOFTWARE\Microsoft\Windows\CurrentVersion\RunServices".
You can delete this entry at any time.  You can also edit service.bat to
remove the call to xidos32.exe.

<HR>
.build anchor win32_service
<H3>Xitami Service for Windows NT</H3>

<P>Download and run the $(*kit_win32_service=NT_service_package).  The
installation program will prompt you for an installation directory, and will
install Xitami as an NT service. You can start and stop the service using
the Service Control Manager or the Xitami control panel (in the Control
Panel window).

<P>We recommend that you log-on as administrator before you install Xitami.
If you install Xitami in a directory that contains a space, you will find
that the service does not start correctly.  You can fix this by editing the
registry (ugh!) to put quotes around the filename
$(*start_service=as described in the faq) or by installing in Progra~1
instead of in 'Program Files'.

<P>The Xitami Service version accepts various command-line arguments when
run in a Dos window:
<TABLE BORDER=1 WIDTH=80%>
<TR><TH>Argument:
<TH>Has this purpose:
<TR><TD>-i
<TD>Installs Xitami as a service.
<TR><TD>-u
<TD>Uninstalls the Xitami service.
<TR><TD>-d
<TD>Run Xitami as a console program.
<TR><TD>-d -h
<TD>Show help for command-line arguments.
</TABLE>

<P>You can pass any command-line arguments except -i, -u, and -d in the
'Startup Parameters' field in the Service Control Manager. When you run the
Xitami service as a command-line program, it acts identically to the vanilla
console version. You can use the service version on Windows 95, although the
-i and -u switches will not work.

<P>The Xitami service version has the same performance as the normal 32-bits
version, but will continue to work after you log off. Xitami runs on NT 3.51
and later versions.

<P>Under Windows NT 4.0 and later you can select the 'Add/Remove Programs'
option in the control panel to de-install Xitami. A bug in NT means that the
control panel itself (xiwinntc.cpl) will not be deleted. Xitami maintains
various items in the Windows registry, but these can be removed at any time
without affecting the server.

<H4>Manual Installation Of The Xitami NT Service</H4>
<P>On some (broken) NT systems that have problems running 16-bit code, the
self-installing .exe file may cause an error. In such a case you can install
the NT service by hand. Unzip the .exe install file (use WinZip or similar)
into a directory like C:\Program Files\Xitami.

<P>In a DOS box, in the Xitami directory, run 'xiwinnt -i' to install the
Xitami service. Then copy xiwinntc.cpl to the Windows NT system32 directory.
You can check that this works by using the NT service manager to stop/start
Xitami, and using the Xitami Control Panel.

<HR>
.build anchor win16
<H3>Xitami for Windows 3.1 or 3.11</H3>

<P>To run Xitami on a Windows 3.x PC you must have a 386 or higher
processor. Xitami will run on a modest system; 4Mb RAM is enough if you do
not run any large applications.

<P>Download and run the $(*kit_win16=16-bit_Windows_package). The
installation program will prompt you for an installation directory, and will
build a program group and icons to run Xitami. To uninstall Xitami,
double-click the Uninstall icon. Xitami does not create any files in the
Windows directories.

<P>When you have installed Xitami, run it, then connect with any web
browser. You should see the "Welcome To Xitami" test page. If another web
server is already using port 80, Xitami will not start. In that case, you
can choose a new port (e.g. 5080) and then connect using the URL
<TT>http://localhost:5080/</TT>.

<P>We have tested Xitami with some 16-bit Winsock libraries, but these are
notoriously unstable.  Our best recommendation are the Microsoft winsock
libraries, supplied with recent 16-bit versions Explorer. Windows 3.11 is
also reasonably robust.

<P>The limitations of 16-bit Windows mean that Xitami does not support CGI
programs under Windows 3.x. If someone tries to run a CGI program, Xitami
will show an error page.

<P>You can also run the $(*kit_win32_console=32-bit_console_version) of
Xitami if you install Win32s.  This version has all the functionality of the
Windows 95 and NT versions (including FTP and browser-based admin) except
CGI.  This configuration lets you build web applications using the LRWP
protocol.

<HR>
.build anchor os2
.pipe ..\os2\readme.htm=Xitami installation for OS/2
<H3>Xitami for OS/2</H3>

<P>The OS/2 version of Xitami was built using GCC 2.7.2.1 and runs with the
EMX 0.9c environment. The EMX DLLs will be required, and are available from
fine FTP sites everywhere (e.g. ftp.leo.org, ftp.cdrom.com,
hobbes.nmsu.edu). Compiled with assertions and gdb debugging information
disabled. The OS/2 version of Xitami was built by Ewen McNeill
<ewen@naos.co.nz> who also ported SFL and SMT to OS/2.

<P>The current distribution of Xitami for OS/2 was built for EMX 0.9c fix 2,
and will work with releases up to EMX 0.9c fix 4.

<P>Download the $(*kit_os2=OS/2_binary_package) -- you'll need an
$(*info-zip=unzip) tool to extract the archive. You can also build the
server from the $(*kit_win32_src=Windows source package), using the
supplied xibuild.cmd file.

<P>To install an Desktop icon for Xitami, run install.cmd.

<P>When you have installed Xitami, run xitami.exe, then connect with any web
browser. You should see the "Welcome To Xitami" test page. If Xitami cannot
run on its normal port (80), it shows an error message: this can happen if
another server is using port 80. To use an alternative HTTP port, use the
'-b' option. This shifts the standard HTTP and FTP ports by some 'base'. For
example, '-b 5000' runs the Xitami HTTP service on port 5080 and the FTP
service on port 5021. You would then connect using
<TT>http://localhost:5080/</TT>.

<P>To halt Xitami, press Ctrl-C. This shuts-down the server cleanly.

<H4>Using TCP/IP With OS/2</H4>
<UL>
<LI>OS/2 Warp Connect and OS/2 Warp 4 (Merlin) are set-up for network-based
(LAN) TCP/IP automatically. In those cases it is just a matter of enabling
the loop-back connection, which can be done in the TCP/IP configuration
page, and then the address http://127.0.0.1/ can be used to access pages on
the same system. <LI>With OS/2 Warp 3 (i.e. not the connect version) only
serial-based TCP/IP is supplied but the loop-back connection can be enabled
using the <TT>ifconfig</TT> command:
<PRE>ifconfig lo 127.0.0.1 up
</PRE>
<LI>With OS/2 2.x there is no TCP/IP software supplied by default.
However, there is an extra package available from IBM (even today, we
think), which adds TCP/IP networking.  OS/2 1.x (16 bit code) doesn't
support TCP/IP at all as far as we know.
</UL>

<P>In all cases where TCP/IP is bundled with OS/2, it is an installation
option. Obviously the TCP/IP software must be installed to use TCP/IP-based
programs like Xitami.

<P>As far as we know, OS/2 can be used without a nameserver available (we
use a Linux machine as the nameserver for our network), if a 'hosts' file is
set up in the %ETC% directory (i.e. the directory pointed at by the ETC
environment variable. This directory is typically d:\tcpip\etc, or
d:\mptn\etc, where d: is the boot drive). The 'hosts' file should contain
the normal host information, i.e. the IP address, and then the name
associated with that IP address, on the same line separated by (one or more)
spaces. OS/2 can be told to use the hosts file before checking DNS by
setting the environment variable; set this line in config.sys and reboot:
<PRE>USE_HOSTS_FIRST=1
</PRE>

<H4>Configuring The EMX System</H4>

<P>The default number of file handles for an EMX is around 20-40. This is
too little for a heavily-used server, and you may get errors logged as "out
of file handles".

<P>The number of file handles available in programs that use EMX can be
controlled via a runtime settable environment variable, EMXOPT.

<P>From the EMX runtime documentation (emxrt.doc):
<PRE>7 emx options
=============

You can customize emx by setting the EMXOPT environment variable. This
environment variable contains a list of options, similar to command line
options. The options must be separated by at least one blank.  Example:

    set emxopt=-c -h40

7.1 emx options (OS/2)
----------------------

-c      Disable core dumps caused by signals and exceptions

-h#     Set OS/2 file handle limit to #.  The number # must be between
        10 and 65536
[...]
</PRE>

<P>For a busy web server, a good value would be 120:
<PRE>set EMXOPT=-h120</PRE>

<H4>Source Installation For OS/2</H4>

<P>With the EMX development system (including the GNU C compiler) you can
rebuild Xitami on your OS/2 system. You must have installed EMX (we
recommend version 0.9c) including these packages: emxrt.zip, bsddev.zip,
gnudev1.zip, gnudev2.zip, emxdev1.zip, emxdev2.zip.

<P>To rebuild Xitami, first unzip the source package in a suitable
directory, e.g. C:\Xitami.  This creates a source tree and also installs the
various files and subdirectories that are needed for running Xitami.  The
sources are in src\sfl and src\smt.  You can build the executable using the
command file 'xibuild'.  If this fails, for some reason, you must build SFL
and SMT manually, but this is fairly simple:
<OL>
<LI>Open an OS/2 command window and cd to src\sfl, and type the command
'build'. If all goes well, this will compile the SFL library, and link a
number of test programs. The two files that you really need are libsfl.a (or
libsfl.lib, depending on how EMX is configured) and sfl.h.
<LI>Copy these two files into src\smt.  Now type 'build' in that directory
too.  This creates a number of files, but the two you really need are
xitami.exe and xixlat.exe.
<LI>Copy these two files into ..\.. (the main Xitami directory).  You can
now type 'xitami' to start the web server.
</OL>
.endpipe

<HR>
.build anchor unix
.pipe ..\unix\readme.htm=Xitami installation for UNIX
<H3>Source Installation For UNIX</H3>

<P>With an ANSI C compiler, you can rebuild Xitami on your system. Note that
the Xitami sources are ANSI C/POSIX compatible, and should build cleanly on
the majority of UNIX systems.  We and other people have tested Xitami on
these systems:
<UL>
<LI>Linux
<LI>IBM RS/6000 AIX
<LI>HP/UX
<LI>Digital UNIX (OSF/1)
<LI>SunOS and Solaris
<LI>SCO UNIXWare and OpenServer
<LI>SGI Irix
<LI>FreeBSD, BSD/OS, NetBSD
</UL>

<P>To install the source kit you need about 15Mb of disk space. You can
download the Xitami sources as a compressed tar file (.tgz). To unpack
a tgz file you need GNU gunzip.  Download the
$(*kit_unix=suni%(vxi).tgz) source kit.  To unpack the compressed file,
give these commands:
<PRE>gunzip suni%(vxi).tgz
tar -xvf suni%(vxi).tar
</PRE>

<P>The resulting directory structure includes the full sources for Xitami
(basically the $(*sfl=SFL) and $(*smt=SMT) packages), plus a build script,
<TT>xibuild</TT>, plus the directories and web pages you need to get started
with Xitami.

<P>The <TT>xibuild</TT> script compiles Xitami and installs the executable
program in the top directory (where <TT>xibuild</TT> is located). To run
<TT>xibuild</TT>, give these commands:

<PRE>chmod +x xibuild
\./xibuild</PRE>

<P>When you have built Xitami, run xitami, then connect with any web
browser. You should see the "Welcome To Xitami" test page. If Xitami cannot
run on its normal port (80), it shows an error message: this can happen if
another server is using port 80. To use an alternative HTTP port, use the
'-b' option. This shifts the standard HTTP and FTP ports by some 'base'. For
example, '-b 5000' runs the Xitami HTTP service on port 5080 and the FTP
service on port 5021. You would then connect using
<TT>http://localhost:5080/</TT>.

<P>If Xitami does not build cleanly on your system, the problem will usually
lie in non-standard code in the SFL library upon which Xitami is based. It's
possible that your system (or compiler) does not do what SFL expects. In
general the only file which you may need to change is the prelude.h file in
the SFL directory. Read the SFL doc if you think you want to make changes to
this library (it's pretty simple, really, and many people done this).
.endpipe

<HR>
.build anchor vms
<H3>Source Installation For OpenVMS</H3>

<P>With UCX and Vax C or Dec C, you can rebuild Xitami on your OpenVMS
system. OpenVMS 6.1 or prior may not work correctly.  Note that the Xitami
sources are ANSI C/POSIX compatible, and depend on support from the OpenVMS
system libraries to some extent. These were not fully POSIX in OpenVMS prior
to 7.0, through Xitami (actually, SFL, which provides the portability layer)
gets around the most blatant differences.

<P>The section on building Xitami must still be completed.  However, the
process is fairly simple:
<UL>
<LI>Install the UNIX source kit.
<LI>Build the SFL library by compiling all the files sfl*.c in the src/sfl
directory.  Create a library libsfl.olb containing the resulting objects.
You should find that the command @build.txt does this.
<LI>Build the SMT library by compiling all the files smt*.c (except
smtschm.c) and all the files xi*.c.  Create a library libsmt.old containing
the resulting objects.
<LI>Link xitami.obj with these two libraries to give xitami.exe and copy
this to the root install directory.
<LI>Define an external command:
<PRE>$ xitami :== $disk_whatever:[root.install.dir]xitami.exe
</PRE>
<LI>Run xitami with arguments '-b 5000' to start it on port 5080.
</UL>

<P>Xitami runs fully, except for a couple of restrictions. The directory
list functions do not (yet) work. To run a CGI program you must define an
external command before starting the server. This is necessary so that
Xitami can pass arguments to the program. For example:
<PRE>$ testcgi :== $DKA300:[.cgi-bin]testcgi.exe
$ xitami -b 5000
</PRE>

.-----------------------------------------------------------------
.page Administration

<H2>$(TITLE)</H2>

<H3>Xitami Under Windows</H3>

<P>The Windows version of Xitami provides a simple control panel that lets
you start, stop, and monitor the web server. The service version is easily
installed as an NT service, or can be run as a command-line program. It then
accepts the command-line switches described later.

<H3>Xitami Under UNIX</H3>

<P>Under UNIX, Xitami can run as a foreground process or a daemon. You can
run it interactively to test your configuration, and then configure your
system <TT>inittab</TT> or start-up scripts to run it automatically.

.build anchor syntax
<P>This is the command-line syntax for Xitami:

<PRE>Syntax: xitami [options...]
Options:
  -r directory     Root directory for web pages (webpages).
  -c directory     Directory for CGI programs (cgi-bin).
  -b portbase      Shift HTTP port 80 by this value.  E.g. to run
                   Xitami on port 7080, do 'xitami -b 7000'.
  -l filename      Log file for output (xitami.log).
  -a filename      Authentication file (xitami.aut).
  -q               Quite mode: no messages or log.
  -s               Server mode: run as background job.
  -t               Trace all socket i/o operations to log file.
  -v               Show Xitami version information.
  -h               Show summary of command-line options.
</PRE>

<P>The -s option has no effect on Windows systems; under UNIX it
does the following: Xitami recreates itself as a background
process, ignoring the SIGHUP signal.

<H3>Testing Xitami</H3>

<P>Run Xitami as described in the installation section. Connect with a
browser to the URL: <TT>http://<EM>hostname</EM>/</TT> or
<TT>http://<EM>hostname</EM>:5080/</TT>. If Xitami is correctly installed,
you should see a page entitled: "Welcome To Xitami". Please read this page
and try the various links and buttons to ensure that Xitami is working
correctly. If you install your own web pages, you can still access the
Xitami Welcome page by using the URL:
<TT>http://<EM>hostname</EM>/default.htm</TT>.

<H3>Using Xitami</H3>

<UL>
<LI>Xitami assumes that all web pages are in a subdirectory called
'webpages'.
<LI>CGI scripts and programs are in a subdirectory called
'cgi-bin'.
<LI>Directories can be protected by editing the file 'xitami.aut'.
<LI>Logging information is stored in two files: 'xitami.log' logs
information and error messages; 'access.log' logs HTTP requests.
</UL>
<P>These options can be changed. The webpages directory can be any relative
(depending on the directory where Xitami is run) or absolute directory (with
a full path name).

<P>The cgi-bin directory can be specified in various ways - see the section
on $(*cgidir=CGI_programming) in Xitami.

<P>Xitami will negotiate with the web browser to find a file when the URL
does not specify a filename. It will search for an HTML file called
index.htm, index.html, default.htm, or default.html, in that order. If none
of these files are found, Xitami returns the directory listing, formatted as
an HTML page.  Note that Xitami automatically looks for files with an
extension .html if a file with the .htm extension could not be found, and
vice-versa.

<P>You should install a file called 'index.htm' in the webpages directory,
to override the 'default.htm' file used by Xitami.

<H3>User Authentication</H3>

<P>Xitami supports the HTTP/1.0 Basic Authentication protocol. This is a
minimalistic security approach that is quick and supported by all browsers,
but which should not be used for very sensitive data, since the user name
and password can be extracted from the TCP/IP packets sent by the browser.

<P>The xitami.aut file holds the authentication information. This file is
not encoded, but is not accessible by browsers unless you place it in the
webpages directory. You can modify this file on the fly; Xitami will reload
it after a short delay (the server:refresh option).

<P>Protection is applied to directories or individual URLs. This is what
an authentication file looks like:

<PRE>#  Authorization file for XITAMI
#  Each [Entry] defines a protected URL or directory.
#  The directory name is followed by user=password pairs
#
[/Admin]
    admin=top secret
    realm=On-Line Administration
[stats/index.htm]
    root=PakYupTon
    admin=QzeCat96
    webmask=local
[/private]
    jacky="funny;password"
    sarah=arabica
    jonas=realtime
</PRE>

<P>Each section name specifies an URI or a directory name; the leading slash
is optional. When checking a resource called "/pub/mypages/file", Xitami will
look for entries in this order:
<PRE>[/pub/mypages/file]
[pub/mypages/file]
[/pub/mypages]
[pub/mypages]
[/pub]
[pub]
[/]
</PRE>

<P>The directory or URL name is not case-sensitive; Xitami always treats it
as lower-case. On systems where filenames are case-sensitive, "PRIVATE" and
"private" are treated as equal by Xitami, and are both handled by the
authentication data for [Private]. The user name is also case-insensitive.
The password is case-insensitive if the option security:password-case is set
to 0.

<P>Passwords can contain any printable character except ' and ". If you edit
or create the password file by hand or using scripts, use double quotes
around passwords to make sure that special characters like ; and # (which
indicate comments) are treated as part of the password.

<P>The entry 'webmask=' is treated in a special manner; this defines the
set of valid IP addresses for clients trying to access the directory.
The section on $(*webmasks) provides more details.  If you define an entry
consisting only of 'webmask=', Xitami will treat this as a resource that is
protected (has an entry) but has no valid users.

<P>The entry 'realm=' is also treated in a special manner; this defines the
'Realm' for the authentication.  The realm is returned to the browser, and
is the basis upon which it will remember user names and passwords.  If you
use the same realm for several directories or URLs, make sure that the user
names and passwords also match.  If no realm is defined, Xitami returns the
[Entry] name as the realm.

<P>The entry 'http-update=' is used to determine whether the HTTP PUT, COPY,
MOVE, and DELETE methods are allowed for the URL. By default these are not
permitted. To allow them, add 'http-update=1' to the authorisation file.

<P>A password "-" is treated as meaning 'not allowed' for that user. If
there is only one user defined, the resource will be inaccessible. This is
used, for example, in the default xitami.aut file to indicate that the
administration URL '/admin' is not accessibly until a non-default password
has been entered.  An empty password is treated as meaning 'non required'
for that user.

<P>The entry 'all=*' allows access to all users without a user id/password
check.  You can combine this with the webmask option to restrict access by
webmask without requiring user id/password entry at the same time.

<H3>Xitami Log Files</H3>

<H4>The Xitami Server Log File</H4>

<P>Xitami logs errors and information to the file 'xitami.log'. This file is
always opened in append mode. It looks something like this:
<PRE>96/12/05 20:19:41: I: OPEN port=80
96/12/06 07:22:03: I: OPEN port=80
</PRE>
To configure the server log, see the $(*serverlog=[Serverlog]) configuration
entry.

<P>By default, Xitami logs all HTTP requests to the file 'access.log', which
follows the common CERN/NCSA standard for web server log files. The log file
format consists of lines in this format:
<PRE>host - user [DD/Mon/YYYY:hh:mm:ss] "request" ddd bbbb "referer" "agent"
</PRE>
<TABLE BORDER=1 WIDTH=80%>
<TR NOWRAP><TH>This field:<TH>Has this purpose:
<TR NOWRAP><TD>host       <TD>IP number of requesting host
<TR NOWRAP><TD>user       <TD>Userid sent for authentication, or -
<TR NOWRAP><TD>request    <TD>HTTP request sent by client
<TR NOWRAP><TD>ddd        <TD>Status code returned by server
<TR NOWRAP><TD>bbbb       <TD>Size of data sent, excluding HTTP header
<TR NOWRAP><TD>referer    <TD>Referer document, or ""
<TR NOWRAP><TD>agent      <TD>User agent (browser), or ""
</TABLE>

<P>The access log files are automatically cycled: when Xitami starts, it
will save any existing file before starting a new access log. The old access
log file is given a name based on the date when it was last modified.

<H4>Extended Logging</H4>

<P>Xitami has an extended logging function that is much richer than the
standard access logging function. The extended logging function gives you
more control over the way that log files are cycled, over the log file
names, and over the log file format. The extended logging function also does
reverse-DNS translation of IP addresses.

The extended logging function works with access logs and error logs, and is
controlled by a number of additional configuration options in the
[ServerLog], [AccessLog], [ErrorLog], [FTPLog], and [FTPErrLog] sections:

.macro item <DT><TT><B>$*</B></TT>

<DL>
.item format
<DD>Specifies the log file format.  You can use one of a number of
predefined formats, or build your own format using any of these symbols:
<TABLE BORDER=1 WIDTH=80%>
<TR><TH>Symbol:     <TH>Expands to give:
<TR><TD>$\(client)  <TD>client address, as translated string
<TR><TD>$\(ipcli)   <TD>client address, as dotted number
<TR><TD>$\(ipsrv)   <TD>server address, as dotted number
<TR><TD>$\(request) <TD>request line (HTTP only)
<TR><TD>$\(query)   <TD>query string, if any (HTTP only)
<TR><TD>$\(method)  <TD>HTTP method or FTP command
<TR><TD>$\(status)  <TD>response code, 3 digits
<TR><TD>$\(recd)    <TD>request size, in bytes
<TR><TD>$\(sent)    <TD>response size, in bytes
<TR><TD>$\(time_ms) <TD>request duration, in msecs
<TR><TD>$\(time_s)  <TD>request duration, in seconds (n.nnn)
<TR><TD>$\(file)    <TD>filename to which request was translated
<TR><TD>$\(agent)   <TD>HTTP user agent (browser name)
<TR><TD>$\(referer) <TD>HTTP referer field
<TR><TD>$\(user)    <TD>user name, if any, else -
<TR><TD>$\(service) <TD>name of service (HTTP, FTP)
<TR><TD>$\(vhost)   <TD>virtual host name, if any, else -
<TR><TD>$\(datetime)<TD>date/time in NCSA format
<TR><TD>$\(yy)      <TD>year as two digits
<TR><TD>$\(year)    <TD>year as four digits
<TR><TD>$\(mon)     <TD>month
<TR><TD>$\(day)     <TD>day
<TR><TD>$\(hh)      <TD>hour, using 24-hour clock
<TR><TD>$\(mm)      <TD>minutes
<TR><TD>$\(ss)      <TD>seconds
<TR><TD>$\(XXX)     <TD>environment variable XXX (XXX is in uppercase)
</TABLE>
Xitami has these built-in formats:
<TABLE BORDER=1 WIDTH=80%>
<TR><TH>Format: <TH>Description:
<TR><TD>CLF     <TD>Common-log format, as used by the NCSA httpd server.
                <BR>$\(client) - $\(user) [$\(datetime)] "$\(request)"
                $\(status) $\(sent)
<TR><TD>CLFX    <TD>Extended CLF, as used by Apache and Xitami.
                <BR>$\(client) - $\(user) [$\(datetime)] "$\(request)"
                $\(status) $\(sent) "$\(referer)" "$\(agent)"
<TR><TD>MS      <TD>Microsoft IIS format.
                <BR>$\(client), $\(user), $\(mon)/$\(day)/$\(year),
                $\(hh):$\(mm):$\(ss), $\(service), Xitami, $\(ipsrv),
                $\(stime), $\(recd), $\(sent), $\(status), 0, $\(method),
                $\(file)
<TR><TD>LML     <TD>iMatix Logfile Markup Language, an XML format.
                <BR>&lt;LOG DATE="$\(datetime)" CLIENT="$\(client)"
                REQUEST="$\(request)" METHOD="$\(method)"
                STATUS="$\(status)" SENT="$\(sent)" FILENAME="$\(file)"
                USERNAME="$\(user)" SERVICE="$\(service)" /&gt;
<TR><TD>XLML    <TD>iMatix Extended LML, a richer XML format.
                <BR>&lt;LOG DATE="$\(datetime)" CLIENT="$\(client)"
                CLIENTIP="$\(ipcli)" SERVERIP="$\(ipsrv)"
                REQUEST="$\(request)" METHOD="$\(method)"
                STATUS="$\(status)" RECEIVED="$\(recd)" SENT="$\(sent)"
                DURATION="$\(time_ms)" FILENAME="$\(file)"
                USERAGENT="$\(agent)" REFERER="$\(referer)"
                USERNAME="$\(user)" SERVICE="$\(service)"
                VHOST="$\(vhost)" /&gt;
</TABLE>
<DD>Default: CLFX (compatible with standard Xitami).
<P>Note that the XML-based format are easy to work with using the GSLgen
tool from imatix.com.  GSLgen lets you create arbitrary reports, statistics,
and HTML analyses of access log data.

.item cycle
<DD>Specifies when to cycle the log file.  Can be one of:
<UL>
<LI>startup, or 0 - cycle log when the server is starts;
<LI>hourly, or 1 - cycle log each hour
<LI>daily, or 2 - cycle log each day
<LI>weekly, or 3 - cycle log each week
<LI>monthly, or 4 - cycle log each month
<LI>manual, or 5 - manual cycling only
<LI>size, or 6 - cycle the log file when it exceeds some size in Kbytes
<LI>lines, or 7 - cycle the log file when it exceeds some size in lines
</UL>
<DD>Default: daily.

.item cycle-how
<DD>Specifies how to cycle the log file.  Can be one of:
<UL>
<LI>rename - rename the old log file, and create a new file.
<LI>delete - delete the old log file, and create a new file.
<LI>move - move the old log file to some directory, and create a new file.
<LI>concat - append the old log file to some file, and create a new file.
<LI>process - run an arbitrary command to process the file, then create a
new file.
</UL>
<DD>Default: rename.

.item cycle-time
<DD>Specifies what time to cycle the log file.  This is used for the
'hourly', 'daily', 'weekly', and 'monthly' cycle options.  It can specify a
number of minutes (past the hour), or a time in hours and minutes formatted
like this: 'hh:mm'.  For instance, if this is set to '03:30' and the cycle
option is 'daily', then the log file will be cycled at 3.30am each day.
<DD>Default: 00:00 (cycle at midnight).

.item cycle-day
<DD>Specifies the day of the week (for cycle=weekly) or the day of the month
(for cycle=monthly) to cycle the log file.  0 is Sunday, 1 is Monday, etc.
<DD>Default: 0.

.item cycle-size
<DD>Specifies the limit, in whole Kbytes, for the cycle=size option.  When
the log file exceeds this size, it will be cycled.
<DD>Default: 0.

.item cycle-lines
<DD>Specifies the limit, in lines, for the cycle=lines option.  When the log
file exceeds this size, it will be cycled.
<DD>Default: 

.item cycle-arg
<DD>Specifies an argument used for the various cycle-how options:
<TABLE BORDER=1 WIDTH=80%>
<TR><TH>Cycle-how:  <TH>Uses argument like this:
<TR><TD>Rename      <TD>As time-stamped filename.
<TR><TD>Delete      <TD>Does not use argument.
<TR><TD>Move        <TD>As target directory name.
<TR><TD>Concat      <TD>As time-stamped filename.
<TR><TD>Process     <TD>As time-stamped command to execute.
</TABLE>
The time-stamping function expands symbols in the argument as follows:
<TABLE BORDER=1 WIDTH=80%>
<TR><TH>Symbol:     <TH>Expands to give this:   
<TR><TD>%y          <TD>day of year, 001-366
<TR><TD>%yy         <TD>year 2 digits, 00-99
<TR><TD>%yyyy       <TD>year 4 digits, 0100-9999
<TR><TD>%mm         <TD>month, 01-12
<TR><TD>%mmm        <TD>month, Jan
<TR><TD>%mmmm       <TD>month, January
<TR><TD>%MMM        <TD>month, JAN
<TR><TD>%MMMM       <TD>month, JANUARY
<TR><TD>%dd         <TD>day, 01-31
<TR><TD>%ddd        <TD>day of week, Sun
<TR><TD>%dddd       <TD>day of week, Sunday
<TR><TD>%DDD        <TD>day of week, SUN
<TR><TD>%DDDD       <TD>day of week, SUNDAY
<TR><TD>%w          <TD>day of week, 1-7 (1=Sunday)
<TR><TD>%ww         <TD>week of year, 01-53
<TR><TD>%q          <TD>year quarter, 1-4
<TR><TD>%h          <TD>hour, 00-23
<TR><TD>%m          <TD>minute, 00-59
<TR><TD>%s          <TD>second, 00-59
<TR><TD>%c          <TD>centisecond, 00-99
<TR><TD>%%          <TD>literal character %
</TABLE>
Additionally, when used for cycle-how=process, the argument can also contain
'%f', which is expanded to give the name of the old log file.
<DD>Default: ac%yy%mm%dd.log for the access log and er%yy%mm%dd.log for the
error log.

.item translate
<DD>Specifies whether the log file IP addresses are translated or not.
This can slow-down the server, especially if reverse-DNS lookups are not
working correctly, so always test this carefully before using it.  Note that
if translation is enabled, that you must configure the RDNS setup as
described in the section on $(*rdns="RDNS configuration").
<DD>Default: 0 (not enabled).
</DL>

<H3>Building Multilanguage Web Sites</H3>

<P>Xitami accepts the HTTP Accept-Language field and tries to do something
useful with it.  Not all browsers let you set this field, but some do.
This field lets users specify their preferences for particular versions of
documents.  For instance, if a user specifies that they prefer documents in
French, then English, the Accept-Language field will contain "fr, en".
Xitami handles this as follows, for a document URL "file.htm":
<UL>
<LI>If the file "file.htm" exists and is readable, Xitami returns it to the
browser as usual.
<LI>If the file does not exist, Xitami will search for "file.html",
"file.htm.fr", "file.htm_fr", "file.html.fr", "file.html_fr", "file.htm.en",
"file.htm_en", "file.html.en", and "file.html_en" in that order.
<LI>If the file is still not found, Xitami returns a 404 error status.
</UL>
<P>The same applies to default pages and to CGI scripts, and filters.  Note
that Xitami will only do the extra checking for alternative htm/html files
for .htm and .html files.


.-----------------------------------------------------------------
.page Configuration

<H2>$(TITLE)</H2>

<P>Xitami will run straight out of the box with no configuration. However,
advanced users may want to modify Xitami's behaviour with respect to
security, CGI, logging, etc. Xitami reads a configuration file,
<EM>xitami.cfg</EM> to get information such as the logfile name and MIME
types. This is how the configuration files work:
<UL>
<LI>If no configuration file is present, Xitami will use internal defaults
for most values, including some basic MIME types. However a fuller list of
MIME types can come only from the config file.
<LI>The configuration file must be in the current directory, or on the PATH.
<LI>You can either modify the xitami.cfg file directly (not recommended) or
create a second file, <EM>defaults.cfg</EM>, and place modified values
there. This is an example of a defaults.cfg file:
<PRE>[Server]
    debug=1
</PRE>
<LI>The name 'defaults.cfg' can itself be modified in xitami.cfg.
<LI>Since the defaults.cfg file is not included in the Xitami distribution,
you will no longer lose customised configurations when you re-install the
web server.
<LI>If you change the defaults.cfg file it will be automatically reloaded by
the server after a short delay (usually 60 seconds). If you did not create
defaults.cfg, Xitami will auto-reload the xitami.cfg file.
<LI>Any command-line options (or control panel options for the GUI versions
of Xitami) <EM>override</EM> the options set in the configuration files.
</UL>

<P>In this document, configuration options are specified using the notation
<I>section:keyword</I>, for instance 'server:debug=1' for the file example
above.

<H3>Web-Based Administration (WBA) Interface</H3>

<P>The URL '/admin' will launch the WBA. This URL is password protected so
that it is inaccessible until you have specified a new password. To enable
the WBA you should modify xitami.aut and set a password for the [/admin]
URL. Note that xitami.aut is re-installed with each new version, so the
better long-term approach is to define a [Security]filename= option in
defaults.cfg.

<P>The WBA can be used in conjunction with this HTML-based help text, as
regards the various config options. At any time you can, of course, modify
the config files by hand.

<P>To disable the WBA, remove the xiadmin entry from the [WSX] section in
the xitami.cfg and default.cfg files.

<H3>Configuration File Syntax</H3>

<P>A configuration file defines a series of sections, each containing
options. Comments are indicated by '#' at any point in the line. Blank lines
are ignored. Each option takes this form:
<PRE><EM>name</EM>=<EM>value</EM></PRE>

<P>The option <EM>name</EM> is case insensitive. You can put spaces around
the '=' if wanted. The option <EM>value</EM> is case-sensitive and may be
enclosed in double quotes if necessary. To specify an empty value, use "".
For example: <PRE>form-prefix=""</PRE>

<P>You can put references to environment variables in the configuration file
values using this syntax: $\(NAME). Note that the name must be in uppercase,
and that such references cannot be embedded.

<P>Prior to version 2.4, Xitami used "_" and "-" interchangeably in the
config files; this is no longer the case, and Xitami uses "-" in all keys.

<H3>The [Version] Section</H3>

<P>This section defines the configuration file as valid for Xitami. You
should not delete or modify this section.

<H3>The [Server] Section</H3>

<P>This section defines general parameters for the web server:

<DL>
.item webpages
<DD>Specifies the directory root where web pages are located.
This can be an absolute directory or a relative directory.
<DD>Default: webpages (a subdirectory of the server working directory)

.item cgi-bin
<DD>Specifies the directory where CGI programs are located. This can be an
absolute directory (starting with '/' or '\', if you prefer) or a relative
directory (not starting with '/' or '\'). See the section on
$(*cgidir=CGI_directories) for more details.
<DD>Default: cgi-bin (a subdirectory of the server working directory)

.item cgi-url
<DD>Specifies the string that Xitami uses to detect that a URL is
to be treated as a CGI.  This value must start with '/', and can
consist of one or more paths.  For instance: '/cgi', '/script',
'/scripts/cgi'.  This string does not actually refer to a real disk
directory; it is translated into a real filename using the cgi-bin
option, and a heuristic - see $(*cgidir=CGI_directories).
<DD>Default: /cgi-bin.

.item refresh
<DD>Specifies the delay in seconds between each server refresh.
At each refresh, the server does a number of administrative tasks:
reload the configuration file if changed; reopen the file
<TT>xitami.aut</TT> in any case; cycle the log files if necessary.
The refresh rate has a minimum of 10 seconds, unless it is set to
0 in which case no refresh occurs at all.  (This can be used to
determine if the refresh is causing sporadic problems.)
<DD>Default: 60 seconds

.item debug
<DD>If 1, the server creates various debugging log files. The file
request.log contains every incoming request. The file 'debug.log' in
particular logs the processing of the requests. The file 'header.log'
contains every response sent back to the browser. Use this to debug a
virtual host configuration that gives problems, or to determine the cause of
a recurrent problem.
<DD>Default:0 (zero)

.item debug-dir
<DD>Specifies a directory for debug log files.
Xitami interprets this value as an environment variable if possible,
else as a literal directory name.  If you want it to refer only to a
directory name, end it in '/'.
<DD>Default: debug.

.item temp-dir
<DD>Specifies a directory for temporary files. The server creates these to
pass information to and from CGI programs, and if debugging is enabled, you
may find that these accumulate.  Xitami interprets this value as an
environment variable if possible, else as a literal directory name.  If
you want it to refer only to a directory name, end it in '/'.
<DD>Default: temp.

.item log-dir
<DD>Specifies the directory for log files.  This option applies to all log
files that Xitami creates, except debug log files.  You can leave this
option empty, and specify a full path name for each log file: this allows
you to put different log files where you like.
<DD>Default: logs.

.item header-dir
<DD>Specifies the directory for header files.  Header files contain custom
HTTP headers, used for all files of some type.  For instance, you can ask
Xitami to output the HTTP header 'Cache-Control: no-cache' for all files
with the extension '.txt' by creating a file called 'header.txt' in this
directory, and containing the HTTP header line.  Each header file matches
all files with the same extension.
<DD>Default: logs.

.item limit
<DD>Specifies the maximum number of concurrent HTTP connections.  On
systems that can handle lots of open sockets (e.g. Unix, OS/2, WinNT,
Win98), you may want to set this high.  Xitami does not impose any
fixed limit.  If you set this value to 0, it means 'no limit'.
<DD>Default: 20 connections for Windows systems, no limit on others.

.item background
<DD>If 1, the server runs as a background process, on operating
systems that support this functionality.  If 0, the server runs
as a foreground process.  Background processes are detached from
their controlling terminal and must be halted by a system 'kill
process' request.  Foreground processes send their output to the
controlling terminal and can be halted by an interrupt key (e.g.
Ctrl-C).  Currently, only implemented on UNIX systems.
<DD>Default: 0 (foreground)

.item autostart
<DD>If 1, the server will run even if it cannot open the HTTP port.
It will retry every 5 seconds until you stop the server (which must
be done manually if the HTTP service cannot start).  The autostart
option applies both to the HTTP and the FTP service.  This option
is useful for systems where the network is not initially active, but
comes 'up' after some action (e.g. dialing-up).  Currently it is
implemented only in the 32-bit Windows version of Xitami, partly for
various boring technical reasons, but mostly because this is the only
platform that actually needs it.
<DD>Default: 0 (will halt if it cannot open its HTTP port).

.item recover
<DD>If 1, the server will try to recover from fatal errors using an internal
crash recovery system. This currently only works under Windows. When this
option is 0, Xitami will show a fatal error message and (under Windows)
allow the web administrator to continue. When this option is 1, Xitami will
silently recover and continue working.
<DD>Default: 0 (will halt and show a message).

.item dirsort
<DD>Specifies the sort order for directory listings.  You can sort by
file name, extension, size, or modification date/time using any combination
of the letters 'n', 'x', 's', and 't'.  For instance, dirsort=xnt will sort
by extension, then name, then time.  To sort in reverse order, use capital
letters.  For instance to show the most recent files first, use dirsort=T.
<DD>Default: n (sort by name).

.item advertize
<DD>Specifies whether Xitami adds the line 'Powered by Xitami' at the end
of directory listings.
<DD>Default: 1

.item keep-alive
<DD>If 1, Xitami will allow browsers that support the Keep-Alive
protocol to carry-out multiple requests on a single connection.
This can improve performance, especially on pages with very many
small files.  If 0, the browser creates a new connection for
each HTTP request.
<DD>Default: 1

.item keep-alive-max
<DD>A number greater than 1; Xitami will allow this many requests
on an 'alive' connection before closing it.  Setting this to 1 has
the same effect as setting keep-alive to 0.
<DD>Default: 25

.item timeout
<DD>A 'kept-alive' connection will last this long before Xitami closes
it.  The timeout is specified in seconds.  You can actually put
this value quite high if wanted: the cost of an open connection is
low and does not degrade the server performance.  Anything more than
a minute or so is probably not worth it.
<DD>Default: 30 seconds

.item default<EM>n</EM>
<DD>Specifies the default files. Up to 32 default files can be specified.
When the user specifies a URL without filename, the server searches the
directory for the default files, in order, from default1 to default32, until
a matching file is found or the default sequence ends.  Note that Xitami
automatically looks for .html extensions if a .htm file is not found.
<DD>Default: default1=index.htm default2=default.htm

.item cache-defaults
<DD>Normally, defaults pages are cached like any other. This means that if
the browser has already loaded the page, it will add a HTTP request header
'If-Modified-Since'. Xitami uses this date to determine whether to send the
page or not.  In most cases, it is appropriate to leave this option enabled.
However, if you are developing several sites, you may find that the browser
shows the default page from one site when you look at another.  You can
clear the browser cache and reload, but this is usually pretty tiresome.
So, disable this option, and Xitami will never cache defaults pages.

.item error-header
<DD>Specifies the text used to preface an HTTP error message.  The
text may either be HTML, or a filename prefaced by '@'.  If the text
comes from a file, Xitami will re-read this file each time it sends
an error response.
<DD>Default: <TT>&lt;HTML&gt;&lt;TITLE&gt;Error&lt;/TITLE&gt;
&lt;BODY&gt;&lt;H1&gt;&lt;B&gt;</TT>

.item error-footer
<DD>Specifies the text used to end an HTTP error message.  The
text may either be HTML, or a filename prefaced by '@'.  If the text
comes from a file, Xitami will re-read this file each time it sends
an error response.
<DD>Default:<TT>&lt;/B&gt;&lt;/H1&gt;&lt;/BODY&gt;&lt;/HTML&gt;</TT>

.item text-xxx
<DD>Specifies the text used for a specific HTTP error code. The text may
either be HTML, or a filename prefaced by '@'. If the text comes from a
file, Xitami will re-read this file each time it sends an error response.
The text is always prefixed by the error header and suffixed by the error
footer. You can use this for error codes 4xx and 5xx. 2xx codes are not
errors, and 3xx codes are handled by the browser without displaying any text
that the server might send. To test a specific error, you can use the
special URL 'error?xxx'. For instance, to simulate a 402 error (Payment
Required), use a URL like this: 'http://127.0.0.1/error?402'. You can
simulate a 302 error (temporary redirection) using a URL like this:
'http://127.0.0.1/error?302:/somedir/somepage.htm'. The error codes returned
by Xitami are:
<TABLE BORDER=1 WIDTH=80%>
<TR><TD>200<TD>Ok
<TR><TD>201<TD>Created
<TR><TD>202<TD>Accepted
<TR><TD>203<TD>Partial information
<TR><TD>204<TD>No response
<TR><TD>301<TD>Moved
<TR><TD>302<TD>Found
<TR><TD>303<TD>Method
<TR><TD>304<TD>Not modified
<TR><TD>400<TD>Bad request
<TR><TD>401<TD>Unauthorized
<TR><TD>402<TD>Payment required
<TR><TD>403<TD>Forbidden
<TR><TD>404<TD>Not found
<TR><TD>412<TD>Precondition failed
<TR><TD>413<TD>Request entity too large
<TR><TD>500<TD>Internal error
<TR><TD>501<TD>Not implemented
<TR><TD>502<TD>Service temporarily overloaded
</TABLE>
<DD>Default:<TT>HTTP/1.0 XXX:</I>error text</I></TT>

.item priority
<DD>Specifies the server priority, on systems where this is possible
(currently only Windows NT and 95).  1=normal, 2=low, 3=high.  You can set
the priority to 'low' for systems where the server should not interfere with
other processes.  You can set the priority to 'high' for systems where the
server is the main process.

.item ipaddress
<DD>Specifies the IP address on which Xitami should open its HTTP
connection. If this is 0, Xitami will open its connection on all available
IP addresses. This is normally a Good Idea, since it makes configuration
much simpler on a multihomed system, and is completely correct on a
single-homed system (i.e. a system with just one IP address, which is pretty
common). If you have multiple IP addresses and want to run Xitami on just
one of these, you can specify it here using the standard dotted network
address format. This will effectively disable IP-based virtual hosting.
<DD>Default: 0 (take any available IP address).

.item portbase
<DD>Defines the IP port base for the server.  Add 80 to this to
calculate the actual port used for the HTTP service.  For
example, to run the server on port 6080, define <EM>portbase</EM>
as 6000.  We use a portbase in place of an absolute address so
that multiple protocols (e.g. the FTP server embedded into Xitami)
can be managed as one unit.
<DD>Default: 0 (zero)

.item portbase<EM>n</EM>
<DD>Specifies one or more alternate portbases; if the primary HTTP port is
unavailable, will try portbase1, portbase2, etc. until a free port is found,
or no further alternate portbases are found.
<DD>Default: no default.

.item base-host
<DD>Specifies the name of the configuration file used for the base virtual
host. You may need this option when you have virtual hosts that all inherit
values from defaults.cfg, but where the base host needs different values.
<DD>Default: basehost.cfg

.item hostname
<DD>Specifies your fully-qualified domain name for the server. This name is
used whenever the server needs to redirect a request (e.g. for image maps).
You may want to provide this when configuring a virtual host. It is not
usually necessary on single-hosted systems.
<DD>Default: the system hostname.

.item defaults
<DD>Specifies the name of the local configuration file. This file provides
the defaults that are used for all virtual hosts. Anything in the defaults
file overrides the contents of xitami.cfg.
<DD>Default: defaults.cfg
</DL>

<H3>The [Alias] Section</H3>

<P>This section lets you define multiple document roots. Each alias
specifies a name and a path. For example:
<PRE>[Alias]
cdrom=G:\html
private/pub=i:\pub
private/doc=i:\docs\current
</PRE>
<P>The alias name may contain '/'. It is not case sensitive. In A URL, the
alias comes at the start, e.g.:
<PRE>http://127.0.0.1/cdrom/index.htm
</PRE>
<P>There is no fixed limit to the number of aliases you can define.
However, if you define large numbers of aliases, Xitami will run slower.
An alias can refer to a file, including extension.  In this case, the
file will act as a default file for that alias.

<H3>The [Virtual-Hosts] Section</H3>

<P>This section lets you define virtual hosts.  A virtual host can
be specified in two ways: by IP address (if your system has multiple
IP addresses) or by name (if your system has multiple names).  Each
entry in the [Virtual-Hosts] section defines one virtual host, like
this:

<PRE>[Virtual-Hosts]
www.rnd.imatix.com=research.cfg
253.112.23.51=home.cfg
</PRE>

<P>See the section on $(*vhosts=virtual_hosts) for more details.

<H3>The [Filter] Section</H3>

<P>This section is used to define filter programs.  Filters are
programs that are run with the (usually) HTML file as input.  You
can write filters in Perl, Awk, C, Rexx, or any other language that
can handle standard input/output streams.  Filters are a little
like CGI programs, except that they are invoked whenever a certain
type of file is requested.

<P>Each definition in this section consists of a file extension with a
leading dot and a command. The command may be with a full path, or without,
if the program is on the PATH. Xitami lets you run scripts directly under
OS/2 and Windows 95/NT, if you respect the header conventions noted in the
CGI section.

<P>You can pass any type of input file to a filter program, with the
restriction that it must be a text file. Binary files will probably not work
under MS-DOS-like file systems. Under Unix there is no difference between
text and binary files.

<P>This is an example of the [Filter] section:
<PRE>[Filter]
    .ssi=perlssi        #  Pass *.ssi to the Perlssi filter
</PRE>

<H3>The [CGI] Section</H3>

<P>This section controls the CGI protocol:

<DL>
.item enabled
<DD>Allows you to disable CGI handling in one stroke.  If this is 1, URLs
that translate to a CGI are allowed.  If this is 0, URLs that translate to a
CGI are rejected with a code 501 (Not implemented).
<DD>Default: 1 (CGI is enabled)

.item workdir
<DD>Defines the directory where CGI programs will run. The web server must
have write access to this directory. You can tell Xitami to always use the
script directory by specifying "-". (This is useful if you put scripts in
various subdirectories.)  This option applies to filters too.
<DD>Default: - (script directory)

.item wildcard
<DD>Defines whether the CGI URL indicator ('/cgi-bin') is allowed anywhere
in the URL, or only at the start.  If 1, it is allowed anywhere in the URL.
If 0, it may come only at the start of the URL.  Note that setting this to
1 opens a significant security hole, if you also allow people to FTP files
into the HTTP area.  As soon as someone creates a directory called /cgi-bin,
they can upload, and execute, CGI programs.  In some configurations this is
desirable.  In other configurations (e.g. if you allow your users to upload
CGI scripts, or if you do not do FTP uploads into the HTTP space) it can be
desirable.
<DD>Default: 0 (/cgi-bin matches only at the start of the URL).

.item timeout
<DD>The maximum time, in seconds, that a CGI program may run. This option
prevents looping CGI programs from blocking the server system for more than
a short period. However, you will want to tune it if you run exceptionally
slow CGIs, e.g. large database searches. (Which we do not recommend; you
should always aim for a response time of less than 2 seconds, and 5 seconds
for 'heavy' processing.)  If you set this to zero, Xitami lets CGIs run for
an arbitrarily long time (actually one hour) before killing them.
<DD>Default: 60

.item monitor
<DD>The frequency, in milliseconds, at which Xitami monitors the progress of
CGI programs. If you raise this time to 500, for example, Xitami will check
the CGI program's progress every 1/2 second. Anything less than 100 is not a
good idea, probably, since it will slow-down the server.
<DD>Default: 200

.item dirlist
<DD>If 1, the server will generate a directory listing for any URL that
refers to a CGI directory not containing a default file. If 0, such accesses
result in a 403 Forbidden response.
<DD>Default: 0 (listings are allowed)

.item msdos-style
<DD>If 1, CGI programs and scripts get all filenames passed through the
environment and on the command line in MS-DOS format (using backslashes);
otherwise they get filenames in Unix format (using forward slashes).
<DD>Default: 0.

.item debug
<DD>If 1, the server creates files containing the CGI input and output
streams, called tmp<I>xxxxx</I>.cgi and tmp<I>xxxxx</I>.cgo. You can use
these to debug CGI programs' output.
<DD>Default: 0 (no debugging output)

.item stdio
<DD>If 1, the server uses standard input/output streams to pass CGI input
and output data. This is suitable for languages such as C, Perl, etc. that
have access to stdin and stdout streams. When using languages that cannot
read from stdin or write to stdout, you must set this value to 0, and refer
to the CGI_STDIN and CGI_STDOUT environment variables.
<DD>Default: 1 (use standard i/o streams).

.item mixed-url
<DD>If 1, allows images, HTML, and other files in the cgi-bin directory. The
CGI program can refer to these using relative addressing. If 0, such files
are not permitted. Note that in any case, executable files (such as Perl
scripts) are always executed, never downloaded.
<DD>Default: 1 (non-executable files may be placed in /cgi-bin)

.item errlog
<DD>Specifies a filename for output of CGI program errors. A CGI program can
send error messages to the stderr stream; these are captured in this log
file.
<DD>Default: Empty (no logging of CGI errors)

.item environment
<DD>If 1, the CGI program gets the full web server environment, including
values such as PATH. If 0, does not have access to such data. The
environment data can assist a hostile attack on the host system.
<DD>Default: 1 (server environment is supplied)

.item http-fields
<DD>Defines whether the HTTP request header fields are passed to the CGI
program or not.
<DD>Default: 1 (HTTP header fields are supplied)

.item http-prefix
<DD>Specifies the prefix used to identify HTTP header fields in the CGI
program environment. Note that this should be different from the
form-prefix, so that there is no chance of an overlap in field names. To
specify 'no prefix', use http-prefix="".
<DD>Default: HTTP_

.item form-fields
<DD>If 1, the form data (coming from a GET or POST method) is supplied as
environment variables. This can be required by some CGI programs. However,
when large forms are used, this may cause the environment to be over-filled.
Since the form data is also available to the CGI program on its standard
input device, it can be useful to set this option to 0.
<DD>Default: 1 (form data is included in environment)

.item form-prefix
<DD>Specifies the prefix used to identify form data fields in the CGI
program environment. To specify 'no prefix', use form-prefix="".
<DD>Default: FORM_

.item form-query
<DD>If 1, the form data (coming from a POST method) is supplied as the
environment variable QUERY_STRING. If 0, this data is supplied as separate
environment variables, and on the standard input device but not as a
QUERY_STRING environment variable. Some CGI products (we know of Progress
Webspeed) will barf if this is turned-on, since they do not expect input in
both this string and on stdin.
<DD>Default: 0 (form data is not included in QUERY_STRING)
</DL>

<H3>The [CGI-Environment] Section</H3>

<P>This section is used to define specific CGI environment variables.
Each definition is taken literally and passed to the CGI program.
This can be useful when using virtual hosts.  For example:
<PRE>[CGI-Environment]
HOSTNAME=sales
</PRE>

.build anchor cgi-alias
<H3>The [CGI-Alias] Section</H3>

<P>This section lets you define multiple CGI program roots. Each alias
specifies a name and a path. For example:
<PRE>[CGI-Alias]
demos=G:\site\demos
</PRE>
<P>The alias name may contain '/'. It is not case sensitive. In A URL, the
alias comes at the start, e.g.:
<PRE>http://127.0.0.1/demos/calendar
</PRE>

<H3>The [Lrwp] Section</H3>

<P>This section controls the LRWP (long-running web process) protocol.

<DL>
.item enabled
<DD>Specifies whether the LRWP agent is enabled or not. 
<DD>Default: 1.

.item port
<DD>Specifies the port on which the LRWP agent accepts connections. 
<DD>Default: 81.

.item webmask
<DD>Specifies the webmask for LRWP clients. Normally this is restricted to
local LRWP clients, but you can also construct LRWP networks from multiple
servers. Use 'webmask=local' to specify just local addresses, or
'webmask=item,item,...' to specify one or more types of access. Each item
allows or excludes some IP address(es): '250.12.13.*' allows matching
addresses, '!250.12.13.*' excludes matching addresses (but does not allow
others). '!250.12.13.*,*' excludes one set of addresses and allows all
others. 'webmask=@iplist.txt' reads the list of webmasks from a text file.
<A HREF="#webmasks">More information is available.</A>
<DD>Default: local.

.item allow-all
<DD>Allows all LRWP clients to connect. If this is set to 1, any LRWP
application will be allowed to connect. Otherwise the LRWP-Application
section must be used to authorise specific applications, and optionally
specify a password to use during the authentication stage. 
<DD>Default: 1.
</DL>

<H3>The [Lrwp-Application] Section</H3>

<P>This section consists of one entry per application name (either URL
prefix, or a URL "extension" name). The entry should either to be set to
"*" to indicate the application is allowed without authentication, or to a
password/phrase that is used in LRWP 2.0 authentication with that
application. If a password/phrase is specified, then LRWP 1.0 clients will
not be allowed to connect with that name (as they cannot perform the
required authentication).

<P>This is an example of enties in the [Lrwp-Application] section:

<PRE>[LRWP-Application]
    testapp=*             # Connect without any password
    secureapp=funky161    # Connect using secure password
</PRE>

<H3>The [Security] Section</H3>

<P>This section defines HTTP server security options:

<DL>
.item filename
<DD>Specifies the Basic Authentication file.
<DD>Default: xitami.aut

.item password-case
<DD>If 1, passwords are case-sensitive.  If 0, passwords are
always converted to lower-case before validation.  If you set
this to 0, be sure to use lower-case passwords in the password
file.
<DD>Default: 1 (case-sensitive)

.item dirlist
<DD>If 1, the server will generate a directory listing for any
URL that refers to a directory not containing a default file.
If 0, such accesses result in a 403 Forbidden response.
<DD>Default: 1 (listings are allowed)

.item admin
<DD>If 1, the server will allow access to the web-based administration pages
(WBA). If 0, the WBA agent will not be started. This is a safe way to
disable WBA access, for sites where this is not needed and poses a potential
security hole.
<DD>Default: 1 (WBA is enabled)

.item superuser
<DD>Specifies the Superuser password. If this is "" or "-", no superuser
access is allowed. Anything else is accepted as a password for all protected
resources, including the online administration functions. This password
overrides the webmask for any resource. So, <EM>be really careful</EM>.
Okay, I warned you. (It does not override the webmask for the entire
server.)
<DD>Default: "" (disabled)

.item safepaths
<DD>If 1, the server will refuse access to 'unsafe' URLs, which is a notion
that Microsoft invented when they allowed the same file to have a short and
a long filename.  When this is enabled, Xitami rejects any URLs that contain
a directory name which can be translated to a different long name and the
user receives a 403 error message.  If 0, this check is not done.
<DD>Default: 1 (security check is enabled)

.build anchor webmasks
.item webmask

<DD>Limits the set of clients that can connect to the server. This is meant
to provide an easy way of creating an internal web service. The web mask is
one or more patterns, each of which specifies some valid or excluded
addresses. A pattern is some IP address in string format, possibly with '*'
replacing part of the end of address. For instance, the pattern
'250.12.13.*' restricts access to clients with IP addresses starting with
'250.12.13'. If you start a pattern with '!', the pattern excludes all
clients with matching addresses. A pattern '*' matches all addresses. Use
spaces and/or commas to separate patterns. The option 'webmask=local' has
special meaning: it restricts access to the local system, whatever its IP
address.  You can't use the word 'local' in a list of webmasks.

<P>If you want to use the same webmask set in a number of places, or if you
have a long list of addresses, you can use '@filename' as the webmask. Enter
the webmasks in the specified file, using whitespace or blank lines freely.
If the webmask file is not present, Xitami displays an error message in its
log files, and acts as if the webmask was not defined at all.

<P>Some examples:
<PRE>webmask=local            # grant access to local browsers only
webmask=192.*             # grant access to addresses 192.* only
webmask=192.*,127.0.0.1   # 192.* and local host
webmask=!192.*,*          # deny access to 192.* addresses
webmask=@iplist.txt       # read webmask from a text file
</PRE>

.item setuid
<DD>Specifies whether the server switches to a safe user id and group at
startup.  This only works under Unix systems.  When you use this option, you
can be certain that the server runs with the minimum necessary privileges.
<DD>Default: 0 (disabled)

.item setuid-user
<DD>When the security:setuid option is enabled, switches to this user id
after opening its HTTP and FTP ports.  You should ensure that the user id
exists and has suitable authority to write to log files, etc.
<DD>Default: nobody

.item setuid-group
<DD>When the security:setuid option is enabled, switches to this group id
after opening its HTTP and FTP ports.  You should ensure that the group id
exists and has suitable authority to write to log files, etc.  If you set
this option to an empty value, e.g. "", Xitami does not change the group id.
<DD>Default: nogroup
</DL>

.build anchor serverlog
<H3>The [ServerLog] Section</H3>

<P>This section controls the server error and information log:
<DL>
.item enabled
<DD>Specifies whether server logging is enabled or not.
<DD>Default: 1 (enabled).

.item filename
<DD>Specifies the name of the server log file. If this value is "NULL"
(spelling is important) then no log files are produced at all. This is
equivalent to running Xitami in console mode with the -q option.
<DD>Default: xitami.log

.item cycle
<DD>Can be one of:
<UL>
<LI>startup, or 0 - cycle log when the server is starts;
<LI>hourly, or 1 - cycle log each hour;
<LI>daily, or 2 - cycle log each day;
<LI>weekly, or 3 - cycle log each week;
<LI>monthly, or 4 - cycle log each month, or
<LI>manual, or 5 - manual cycling only.
</UL>
<DD>Default: daily.
</DL>

<H3>The [AccessLog] Section</H3>

<P>This section controls the server access log:

<DL>
.item enabled
<DD>Specifies whether access logging is enabled or not.
<DD>Default: 1 (enabled).

.item filename
<DD>Specifies the name of the access log file.
<DD>Default: access.log

.item cycle
<DD>Can be one of:
<UL>
<LI>startup, or 0 - cycle log when the server is starts;
<LI>hourly, or 1 - cycle log each hour;
<LI>daily, or 2 - cycle log each day;
<LI>weekly, or 3 - cycle log each week;
<LI>monthly, or 4 - cycle log each month, or
<LI>manual, or 5 - manual cycling only.
</UL>
<DD>Default: daily.

.item local
<DD>Specifies whether to include local addresses or not.
<DD>Default: 1 (include local addresses).
</DL>

<H3>The [ErrorLog] Section</H3>

<P>This section controls the server error log:

<DL>
.item enabled
<DD>Specifies whether error logging is enabled or not.
<DD>Default: 1 (enabled).

.item filename
<DD>Specifies the name of the error log file.
<DD>Default: errors.log

.item cycle
<DD>Can be one of:
<UL>
<LI>startup, or 0 - cycle log when the server is starts;
<LI>hourly, or 1 - cycle log each hour;
<LI>daily, or 2 - cycle log each day;
<LI>weekly, or 3 - cycle log each week;
<LI>monthly, or 4 - cycle log each month, or
<LI>manual, or 5 - manual cycling only.
</UL>
<DD>Default: daily.

.item local
<DD>Specifies whether to include local addresses or not.
<DD>Default: 1 (include local addresses).
</DL>

.build anchor rdns
<H3>The [Rdns] section</H3>

<P>This section defines the configuration of the reverse-DNS lookups used by
Xitami to translate IP addresses for its access log files.

<DL>
.item primary-server
<DD>Defines the primary DNS server used for lookups.  This value is
mandatory for RDNS lookups.
<DD>Default: 127.0.0.1.

.item secondary server
<DD>Defines a secondary DNS server, if one is available.  This will provide
a backup RDNS server if the primary server does not respond.
<DD>Default: "".

.item recurse-lookups
<DD>Specifies whether Xitami uses recursive lookups or not.  Depending on
the DNS configuration, this can be faster or slower than non-recursive
lookups. 
<DD>Default: 1 (use recursive lookups).

.item debug
<DD>Specifies whether Xitami should output trace entries for its RDNS work.
If 1, each RDNS lookup sends trace information to debug.log.  Use this if
you are having problems getting reverse-DNS lookups to work.
<DD>Default: 0 (do not debug).

<H3>The [Mime] Section</H3>

<P>This section defines additional MIME file types; the following
MIME types are defined by default (if xitami.cfg is not present):

<DL>
.item default
<DD>Defines default MIME type for file extensions that are not
otherwise defined.
<DD>Default: */*

.item txt
<DD>Defines MIME type for files with extension .txt.
<DD>Default: text/plain

.item htm
<DD>Defines MIME type for files with extension .htm.
<DD>Default: text/html

.item html
<DD>Defines MIME type for files with extension .html.
<DD>Default: text/html

.item jpg
<DD>Defines MIME type for files with extension .jpg.
<DD>Default: image/jpeg

.item jpeg
<DD>Defines MIME type for files with extension .jpeg.
<DD>Default: image/jpeg

.item gif
<DD>Defines MIME type for files with extension .gif.
<DD>Default: image/gif

.item doc
<DD>Defines MIME type for files with extension .doc.
<DD>Default: application/msword
</DL>

<P>You can add to, and modify, these definitions. Note that the extension
and MIME type must be specified in lowercase. To specify a MIME type for
files with no extension, use ".=xxx/xxx".

<H3>The [Console] Section</H3>

<P>This section controls the browser-based admin screens.

<DL>
.item startup
<DD>Specifies the initial screen to show; the values for this option
are deliberately not documented.
<DD>Default: 1 (main page).

.item refresh
<DD>Specifies whether the console information screens should refresh
automatically or not. This only works with browsers that support the
&lt;META HTTP-EQUIV="REFRESH"&gt; tag. On some browsers, the refresh option
can cause warning messages.
<DD>Default: 0 (refresh off).

.item rate
<DD>Specifies the rate at which the refresh occurs, in seconds.
<DD>Default: 10 seconds.

.item capture
<DD>Specifies whether console output is sent to a file or not.
<DD>Default: 1 (console output is captured).

.item filename
<DD>If the capture option is set, this option specifies a filename.
<DD>Default: console.log.

.item append
<DD>if the capture option is set, this option controls whether the
console log is cleared each time the server is started, or not.
<DD>Default: 0 (console.log is cleared each time).

.item javascript
<DD>If 1, the WBA screens will use small amounts of JavaScript to
improve the user-interface; for instance placing the cursor on the
first input field automatically.  If 0, JavaScript will not be used.
In general enabling JavaScript will give better results.
<DD>Default: 1 (use JavaScript).

.item large-icons
<DD>If 1, the WBA screens will show large icons on the icon bar.  If
0, they will show small icons with only images, no text labels.
<DD>Default: 1 (show large icons with text labels).
</DL>

<H3>The [Win32] Section</H3>

<P>This section controls options specific to the 32-bit Windows
versions of Xitami.

<DL>
.item 16bit-cgi
<DD>Defines whether 16-bit CGIs are supported or not.  If they
are, all CGIs are run in a separate virtual machine.  This is
safe but slow.  If you use only 32-bit CGIs, you can run CGIs
faster by setting this option to 0.
<DD>Default: 1 (support 16-bit CGIs)

.item secure
<DD>If 1, the 'Stop', 'Start', and 'Terminate' buttons on the Xitami Windows
control panel are disabled. This is intended for configurations where the
server may only be halted by an authorised administrator, using the WBA
control panel.
<DD>Default: 0 (control panel is fully enabled)

.item service-name
<DD>This option is used under Windows NT for the NT service version of
Xitami.  You can only change this by manually editing defaults.cfg; it is
not shown in the WBA.  Change this before installing xiwinnt.  You can use
this option to install multiple instances of Xitami each with a different
service name and title (as defined by the win32:service-text option).  You
will need a separate working directory for each such Xitami service that you
start.
<DD>Default: Xitami.

.item service-text
<DD>This option is used under Windows NT for the NT service version of
Xitami.  You can only change this by manually editing defaults.cfg; it is
not shown in the WBA.  Change this before installing xiwinnt.
<DD>Default: Xitami Web Server.
</DL>

<H3>The [WSX] Section</H3>

<P>This section is used to define web server extension (WSX) agents. A WSX
agent is written using the SMT toolkit. An example of a WSX agent is the
on-line administration agent. See the section on $(*wsx=WSX_development) for
details. Each entry in this section defines a URL prefix and an agent name.
The prefix identifies all URLs passed to this agent, and consists of one or
more directory names separated by '/'. These are the standard WSX agents
that Xitami defines:
<PRE>[WSX]
    admin=xiadmin       #   Web-based administration agent "/admin"
    error=xierror       #   Error simulation agent "/error?xxx"
</PRE>

<P>You can modify this section if you want to add your own WSX agents, or
disable one of the standard agents. For example, to disable the on-line
administration feature, modify the above entry as follows:
<PRE>[WSX]
    admin=""
</PRE>

.-----------------------------------------------------------------
.page Using The Common Gateway Interface (CGI)

<H2>$(TITLE)</H2>

<P>Xitami supports CGI programs in Perl, C, or any other language
that your system supports.  In general, CGI program written for
web servers such as Apache and NCSA httpd will run unchanged with
Xitami.

<P>A 'CGI' program is considered to be any URL with '/cgi-bin'
somewhere in the path name.  These are all examples of valid
CGI program URLs:
<PRE>http://localhost/cgi-bin/myprog
http://localhost/cgi-bin/myprog.pl
http://localhost/products/install/cgi-bin/myprog</PRE>

<P>Xitami defines these CGI environment variables:
<UL>
<LI>For each HTTP header field, inserts a symbol called HTTP_xxxx
where xxxx is the header field name.  The field names are put
into uppercase, and hyphens replaced by underlines.
<LI>For each variable in the query string, inserts a symbol
called FORM_xxxx where xxxx is the variable name.
<LI>SERVER_SOFTWARE is the name of the web server.
<LI>SERVER_VERSION is the version of the web server ($(version)).
<LI>SERVER_NAME is the current host name.  This can be overridden by
defining a value for server:hostname.
<LI>SERVER_URL holds the full URL to the server.
<LI>SERVER_PORT is the port on which the web server is running.
<LI>SERVER_PROTOCOL is the HTTP version in use (e.g. "HTTP/1.0").
<LI>GATEWAY_INTERFACE is the CGI version in use (e.g. "CGI/1.1").
<LI>REQUEST_METHOD is the HTTP method used, "GET" or "POST".
<LI>QUERY_METHOD is same as the REQUEST_METHOD.
<LI>CONTENT_TYPE is the Content-Type: HTTP field.
<LI>CONTENT_LENGTH is the Content-Length: HTTP field.
<LI>REMOTE_USER is the authorised username, if any, else "-"; this
will only be set if the user has accessed a protected URL.
<LI>REMOTE_HOST is the same as REMOTE_ADDR.  Xitami does not
translate host addresses into names.
<LI>REMOTE_ADDR is the address of the remote host, "x.x.x.x".
<LI>SCRIPT_PATH is the path of the script being executed.
<LI>SCRIPT_NAME is the URI of the script being executed.
<LI>QUERY_STRING is the query string following the URL.
<LI>PATH_INFO is any path data following the CGI URL.
<LI>PATH_TRANSLATED is the full translated path with URL arguments.
<LI>CGI_ROOT is the CGI binary directory.
<LI>CGI_STDIN is the CGI standard input filename.
<LI>CGI_STDOUT is the CGI standard output filename.
<LI>CGI_STDERR is the CGI standard error filename, if any.
<LI>DOCUMENT_ROOT is the main webpages root directory.
</UL>
<P>A CGI program can get arguments from a number of places, depending on how
Xitami is configured and how the HTTP request is made.
<UL>
<LI>For GET requests, it is usual to follow the URL with '?' and some
arguments. These are passed to the CGI program in the QUERY_STRING variable.
The standard format for passing a number of variables in this way is (e.g.):
<PRE>http://hostname/cgi-bin/someprog?var1=value1&var2=value2...
</PRE>
<LI>If the arguments do not contain '=', they are broken into separate
arguments and passed to the CGI program that way too.  Each '+' in the query
string is used as a separator.  This may be used in a URL like this:
<PRE>http://hostname/cgi-bin/someprog?arg1+arg2+arg3...
</PRE>
<LI>Larger amounts of data should be passed using the POST method, in which
case the CGI program reads the data from its stdin stream.  (You can also
configure Xitami to pass these in the QUERY_STRING variable if the data is
not too large).
</UL>

<H3>CGI Programs Under 16-bit Windows</H3>

<P>The 16-bit Windows version of Xitami does not support CGI.

<H3>CGI Programs Under 32-bit Windows</H3>

<P>Under Windows 95 and NT, you can run different types of CGI programs:

<UL>
<LI>16-bit executable .exe files. You do not need to specify the .exe file
extension; Windows will correctly locate an .exe file. A bug in Windows 95
(we think) prevents 16-bit CGI programs from working when the Xitami server
is installed in a directory containing a long filename.

<LI>32-bit executable .exe files. The files do not actually need an .exe.
extension; Xitami will execute a file with any name so long as it is in the
CGI directory and 'looks' like an executable file (precisely: it must start
with the letters "MZ").

<LI>Perl programs. The first line of the program must start with the
characters "#!" followed by a space and the perl filename. The '.exe'
extension is optional. Perl must be installed on your system. For example,
if your Perl interpreter is located in c:\tools\perl you could start your
Perl program like this:
<PRE>#! c:\tools\perl</PRE>
You can use '\' or '/' in the path name.  The Perl script should be
fully specified; Xitami does not assume any kind of extension.  Perl
programs sometimes end in '.pl'; we recommend you use no extension.
To provide compatibility with Perl scripts coming from UNIX, Xitami
will handle a path like '/usr/bin/perl' by removing '/usr/bin/' and
looking for PERL.EXE on the PATH, if /usr/bin/perl does not actually
exist as a file.
You can increase the speed of Perl CGI programs under Windows 95
by adding this definition to your system.ini file (this may also work
under NT; we've not tested it):
<PRE>[NonWindowsApp]
    CommandEnvSize=4096
</PRE>
This reserves memory for DOS applications, and you should make this
setting higher if you have plenty of RAM.

<LI>Awk scripts, and scripts in other UNIX-type languages that accept
comments starting with '#'. Start the script with '#! <interpreter name>' as
for Perl.

<LI>Visual Basic programs. Use the CGI_STDIN and CGI_STDOUT environment
variables to read the HTTP form data, and write the HTML output. You may
want to set cgi:form-fields to 0, since you can pick-up the HTTP form data
from the stdin file instead of the environment. Set cgi:form-query to 1 so
that you have access to the URL arguments if any. Set cgi:stdio to 0 so that
your CGI program has full access to the input and output files.

<LI>Rexx programs. The first line of the program must start with the
characters "/*!" followed by a space and the full filename for Rexx. The
'.exe' extension is optional. You can close the comment on the same line,
but the '*/' must be the last text on the line.

<LI>Batch files, although their usefulness is limited, since MS-DOS has
trouble with the HTML characters '&lt;' and '&gt;'. </UL>

<P>.com files should run correctly under 32-bit Windows. We recommend that
you use 32-bit executable programs, also called 'console programs'. The
Windows 32-bit interface is more robust and controlled than the 16-bit
interface. One example: if a CGI program loops, Xitami will kill it after a
timeout. But: a 16-bit DOS program will not respond to a kill request, and
will eventually bring the system down.

<H3>CGI Programs Under UNIX</H3>

<P>Under UNIX you can run any file that UNIX recognizes as an executable
file. This includes linked files, Perl scripts, shell scripts, etc.

<H3>CGI Programs Under OS/2</H3>

<P>Under OS/2, you can run different types of CGI programs:

<UL>
<LI>32-bit (and 16-bit) command-line based executable ".exe" files. You do
not need to specify the ".exe" file extension in the URL; Xitami for OS/2
will correctly locate an ".exe" CGI program. Starting PM-based executable
files through CGI is not supported.

<LI>REXX (and CMD) scripts. These files must have a ".cmd" extension, but
this does not have to be specified in the URL unless there is an executable
(".exe") of the same name in the directory (see the details of the search
order below). By default the script will be run by running the program
specified in the COMSPEC environment variable, followed by "/c scriptname",
so if your COMSPEC variable is set to "d:\os2\cmd.exe" then it will be run
as:

<PRE>d:\os2\cmd.exe /c scriptname</PRE>

<P>Optionally you can specify a different interpreter for the script by
using either:
<UL>
  <LI>The OS/2 EXTPROC syntax:
      <PRE>EXTPROC full-path-to-interpreter flags</PRE>
      in the first line of the script file (Xitami will accept flags at
      the end of the EXTPROC line by some other programs may not; test
      carefully); or
  <LI>A special REXX comment:
      <PRE>/*! full-path-to-interpreter flags */</PRE>
      in the first line of the script file.  You can use the standard OS/2
      command interpreter (CMD.EXE) as the interpreter for REXX, but if you
      do then you must specify "/c" as one of the flags to ensure
      the command interpreter exits as soon as the CGI script finishes
      running.
</UL>

<P>Remember the REXX scripts are identified by the "/*" comment in their
first line. The full-path-to-interpreter should specify the full filename
(drive (if it is not on the same drive as everything else), path, and
filename) of the interpreter to use.

<LI>Perl programs. The first line of the program must start with the
characters "#!" followed by a space and the full filename for Perl. For
example if your perl interpreter is "c:\tools\perl.exe" you should start
your Perl program like this:
<PRE>#! c:\tools\perl.exe</PRE>
or
<PRE>#! c:\tools\perl</PRE>
You can use '\' or '/' in the path name. The programs are best stored in a
file without an extension, or in a file with a ".cmd" extension; if you use
another extension you will need to specify the whole filename (including the
extension) in the URL. Perl must be installed on your system. Perl 5.004 is
recommended. If your perl script uses special features make sure you are
running the correct perl executable (check the Perl 5.004 for OS/2
documentation) for the features you require.

<LI>Awk scripts, and scripts in other UNIX-type languages that accept
comments starting with '#'. Begin the script with '#! <interpreter name>' as
for Perl.
</UL>

<P>When searching for a CGI program to run, if the program specified has no
extension Xitami for OS/2 first tries adding a ".exe" extension, then if
that fails it tries adding a ".cmd;" extension. If both of those fail, or
the program name already has an extension, the name is tried as is; it will
be considered executable if it has a ".exe" extension, a ".cmd" extension or
the file starts with a "#!" comment line. (REXX scripts and CMD scripts must
be stored in files with a ".cmd" extension because that is all the command
interpter (CMD.EXE) will accept.)

<P>It is not possible to run DOS executables (".exe" or ".com") or DOS batch
files (".bat") under Xitami for OS/2. Nor is it possible to run PM-based
programs as CGI programs.

.build anchor cgidir
<H3>CGI Directories</H3>

<P>You can specify an alternate CGI directory. By default, Xitami will
search a subdirectory called 'cgi-bin'. This is how Xitami translates a URL
into an absolute file path, when looking for the CGI program:

<TABLE BORDER=1 WIDTH=80%>
<TR NOWRAP>
    <TH>'cgi-bin' option:
    <TH>URL:
    <TH>Final pathname:
<TR NOWRAP>
    <TD><EM>Default</EM>
    <TD>/cgi-bin/myprog
    <TD>./cgi-bin/myprog
<TR NOWRAP>
    <TD><EM>Default</EM>
    <TD>/cgi-bin/products/myprog
    <TD>./cgi-bin/products/myprog
<TR NOWRAP>
    <TD><EM>Default</EM>
    <TD>/products/cgi-bin/myprog
    <TD>./webpages/products/cgi-bin/myprog
<TR NOWRAP>
    <TD>/web/cgibin
    <TD>/cgi-bin/myprog
    <TD>/web/cgibin/myprog
<TR NOWRAP>
    <TD>/web/cgibin
    <TD>/cgi-bin/products/myprog
    <TD>/web/cgibin/products/myprog
<TR NOWRAP>
    <TD>/web/cgibin
    <TD>/products/cgi-bin/myprog
    <TD>./webpages/products/cgi-bin/myprog
<TR NOWRAP>
    <TD>.
    <TD>/cgi-bin/myprog
    <TD>./myprog
<TR NOWRAP>
    <TD>.
    <TD>/cgi-bin/products/myprog
    <TD>./products/myprog
<TR NOWRAP>
    <TD>.
    <TD>/products/cgi-bin/myprog
    <TD>./webpages/products/cgi-bin/myprog
</TABLE>

<P>This translation works as follows:
<UL>
<LI>If the URL starts with '/cgi-bin' this text is removed, and
the remainder of the path is attached to the 'cgi-bin' option to
give a full path name.
<LI>If the URL does not start with '/cgi-bin', the complete URL
path is attached to the 'webpages' directory to give a file path.
</UL>
<P>Only one of these translations can be done.  By consequence,
any value you specify for the 'cgi-bin' option is ignored if you
place the '/cgi-bin' directory at some deeper level in the URL.
This is useful if you intend to mix CGI programs with your HTML
files, as complete directories.

<H3>CGI Error Messages</H3>

<P>Xitami tries to explain why a CGI program fails; these are the different
messages you may see for a 500 error, with an explanation for each.

<H4>Insufficient resources to run this CGI program</H4>
<P>There is not enough memory available.  This is a bad sign; it means
that the virtual memory available to Xitami is all full.  Stop the
web server, modify your systems' virtual memory settings, and start it
up again.  This problem is very rare, really, especially since Xitami
is a tiny piece of software.

<H4>CGI arguments are too long - request was refused</H4>
<P>The CGI URL argument (text following a '?' after the URL) was too
long.  Whatever you are trying to do, stop it.  (Actually, since release
1.2a, Xitami allocates such buffers dynamically, so this error will not
occur, and it is now rather difficult to hack Xitami by using buffer
overruns.)

<H4>Cannot create stdin stream for CGI</H4>
<P>Xitami communicates with CGI processes using simple text files; if
the file it wants to use already exists and is unavailable to Xitami, it
will not be able to run the CGI process.  Cure: make sure that you only
run one instance of Xitami from one directory.  Delete any files called
'tmp...'.  Make sure no CGI process is still hanging around, looping but
unkillable (typically under Windows 95 or NT with 16-bit CGIs).

<H4>Cannot create CGI process - program not found</H4>
<P>The CGI program exists (otherwise you get a 402 Not Found), but could
not be started correctly.  The most common cause of this error is a Perl
script which has a misformed magic header line.  Make sure that the Perl
script starts with "#! perlpath" where <EM>perlpath</EM> is the full
path name of the Perl executable, e.g. "C:\Perl\Perl.exe".

<H4>CGI process ended with an error status</H4>
<P>The CGI program ran, but returned an error code.  Most servers ignore
this, but Xitami treats this as an error.  Cure: make sure your CGI
programs end correctly with a 'return (0)' or equivalent.  If you cannot
do this, set the configuration option cgi:exit-ok to 0.

<H4>CGI process was interrupted before ending</H4>
<P>Someone or something interrupted the CGI process before it ended.
This can happen when a CGI process takes too long to run, and the system
administrator decides that enough is enough, and kills it.  Cure: ask
your sysadmin to be nice, or write faster CGIs.

<H4>Internal server error while running CGI</H4>
<P>Something unexpected happened inside Xitami's guts when it tried to
run your CGI.  Aaaagh!  What did you do?!  If this happens, let us know.

<H4>Undetermined error</H4>
<P>Something else happened.  Cure: tell us about it.

.-----------------------------------------------------------------
.page Using SSI and Filters

<H2>$(TITLE)</H2>

<P>Xitami supports filter programs in Perl, C, or any other language that your
system supports. A filter program runs when the HTML page is displayed,
unlike a CGI program, which runs when the user posts data from a HTML form.
Xitami provides a standard SSI filter (PerlSSI) which requires a Perl
interpreter. This is not meant for heavy-duty work, but is a good example of
a filter. (We intend to develop a fast SSI module that will be embedded into
the server directly.) Another example of a filter program is PHP 3.0, which
Xitami supports. 

<P>To add your own filter programs, you add an entry in the [Filter] section
of the config file. A filter program is invoked whenever a file with the
appropriate extension is displayed. 

<P>Filter programs need to respect the rules for CGI programs. That is, they
should generate the same type of header (Content-Type: text/html). Filter
programs also get the standard CGI environment, and are subject to the CGI
timeouts and other constraints set in the [CGI] section. 

<P>When you POST to a filter program, the form data is supplied on the
standard input as for CGI programs. When you use the GET method, the file
that is being filtered is provided on the standard input. 

<H3>The SSI Filter</H3>

<P>SSI (server-side includes) is a fairly standard syntax which you can read
about on the $(*ssi=NCSA) site. We implemented all the common SSI tags in the
PerlSSI filter. To use this, you need Perl on your system (it should be on
the PATH). The PerlSSI filter is slow, and meant as a work-around until we
implement SSI the correct way, in the server itself. The PerlSSI filter is
located in the Xitami directory itself. To run it, you must have Perl
installed. The requirements for this filter are the same as for a Perl CGI
program. 

<P>By default, Xitami recognises any document with extension '.ssi',
'.shtm', or '.shtml' as an SSI document. This is defined in the [Filters]
section of the configuration files. 

<P>The SSI documents are placed in the normal web pages directory, and are
recognised purely by their extension, not the path. 

<P>Xitami supports these SSI tags:

<TABLE>
<TR><TH>Element syntax:         <TH>Effect:</TR>
<TR><TD>#config errmsg="text"
    <TD>Specify the SSI error message.  
<TR><TD>#config sizefmt="format"
    <TD>Specify whether file sizes are shown in full, or abbreviated.
    Use the format 'abbrev' to show abbreviated sizes.  
<TR><TD>#config timefmt="format"
    <TD>Specify the format used for file times. By default this
    is: "%A, %d-%b-%y %H:%M:%S %Z". Note: the current implementation of SSI
    ignores the timefmt, and always uses the default time format.  
<TR><TD>#echo var="variable"
    <TD>Output the value of the specified variable. Xitami recognises these
    variables: DOCUMENT_NAME, DOCUMENT_URI, DATE_GMT, DATE_LOCAL, LAST_MODIFIED,
    and any environment variable (including the standard CGI environment variables).  
<TR><TD>#exec cgi="pathname"
    <TD>Outputs the result of the CGI program, which must be in the CGI binary
    directory (it cannot be on a CGI alias directory). Note that the CGI program
    runs in the main Xitami directory.  
<TR><TD>#exec cmd="command"
    <TD>Executes a native command and includes the output of this command. Note that
    the command runs in the main Xitami directory. This SSI command - which is a
    potential security risk for your system - is only accepted if the environment
    variable SSI_INSECURE is set to 'yes'. (Under Windows NT, in the System Control
    Panel, under 'Environment'; under Windows 95 by adding 'SET SSI_INSECURE=yes'
    to the autoexec.bat.)  
<TR><TD>#include virtual="filename"
    <TD>Includes the contents of the specified URI, which is assumed to be within
    the webpages root. Note that aliases are not supported in the current
    implementation.  
<TR><TD>#include file="filename"
    <TD>Includes the contents of the specified file, which may be anywhere in the
    file system space.  
<TR><TD>#flastmod {virtual|file}="filename"
    <TD>Outputs the time that the specified file was last modified. The file can be
    a URI within the webpages root, or an absolute filename, depending on whether
    'virtual' or 'file' is specified.  
<TR><TD>#fsize {virtual|file}="filename"
    <TD>Outputs the size of the specified URL or file, using the sizefmt.  
</TABLE>

<P>With a small knowledge of Perl, you can easily modify the Perlssi filter
to add support for other tags. 


.-----------------------------------------------------------------
.page Image Maps

<H2>$(TITLE)</H2>

<P>Xitami supports NCSA-type clickable image maps.  When an image
has the ISMAP attribute, Xitami will search for and use an image
map file if the browser cooperates.  An image map file has the name
of the image, the extension .map, and this syntax:
<UL>
<LI>Lines starting with # are ignored.
<LI>Blank lines are ignored.
<LI>Data lines consist of an element type, a URL, and optionally a
list of coordinates, separated by spaces.
</UL>
<P>The URL can be any Internet URL, either an absolute image map,
or a relative image map.  Xitami will recognise and handle these
types of URLs:
<UL>
<LI>A filename with no path.  Xitami prefixes the path of the
image map file.
<LI>A filename with a path.  Xitami prefixes "http://", the name
of the server host, and the port number if that is not 80.
<LI>An absolute URL, starting with http: or another scheme
such as mailto:, ftp:, etc.
</UL>
<P>You can use these elements types in the image map:
<TABLE>
<TR NOWRAP>
<TH>Element syntax:
<TH>Effect:
<TR NOWRAP>
<TD><TT>default</TT> <EM>url</EM>
<TD>Defines the default URL for the image.
<TR NOWRAP>
<TD><TT>rect</TT> <EM>url</EM> <EM>x1,y1</EM>
<EM>x2,y2</EM>
<TD>Defines a rectangle between the two corner points
specified.  Assumes x2 >= x1, y2 >= y1.
<TR NOWRAP>
<TD><TT>circle</TT> <EM>url</EM> <EM>x1,y1</EM>
<EM>x2,y2</EM>
<TD>Defines a circle where (x1,y1) is the circle's
center, and (x2,y2) is any point on its circumference.
<TR NOWRAP>
<TD><TT>point</TT> <EM>url</EM> <EM>x,y</EM>
<TD>Defines a point.  Accepts a click within about 3
pixels of the point.
<TR NOWRAP>
<TD><TT>poly</TT> <EM>url</EM> <EM>x,y</EM>...
<TD>Defines a polygon, where (x1,y1)..(xn,yn) defines
the perimeter of the polygon.  You can specify up to 100
points.
</TABLE>

<P>There are many freely-available tools to help you create
image maps.  Xitami is compatible with these tools, so long as
you create the image map in NSCA format.

.-----------------------------------------------------------------
.page Virtual Hosts
.build anchor vhosts

<H2>$(TITLE)</H2>

<H3>Setting-up A Virtual Host</H3>

<P><EM>Virtual hosts</EM> means running multiple virtual web sites on
one system.  This is commonly used by web site providers, but can be
useful in all kinds of organisations.  There are two ways to configure
your IP system to permit virtual hosting:
<OL>
<LI>You can assign multiple IP addresses to a system, a technique that
is called 'multihoming'.  An IP address refers to a connection point
(e.g. a network card) to a system, rather than the system itself, so
it's quite normal to have multiple IP addresses.  Many network cards can
support multiple addresses (4 or 8), and most systems can take multiple
network cards.  There are probably routers and gateways that make it
possible to have thousands of IP addresses on one system.
<LI>You can assign the same IP address to lots of host names, using DNS
or something similar.  Thus, 'www1.some.domain' and 'www2.some.domain'
can refer to the same address. This is often called a 'virtual host'
because the host does not exist as a separate computer, just as a name.
</OL>

<P>Xitami can work with both these mechanisms for HTTP and FTP connections.
It handles multiple IP addresses automatically: if you ask it to run on
port 80, it will accept connections on any IP address, on port 80. You do
not need to configure this (although you can restrict it to run on one
specific address). This means that you do not need to specify on which IP
address Xitami should accept connections - if a system has ten IP
addresses, Xitami will accept connections on all ten.

<P>A multihomed virtual host is identified by its IP address. A DNS-based
virtual host is identified by its name:

<PRE>[Virtual-Hosts]
    xxx.xxx.xxx.xxx=filename.cfg   #  A multihomed host
    www.some.domain=filename.cfg   #  A DNS-based virtual host
</PRE>

<P>DNS-based virtual hosting requires a DNS server or something similar. The
mechanisms for setting-up both multiple IP addresses and multiple domain
names are system-specific; you should have access to technical documentation
for your TCP/IP configuration or good technical support. DNS-based virtual
hosting uses a HTTP/1.1 feature called the 'Host:' header, and an FTP feature
whereby the user name is specified as 'user@<I>hostname</I>'.  Most modern
browsers support this; if you are building an intranet it is quite easy to
be sure that all browsers will work correctly with DNS-based virtual
hosting. On the Internet you can catch browsers that do not send a valid
Host: header, and show some specific pages.

<P>The SSL protocol used in Xitami/Pro cannot work with DNS-based
virtual hosts, so to use SSL virtual hosts you must have a unique IP address
for each host.

<P>When you set-up a virtual host, you will generally want to use a specific
directory for the web pages, CGI scripts, password file, and log files. (You
can also share these in any way you need to.) You can also configure options
such as the HTTP error messages, timeouts, security, and so on.

<P>To define these, you specify a configuration file per virtual host. The
virtual host configuration inherits all definitions from defaults.cfg (and
xitami.cfg). You need only define those options that are specific to the
virtual host. If the HTTP request refers to a host name or IP address that
has not been configured as a virtual host, the request is handled by the
<EM>base host</EM>. To configure the base host, create a file called
'basehost.cfg'. You can change this name in the defaults.cfg file
server:base-host option.

<P>This is a typical configuration for a site with several virtual hosts:
<PRE>[Server]
    webpages=websites/hostx/webpages
    cgi-bin=websites/hostx/cgi-bin
</PRE>

<P>Some of the options in the [Server] apply to the entire server globally,
and are not taken from the virtual host configuration file: background,
customise, debug, limit, portbase, and refresh.

<P>When you define a multihomed virtual host, you must specify a
server:hostname value. This should be a host name that translates back into
the correct IP address. The server:hostname option is used whenever Xitami
has to return a 'redirected' URL; for image maps, incomplete URL, and
directory listings. If you do not define server:hostname, or define it
wrongly, these functions may not work.

<P>When you define a DNS-based virtual host, Xitami takes the name as a
default value for the server:hostname option. This usually works correctly,
but you can override it if necessary by adding the server:hostname option
explicitly. To avoid confusion, make sure your DNS server is correctly
configured. You normally use 'ping' to test that this works.

<P>The virtual host configuration files, must exist when the server
starts-up. You can modify the virtual host configurations on-the-fly, as for
the normal configuration files, but if you want to add or remove a virtual
host you must stop and restart the server (for instance using the WBA
control panel.)

<H3>Debugging Virtual Hosts</H3>

<P>Since virtual hosting means playing with a lot of config files,
this can quickly become confusing if you don't take some basic care
and precautions.  We advise you to:
<UL>
<LI>Keep the extension .cfg for all config files.  This lets you
distinguish the config files from other files.
<LI>Use filenames that match the host name.
<LI>Use a directory structure that matches the host names.
<LI>Only specify those options that are not the defaults.  This
allows you to focus on the specific virtual-host options that
you've defined.
</UL>

<P>If you have 'not found' errors that you can't explain, set the
server:debug option to 1 and recreate the error. Then, the log files
'debug.log' contains detailled information about the URL translation. You
can look at this file, or in serious cases, send it to us and we'll try to
help.

.-----------------------------------------------------------------
.page The FTP Service

<H2>$(TITLE)</H2>

<H3>Overview</H3>

<P>Xitami supports the FTP (file transfer) protocol. The FTP service was
designed to be simple and easy to administer, while providing the security
and speed necessary for a web site. You can administer the FTP service from
the WBA screens, in the same way as you administer the rest of Xitami.

<P>The current implementation of FTP does not support virtual hosts, so the
FTP configuration applies to all virtual hosts defined for a web site.

<P>The FTP service recognises these commands, and handles those not marked
by '*':
<PRE>
 USER    PASV    STOU*   MAIL*   ALLO*   CWD     PWD     XMKD
 PASS    TYPE    SYST    MSND*   REST    CDUP    RMD     XRMD
 ACCT*   STRU    XSYS*   MSOM*   RNFR    XCWD    SITE*   XPWD
 REIN    MODE    PASV    MSAM*   RNTO    LIST    STAT*   XCUP*
 QUIT    RETR    APPE    MRSQ*   ABOR    MKD     HELP    XEXC*
 PORT    STOR    MLFL*   MRCP*   DELE    NLST    NOOP    SIZE
</PRE>

<H3>FTP Configuration Options</H3>

<P>The configuration of the FTP service is handled by specific
sections in the standard configuration file.

<H4>The [FTP] Section</H4>

<P>This section controls the FTP service.
<DL>
.item enabled
<DD>Specifies whether the FTP service is enabled or not. If you change this
option you must stop and restart the server for it to take effect. (The WBA
control panel 'Restart' action will not start the FTP service.)
<DD>Default: 1 (enabled).

.item root
<DD>Specifies the root directory for FTP logins, unless a specific
directory is defined for the current user.
<DD>Default: ftproot (below main Xitami directory).

.item port
<DD>Specifies the FTP connection port.  The port is shifted by the
portbase specified for the main HTTP service.  For instance if you
specify a port 21, and a portbase of 8000, your server will accept
FTP connections on port 8021 and HTTP connections on port 8080.
<DD>Default: 21 (the standard FTP port).

.item timeout
<DD>Specifies the time in seconds after which inactive control connections
are closed. An FTP session requires one control connection, plus one data
connection during file transfers. You should tune this timeout to suit the
requirements of your system. For instance, under an OS like Windows 95,
sockets are a limited resource, so a shorter timeout is a good idea. For
sites with a small user group, you can use high timeouts, which users
generally prefer.
<DD>Default: 300 (5 minutes)

.item limit
<DD>Specifies the maximum number of users that may login at once. On systems
that can handle lots of open sockets (e.g. Unix, OS/2, WinNT, Win98), you
may want to increase this. Xitami does not impose any fixed limit. If you
set this value to 0, it means 'no limit'.
<DD>Default: 25 users.
</DL>

.item user-file
<DD>Specifies the name of the user definition file. The syntax for this is
described below.
<DD>Default: ftpusers.aut.

.item directory-file
<DD>Specifies the name of the directory definition file.  The syntax for
this is described below.
<DD>Default: ftpdirs.aut.

.item dirsort
<DD>Specifies the sort order for directory listings.  You can sort by
file name, extension, size, or modification date/time using any combination
of the letters 'n', 'x', 's', and 't'.  For instance, dirsort=xnt will sort
by extension, then name, then time.  To sort in reverse order, use capital
letters.  For instance to show the most recent files first, use dirsort=T.
<DD>Default: n (sort by name).

.item welcome
<DD>Specifies a text to be shown when a user connects to the FTP server.
This can be literal text, or the name of a file, preceded by '@'. The file
can contain up to 2000 characters. Any lines that start with '#' are ignored
as comments. If you modify this file, it is safest to make a copy (call it
welcome.txt or something) and change this option to refer to the changed
file. This avoids unpleasant surprises when you reinstall the next latest
greatest version of Xitami.
<DD>Default: @ftphello.txt (an example file).

.item user-at-host
<DD>This flag controls whether Xitami allows virtual hosts using the syntax
'username@hostname'.  This syntax is supported by some FTP clients, and
allows you to use multiple FTP virtual hosts on a single IP address.
<DD>Default: 1 (enabled).

.item signoff
<DD>Specifies a text to be shown when a user ends the FTP session. This can
be literal text, or the name of a file, preceded by '@'. The file can
contain up to 2000 characters. Any lines that start with '#' are ignored as
comments. If you modify this file, it is safest to make a copy (call it
goodbye.txt or something) and change this option to refer to the changed
file. This avoids unpleasant surprises when you reinstall the next latest
greatest version of Xitami.
<DD>Default: @ftpadios.txt (an example file).

.item login-text
<DD>Specifies a text to be shown when a user logs-in to the FTP server.
This can be literal text, or the name of a file, preceded by '@'.  The
file can contain up to 2000 characters.  Any lines that start with '#'
are ignored as comments.  If you modify this file, it is safest to make
a copy (call it login.txt or something) and change this option to
refer to the changed file.  Xitami will search for this file first in
the user's login directory, then in the main Xitami directory.
<DD>Default: @ftplogin.txt (an example file).

.item email-check
<DD>If 1, the FTP server will check that the e-mail address supplied
for anonymous logins is a valid address.  The nature of the check is
not documented (it may just look for an '@' in the address).
<DD>Default: 0 (do not check addresses).

.item http-aliases
<DD>Specifies whether the HTTP [Alias] section should be used by the
FTP service.  This can be useful in configurations where you want to
share the same data between services, but it can be a security risk
if you want to use FTP aliases to access directories outside the HTTP
space.
<DD>Default: 0 (disabled).

.item soft-quota
<DD>Specifies the default soft quota for FTP users who are subject to a
quota.  You can also specify quota values for individual users.  This
value is specified in megabytes, as a decimal number (using a decimal
point, not comma, even in Europe).  When a user exceeds their soft quota,
they start getting warning messages.
<DD>2.5

.item hard-quota
<DD>Specifies the default hard quota for FTP users who are subject to a
quota.  You can also specify quota values for individual users.  This
value is specified in megabytes, as a decimal number.  When a user exceeds
their hard quota, they cannot upload new files.
<DD>2.5

.item webmask
<DD>Specifies the set of clients that can connect to the FTP server.
Works in the same way as the HTTP $(*webmasks=webmask_option).

.item password-case
<DD>If 1, FTP passwords are case-sensitive.  If 0, passwords are always
converted to lower-case before validation. If you set this to 0, be sure to
use only lower-case passwords in the password file.
<DD>Default: 1 (case-sensitive)

.item data-port
<DD>Specifies the port at which data connections will be made.  Xitami
scans for free ports, so this is simply the start of a range of ports.
The port is shifted by whatever value was used for the server portbase.
<DD>Default: 200.

.item force-ip
<DD>Indicates whether passive connections must be forced to the IP
address specified in the 'ipaddress' option.
<DD>Default: 0 (do not force).

.item ipaddress
<DD>The IP address used for passive connections.  If '*', accepts passive
connections on all local available IP addresses.
<DD>Default: '*'.
</DL>

<H4>The [FTPLog] Section</H4>

<P>This section controls the FTP access log.
<DL>
.item enabled
<DD>Specifies whether FTP accesses are logged or not.  FTP accesses are
logged in a format similar to that used for HTTP accesses.
<DD>Default: 1 (accesses are logged).

.item filename
<DD>Specifies the filename for access logging.  This may be the same as
the main HTTP access log file.
<DD>Default: access.log.

.item
<DD>Specifies the cycle mode for the log file.
<DD>Can be one of:
<UL>
<LI>startup, or 0 - cycle log when the server is starts;
<LI>hourly, or 1 - cycle log each hour;
<LI>daily, or 2 - cycle log each day;
<LI>weekly, or 3 - cycle log each week;
<LI>monthly, or 4 - cycle log each month, or
<LI>manual, or 5 - manual cycling only.
</UL>
<DD>Default: daily.

.item local
<DD>Specifies whether to include local addresses or not.
<DD>Default: 1 (include local addresses).
</DL>

<H3>The [FTP-Alias] Section</H3>

<P>This section lets you define multiple FTP file roots.  Each alias
alias specifies a name and a path.  For example:
<PRE>[FTP-Alias]
volume-c=C:\
</PRE>
<P>The alias name itself may not contain '/'. It is not case sensitive. FTP
aliases are only shown to 'root' users, i.e. those with an empty root value,
or those who have the 'aliases=1' option defined (see below). Like HTTP
aliases, the FTP alias is always the first component of a filename (e.g.
/volume-c/somefile).  Aliases are shown only if the user has no GET access,
and if the specified user's root directory actually exists.

<H4>The [FTPErrLog] Section</H4>

<P>This section controls the FTP error log.
<DL>
.item enabled
<DD>Specifies whether FTP errors are logged or not.  FTP errors are
logged in a format similar to that used for HTTP errors.
<DD>Default: 1 (errors are logged).

.item filename
<DD>Specifies the filename for error logging. This may be the same as
the main HTTP error log file.
<DD>Default: error.log.

.item
<DD>Specifies the cycle mode for the log file.
<DD>Can be one of:
<UL>
<LI>startup, or 0 - cycle log when the server is starts;
<LI>hourly, or 1 - cycle log each hour;
<LI>daily, or 2 - cycle log each day;
<LI>weekly, or 3 - cycle log each week;
<LI>monthly, or 4 - cycle log each month, or
<LI>manual, or 5 - manual cycling only.
</UL>
<DD>Default: daily.

.item local
<DD>Specifies whether to include local addresses or not.
<DD>Default: 1 (include local addresses).
</DL>

<H3>FTP User File Syntax</H3>

<P>The FTP user file defines all users that may log-in to the FTP
server.  This is a typical user file:

<PRE>
[Admin]
    Access=*
    Password=-
    Root=""
    Aliases=1           #   Will have access to aliases
[Anonymous]
    Access=G
    Password=*
    Root=pub
[Guest]
    Access=G
    Root=c:\public\guest
[Upload]
    Access=P
    Password=upload
    Root=/tempfiles/upload
    Use-quotas=1
    Soft-quota=10
    Hard-quota=12
</PRE>

<P>The user name is specified like this: [Admin].  User names are
not case-sensitive.  The password may be any text.  The password
may be one of these special values:
<UL>
<LI>"*" - accepts anonymous logins.  If ftp:check-email is set to
1, will check that the password looks like a valid e-mail address.
<LI>"-" - rejects all logins for this user.  You can use this to
disable an account temporarily.  This is the default password for
accounts where no password is defined.
<LI>"" (blank) - does not ask for a password.  Use this only for
low-security (guest) accounts.
</UL>

<P>The access rights are any combination of:
<UL>
<LI>'G' - The user can list directories and get files from the server
<LI>'P' - The user can upload (put) files to the server.
<LI>'U' - The user can upload files to the server, but not overwrite
existing files.
<LI>'D' - The user can delete files on the server, and can rename files.
<LI>'M' - The user can create directories
<LI>'R' - The user can remove directories
<LI>'*' - The user can do everything (same as GPUDMR).
<LI>'-' - The user can do nothing; this can be used to disable access to a
specific alias, for instance.
</UL>

<P>The 'root' option defines where the user can work. If this is not
specified, the user can work anywhere below the FTP root directory. You can
also specify a full path, for instance:
<PRE>root=/home/users/guest
</PRE>

<P>The 'aliases' option defines whether or not a user has access to the
FTP aliases.  By default this is true for all 'root' users, i.e. those
with an empty root value.  You can override this default by specifying
an explicit value for the aliases option.

<P>Note that put-only directories should be treated as special cases, and
used only as a user's root directory.  You cannot 'chdir' to a put-only
directory.

<P>You can enable/disable quotas per user. We defined a 'soft quota' and a
'hard quota'.  Above the soft quota, the user gets warning messages. Above
the hard limit, uploads are refused, and warnings are sent to the web
server console.  The quota is calculated quite simply: it is the limit for
all files in the user's login directory and subdirectories. You can
therefore share a quota between users, or allocate a quota to individual
users. The site administrator can decide whether log files are part of the
quota or not, by putting them into the user's space, or into separate
(non-quota) directories.  For quotas to work, keep a user limited to the
login subtree.  I.e. do not allow writeable aliases.  Quotas are managed by
the three configuration keys: use-quota, soft-quota, and hard-quota.

<H3>FTP Directory File Syntax</H3>

<P>The FTP directory file defines access rights per user for specific
directories. Each section is a directory name; either an absolute directory
(e.g. [/pub]) or a child of the ftproot directory (specified without a
leading slash: [pub]).  To define rights for an alias directory, you must
use the child's root directory plus the alias directory.  For instance if
you define an aliase like 'info' which maps to a CD-ROM drive, protection
for a user 'guest' who's initial root directory is 'guest' looks like this:
<PRE>[guest/info]
</PRE>

<P>For instance, if the guest user has access to aliases, but you want to
disable access to the 'info' alias, you could use an entry like this:
<PRE>[guest/info]
guest=-
</PRE>

<P>A directory entry covers all child directories, unless a more
specific directory is defined for that user.  Directory names are not
case significant.

<P>Each entry specifies access rights for a user; the user must have
been defined in the FTP users file.  The same access right codes are
used.

<H3>An Example FTP Configuration</H3>

<P>This material for this section was provided by Paul C. Fretz,
&lt;pcfretz@mha.shalom.k12.pa.us&gt;.

<P>Install Xitami in its own directory.  Have your web pages in a
separate directory such as c:\webpages

<P>Setup 'defaults.cfg' to include:
<PRE>[Server]
    Webpages=c:\webpages
[Ftp]
    Root=c:\webpages
    welcome="Welcome"                   #   text or @filename
    login-text="Login"                  #   text or @filename
    user-file=ftpulist.aut              #   Users authorization file
[Security]
    password-case=1                     #   Case-sensitive passwords
    filename=password.aut               #   Authorization file
<PRE>

<P>Setup 'ftpulist.aut' to include:
<PRE>[Anonymous]
    Access=G
    Password=*
    Root=AnonFTP
[WEBRoot]
    Access=G
    Password=123456
    Root=""
[U101]
   Access=GPDMR
   Password=123101
   Root=User/U101
[U102]
   Access=GPDMR
   Password=123102
   Root=User/U102
</PRE>

<P>There are several things to keep in mind:
<OL>
<LI>The directory structure for the above is as follows:
<PRE>c:\webpages
       |-AnonFTP
       |-User
          |-U101
          |-U102
          |-...
</PRE>
<LI>For FTP access to c:\webpages\User\U101 the userid is U101 and the
password is 123101.
<LI>The WEBRoot entry gives FTP 'get' access to your whole website.
</OL>

<P>Setup 'password.aut' as follows if you want to password protect the same
subdirectories for browsing:
<PRE>
[/admin]
    Admin=-             #   By default, admin access is disabled
    Webmask=local       #   <== when 'local', remote access is not allowed
[User/U101]
   U101=123101
[User/U102]
   U102=123102
</PRE>

<OL>
<LI>'Admin=-' disables web-based administration. Change this if you wish.
<LI>When you try to access with your browser anything located in
c:\webpages\User\U101 (by using http://yourdomain/User/U101/) the browser
will ask for user name and password. The username is U101 and the password
is 123101. The first line [User/U101] refers to the subdirectory. The second
line U101=123101 is the user name and password and does not have to be
anything like the first line.
<LI>A scheme like this allows users to have their own private subdirectory
on the web server. They can access just theirs by FTP using Netscape or a
program like WS-FTP. These pages are then available for anyone to browse
or if you protect them as shown above in 'password.aut', they are private.
<LI>Note that the default Xitami configuration requires that CGIs start with
the string '/cgi-bin'.  The above configuration does not allow users to
upload and run arbitrary CGIs, something that usually presents a security
risk.
</OL>

.-----------------------------------------------------------------
.page A Beginner's Guide
.build anchor beginners

<H2>$(TITLE)</H2>

<H3>Setting-up a Web Site</H3>

<H4>General Remarks</H4>

<P>Xitami does the same work as any other web server (only faster and more
reliably), so this section covers general information that you can probably
find on the Net, in a hundred books, and in documentation for other web
servers.  Since you chose to look here, we'll feel free to mix our opinions
with our advice.

<P>You must of course have a good idea of 'Why?' before you start building a
web site.  Who is going to access it, how often, and to get what information?
A web site is basically an exercise in publishing.  So be prepared to spend a
lot of time writing and editing material.  Web sites that look like video
games may be fun to build, but are usually painfully slow to work with, and
don't necessarily add any value to the information you're presenting.

<P>There are many tools that help with the process of building and managing
the many HTML files you will need.  However, there is no substitute for a
good knowledge of HTML (which is a <EM>simple</EM> language) and for some
skill in managing complexity.  The shareware HTMLib library is an excellent
reference for the HTML language. (Htmlib is written by Stephen le Hunte: to
find it, search $(*altavista) or any of the other big search engines.)

<P>You may find that a tool like MS FrontPage is ideal for managing this
problem.  You may alternatively prefer a more mechanical solution, such as
the $(*htmlpp) preprocessor that we use for our web site.   Of course, we
recommend htmlpp.  It's simply more open and flexible than any do-it-all
environment like FrontPage.  Whatever choice you make, these are some of the
issues you will have to manage when you start producing dozens, then hundreds
of HTML files:

<UL>
<LI>Organising the files into directories.  Don't go overboard; too many
directories quickly becomes an exercise in futile complexity.
<LI>Keeping a consistent look and feel.  For instance, you may want a
standard header and footer for most files on the site.
<LI>Maintaining links between files.  Nothing makes a worse impact than '404
Not found' messages when people try to navigate a site (except perhaps 'Host
not responding').
<LI>Maintaining links to external sites.  You can use tools to check the
site, and you can use mechanisms to reduce the cost of maintaining such links
(htmlpp does this well).
<LI>Updating the site and managing versions.  You'd be foolish to edit the
files in place, since any mistakes would show-up right away on the site.  A
good approach is to make a full test site (a 'mirror'), with a separate web
server, where you install and test the pages.  Then, you can copy the entire
site across, or individual pages using the date/time settings on each file.
<LI>We like to make HTML sites that can be accessed <EM>without a web
server</EM>.  This can be very useful, with the exception of image maps and
CGI, which need a server to work.  Do not use full URLs ('http://site/file')
when referring to other documents in the site; rather, use <EM>relative
URLs</EM>, which are filenames relative to the actual page.  For instance,
if a document in '/html/tools' needs to reference an image file in
'/html/images/cover.jpg', it can use an URL like this: '../images/cover.jpg'.
If you use full URLs, you'll need a server to access the files.
</UL>

<H4>Top Ten Things To Do</H4>

<OL>
<LI>Learn HTML - use a reference like HTMLib to keep up to date. (Htmlib
is written by Stephen le Hunte: to find it, search $(*altavista) or any of
the other big search engines.)
<LI>Write HTML that works with all browsers, including text-only browsers.
<LI>Learn the basic rule of publishing: <EM>keep it clean</EM>.
<LI>Keep your web pages simple so that they load quickly.
<LI>Your home page should fit on one screen.
<LI>Use an HTML validator tool to check your pages.
<LI>Use a good tool to manage the web site files.
<LI>Keep a test site, and test well before you publish.
<LI>Use the Xitami alias functions to access other resources such as
HTML-driven CD-ROMs.
<LI>Use the Xitami errors.log file to detect and fix link errors.
</OL>

<H4>Things To Avoid Like The Plague</H4>

<OL>
<LI>Blinking text.
<LI>The bells and whistles offered by proprietary extensions - these are
designed to lock you and your clients into vendor-specific solutions.
<LI>Lots of images, unless you are building an intranet site.  Images
can be very useful, but cost a lot in terms of preparation, maintenance,
disk space, and network transport.
<LI>Java, JavaScript, ActiveX, PerlScript... unless you are very aware
of the costs and benefits involved.  All programming is expensive, and
executable content is particularly costly. not least because it relies
on untested, rapidly changing technologies.  Like images, executable
content is most often used for flash, not to solve specific problems.
JavaScript, in small quantities, is probably the safest route to go for
small adornments, since most browsers can handle it these days.
<LI>CGI, unless you really need it and are aware of the costs and
benefits involved.  Badly-written CGIs will slow-down your entire site.
Good CGIs can provide a very useful level of interactivity, but you must
know what you are doing.
<LI>Cookies, unless you really know what you're doing.  Sites that use
cookies can be viewed negatively by users.  If you use cookies, make sure
they are set to expire correctly, and do not send a new cookie with each
page.
<LI>All web servers except Xitami - why make your web site run slower? :-)
</OL>

<H3>Installing Xitami</H3>

<P>Xitami is quite simple to set-up -- basically it runs with no
configuration at all -- but your TCP/IP set-up must work first.  You can
start by making a stand-alone site (a browser talking to Xitami on the
same machine), then connect your system to a network and let other
people access your pages.  This is a checklist of things to do:
<UL>
<LI>You need a network adaptor; under Win95, this can be the dial-up
adaptor, rather than a physical card.
<LI>TCP/IP must be installed and ready to use.  You need to be able to
do a 'ping 127.0.0.1' from the DOS command-line.  If this does not work,
you need to correct the network configuration. This can be complex - get
help if necessary.
<LI>Install Xitami and start a browser, then try address
'http://127.0.0.1'. It must show the Xitami home page correctly.
<LI>Try the various links and clickable images.  Only one won't work,
since it links to http://www.imatix.com/.
<LI>To connect your computer to a network, you need to give it a fixed
IP address and a domain name.  This is a job for a network
administrator.  On a dial-up PPP connection you get a temporary IP
address which can be used (eg. http://193.23.54.12/) but it changes each
time you connect.  Some providers will give you a fixed IP address,
sometimes at extra cost.
</UL>

<H3>Getting Yourself Connected</H3>

<P>This section describes how to make your web site available to other
people.  The problems involved in connecting on an internal network are
a little different from connecting to the Internet itself.

<H4>How Do Domain Names Work?</H4>

<P>So long as you have TCP/IP installed and running you can use
127.0.0.1 and 'localhost' (which both mean the same normally)
and which TCP/IP interprets as the 'loopback address', i.e. the
current machine.

<P>When you want to talk to other computers you need to know their IP
address.  Correspondingly your system also needs an IP address.  And
your address has to be unique, network-wide.  When the network is the
Internet, this means world-wide.  There are two ways to get such a
unique address.  One, you ask/pay someone for a fixed address.  Two,
you work with an ISP that owns a pool of addresses.  This is
typically how dial-up PPP connections work: the ISP will lend you an
address for the duration of the connection.

<P>Now, if you dial-up on a PPP line, and you do 'ping xxxx' where
'xxxx' is the name of your system, ping will tell you your current IP
address.  Other people can, then, connect to that address and access
your web pages.  This works.  But they have to type the literal
address: 'xxx.xxx.xxx.xxx'.

<P>TCP/IP uses a system called DNS to translate a name like 'imatix.com'
into an address.  DNS uses a network of servers that are able to
translate names into addresses.  So when you use Netscape to access
imatix.com, your local TCP/IP interface asks its local DNS server to
translate the name.  This goes off, and after several hops comes back
with the address, and then you can connect.

<P>The system name must of course be unique, within the network, or
world-wide on the Internet.  Again, you can get unique names in
several ways.  You can extend an existing domain name
(research.imatix.com) or invent a new domain name (some-thing.com).
Domain names must be registered with the Internic.  This costs $70
for 2 years and $35 per year after that.  You can do this directly or
via your ISP.  It's quite a fast process; the only problem is finding
a good domain name that's not already used.

<P>In general, you'll find that a dial-up PPP connection is not much use
for a web server, since your IP address changes each time you dial-in to
your ISP.  (Ignoring the fact that local phone calls still cost quite a
lot in many parts of the world.)  There are some interesting sites that
help get around this problem by acting as DNS/proxy servers for such
connections.  If you want to do this kind of thing, you'll have to
investigate yourself -- we're getting too deep for a beginner's guide.

<H4>On An Intranet (LAN)</H4>

<P>See your network administrator to get an IP address.  Then,
configure your TCP/IP software so that your computer is reachable from
others on the network.  Generally you'll already have got TCP/IP working
even to run Xitami on a stand-alone system.  What changes with respect
to an intranet is that you need an IP address, and it can't be the same
as any other IP address on the network.

<P>When TCP/IP is working correctly (even before you start Xitami) you
can use the 'ping' command from other machines to check that your
machine is addressable.  Type ping like this:

<PRE>ping <I>xxx.xxx.xxx.xxx</I></PRE>

<P>Where 'xxx.xxx.xxx.xxx' is the IP address of your machine.  If this
works, then you can start Xitami and access it from a browser using the
URL <TT>http://<I>xxx.xxx.xxx.xxx</I>/</TT>.

<P>The next step is to get your system known by the DNS (domain name
system).  An intranet usually has one or two domain name servers,
although it's not mandatory.  If DNS is working, you can configure your
TCP/IP to talk to the DNS server - then other PCs will be able to refer
to your system by name, not IP address.

<P>If you do not have a DNS server, you can generally use the 'hosts'
file (in Windows this sites in C:\Windows) to translate IP addresses
into names and vice versa.  Each computer that want to access your web
site needs to put a line in its hosts file.  This is a bit tedious,
which is why DNS exists.

<H4>On The Big Wide World Wide Web</H4>

<P>Getting your site onto the web involves cooperation from a commercial
provider of some sorts.  You can get help from:
<UL>
<LI>Your ISP, who can provide a fixed line or a permanent IP address for
dial-up connections, or space and a connection for your own server PC.
<LI>A virtual host provider, who can provide a complete web site
(although then you are normally not using your own machine).
<LI>A telecoms operator who can provide you with a high-speed link to
one of the Internet backbones.
</UL>

<P>A good solution for a small web site is to pay for a fixed line. There
are various technologies; ISDN, ASDL, POTS (plain old telephone something)
... Check-out the capacity of the line and shop-around for the best deal.
This gives you the most flexibility and control of your system, but may be
limited when handling large volumes. The most interesting type of connection
may be the kind offered by TV cable companies: in some cities this is a very
cheap way to get high-speed IP connections. However, check the rate at which
you can send data out from your server - this is sometimes quite low.

<P>The actual steps involved in setting-up an Internet host are (and
feel free to correct me on this; this is coming from long-unused memory
cells):
<OL>
<LI>Invent a domain name that no-one already uses.  You can telnet to
internic.net (I think) and query their database to see whether your name
of choice has already been used.  You can also use the 'whois' command
to see whether the name is used.
<LI>You have to submit a domain name registration request to the Internic.
<LI>At the same time you have to be able to refer to two DNS servers who
can handle the domain name translation.
<LI>Once the name is registered and the new IP address is given to the
two DNS servers, it gets distributed through the Internet, and after a
few days anyone can access your system either using its IP address or
the domain name.
<LI>It's only really worthwhile doing if you need to aquire a domain
name for business reasons, or you have a permanent connection to the
Net.
</OL>

<P>This is a lot of fuss for normal people, and an ISP can usually do the
whole job for you, though they will charge something extra.

<H4>On a private dial-up network</H4>

<P>You can also become your own ISP by setting-up a pool of modems, and
arranging for dial-up accounts into an internal intranet. This can be very
effective for networks with a specific set of clients - for instance,
salesmen who travel a lot. It can also work in regions where real Internet
connections are expensive or not available. If you want to do this you
should find someone who knows about such things.

<H3>Using Virtual Hosts</H3>

<P>Virtual Hosts are a useful way to manage independent and separate web
sites on a single system, with one copy of Xitami running on the main HTTP
port 80. The user sees separate web sites - you need only manage one server.
This is of most use when you want to host several sites but only manage a
single web server. You can also run one copy of Xitami per site. Since
Xitami is small and does not use much memory both approaches are practical.

<P>The $(*vhosts=virtual_hosts_section) gives a detailed explanation of what
virtual hosts are and how to set them up. We'll cover some more introductory
topics here.

<P>When you define virtual hosts, each virtual host can have its own
webpages directory, CGI directory, log files, error messages, password file,
timeouts, etc. In fact, almost all Xitami options except those that affect
the whole server (such as the port) can be specific to the virtual host.

<P>To define a virtual host you define a specific config file - this
contains all the options that are specific to that virtual host; other
options are then inherited from the xitami.cfg and defaults.cfg files.

<P>To create virtual hosts, you must be able to define new entries in the
domain name system (DNS) or be able to define multiple IP addresses on your
system. Neither of these are jobs for beginners, so if you've not done it
before, get competent advice.

<H3>Managing Your Web Site</H3>

<H4>Updating The Site</H4>

<P>It's a good idea to work with a 'test site'. This is simply a directory
on your PC where you install and test the HTML files, images, CGI scripts,
and other resources before you install them on your public web site. For
instance, the iMatix site is built on its own disk partition, where each
directory matches that on our web site.

<P>We do not generally work directly on the files in the test site. Rather,
we build a package of HTML files, images, whatever, then install them into
the test site. This lets different people manage different sections of the
site. It's also a natural way to work when one uses tools like htmlpp.

<P>There are basically two ways to update a web site: the 'dribble' and the
'stomp'. Dribbling means updating it in small pieces; a few files here and
there. This is typically how people work when they don't use a test site.
Stomping means shoving several tons of stuff onto the site at once, so that
everything is updated together. Dribble works for spot updates, bug fixes,
and such. But it is not a good way to work in the long term: stomping is
safer and not much slower.

<P>We stomp our site using a couple of Perl scripts that find all files
changed since the last stomp; these files are compressed into a zip file,
which is sent by file transfer to the web site. There we decompress it. It's
a lot faster to do this than to transfer the individual files one by one
(firstly, zip files are compressed by about 75% unless you are already
handling compressed data, and secondly, it takes a second or two to
negotiate a file transfer, which is slow when you transfer dozens of small
files).

<P>There are of course many free and shareware tools (such as Netload)
available to do this kind of thing, but none that we know of will use a
zip-style compression to save upload time.

<H4>Counting Hits</H4>

<P>Xitami produces standard NCSA-style log files that can be read and
analysed by most log file analysers. People often misuse the term 'hits' to
imply that one hit is one person visting the site. This is not true. For
instance, the iMatix web site has 250,000 hits in a typical month, but about
15,000 actual visitors, or whom perhaps 2,500 stay long enough on the main
page to trigger the page counter. Each page has several images as well as
the HTML text, and people will read several pages.

<P>To accurately count the number of visitors to your site, you can count
the number of hits to the main page. If you encourage people to always visit
your site's main page (publish just that URL), then your statistics will be
more accurate.

<H4>Using The Log Files</H4>

<P>This section still needs to be completed.

<H4>Using Password Protection</H4>

<P>This section still needs to be completed.

.-----------------------------------------------------------------
.page Writing Web Server Extension (WSX) Agents

.build anchor wsx
<H2>$(TITLE)</H2>

<H3>What is WSX?</H3>

<P>WSX is the Xitami equivalent of protocols like ASAPI, ISAPI, etc.  A WSX
program is always written as a multithreaded SMT agent, and is linked into
the server executable.  Unlike the xxAPI protocols, WSX agents are not
loaded at runtime from dynamic link libraries, but are bound into the Xitami
executable.  This is done mainly to keep things simple, but also because SMT
does not support dynamically-loaded agents.

<P>A WSX agent handles some specific type of URL, based on the name of the
URL. For example, Xitami comes with two standard WSX agents - xiadmin and
xierror - which handle URLs starting with "/admin" and "/error"
respectively.

<P>Writing WSX agents is not trivial, but it's worth it for certain kinds of
work.  If you want to write WSX agents, you should take a good look at the
SMT documentation, and study the standard WSX agents.  WSX is <EM>not</EM> a
'fast CGI' protocol.  A WSX agent is tightly-bound into the web server,
while a CGI program is most definitely not.  I'll summarise the differences
between a CGI program and a WSX agent:
<UL>
<LI>CGI programs are portable between web servers; WSX agents are a specific
Xitami plug-in.
<LI>If a CGI program crashes, the user gets a nice error message.  If a WSX
agent crashes, the server is probably dead.
<LI>CGI programs are single-threaded: each on-going request is handled by
a separate CGI process; a WSX agent can handle multiple requests at once,
in the same way as Xitami handles multiple connections at once.
<LI>CGI programs are usually written by people with functional knowledge
(by this, I mean they are developing some kind of business solution),
whereas a WSX agent is a highly technical solution.
<LI>WSX agents can be used to extend the web server's functionality in
entirely new directions.  For instance, you could implement protocols like
FastCGI using a WSX agent.  CGI cannot be used in this manner.
<LI>WSX agents must be written using the SMT toolkit (including ANSI C and
the Libero tool), while CGI programs can be written in a variety of
languages (C, Perl, server-side Java, Basic, Awk).
<LI>You can do things with CGIs (like accessing slow databases) that are not
acceptable in WSX agents.
</UL>

<P>A WSX agent talks to the web server (actually, the smthttp agent) using a
set of messages. When a user asks for a URL that matches WSX agent, smthttp
sends the agent a WSX_REQUEST or WSX_REQBIN message. The WSX agent processes
the request (which can be a HTTP GET or POST), and replies with a WSX_OK,
WSX_MULTIPART, WSX_BIN, WSX_MBIN, WSX_ERROR, WSX_REDIRECT, WSX_RESTART, or
WSX_KILL message.

<P>The WSX agent gets a bunch of things from the web server: the URL that
was asked for, any arguments, the current HTTP symbol table, and the posted
data, if any. In return, it provides either the HTML data to show (for
WSX_OK, WSX_MULTIPART, WSX_BIN, or WSX_MBIN), a HTTP error code (for
WSX_ERROR), a redirected URL (for WSX_REDIRECT), or nothing (for the other
messages).

<H3>Writing WSX Programs</H3>

<H4>Single-threaded or Multithreaded?</H4>

<P>Like all SMT agents, a WSX agent is either single-threaded or
multithreaded. A single-threaded agent is simpler to write than a
multithreaded agent, but is more limited in what it can do. The two WSX
agents provided with Xitami are both single-threaded.  More complex WSX
agents, such as the xilrwp agent, are multithreaded.

<P>The main difference is this: a single-threaded agent can only handle one
request at a time.  A multithreaded agent can handle dozens or hundreds.
If the agent can answer a request with little work, a single-thread can
be sufficient.  If a request implies some 'slow' work, such as making a
connection to another process or computer, or sending some message to another
agent and waiting for a reply, a multithreaded agent is better.

<P>In terms of programming, a single-threaded agent needs to use some
specific SMT notation (such as setting the SINGLE_THREADED macro to TRUE)
and does not handle any thread context.  A multithreaded agent in contrast
works with a thread context block that contains all data for the thread.
You'll find details of this in the SMT documentation, as well as examples of
both types of agent in the SMT source code.  For example, smthttp itself is
a multithreaded agent, while smtsock is single-threaded.

<H4>Managing Session Context</H4>

<P>There are two broad classes of WSX agent: those which have to handle
session context, and those that do not.  Examples of agents that require
session context are:
<UL>
<LI>The xiadmin administration agent; it has to know which screen the user
was working in, and what they were doing.
<LI>An agent that implements some kind of multi-transaction form; i.e. a
form where the user can make changes and work with more than one exchange
step.
</UL>

<P>Examples of agents that do not require session context are:
<UL>
<LI>The xierror error simulation agent; each request is totally independent
of any previous request.
<LI>An agent that implements CGI or a similar stateless protocol.
<LI>An agent that satisfies any other kind of stateless request.
</UL>

<P>HTTP is often described as a 'stateless protocol', but there are in fact
several ways to implement state. We can define state as a set of variables
that the server (or the WSX agent) needs to distinguish one user from
another, and to tell what state the user was in. I generally call this the
'context' for a session. Context is necessary if you want a decent level of
security, complexity, and ease of use. One commonly-used way to implement
context is <EM>cookies</EM>. These have a bad press: cookies are too often
abused to keep track of users' activity on a website. Another method is to
encode the context in the URLs used in the form. For instance, each submit
button or URL will invoke the same URL, but with an argument (?xxx) that
contains the context data. This has several disadvantages: sensitive
information that should be kept internally on the server may be sent to the
browser; the HTML stream can become very large; and the arguments sent back
to the server can also become very large. It has an advantages too: there is
no need to save any kind of data in the server.

<P>My preferred technique is to save the context in allocated memory, and
then to encode a <EM>key</EM> in the URL, using the ?xxx technique.  When
the WSX agent receives the request, it checks whether the key is present and
valid, and if so, continues the session with that data.  If not, it can
choose to show an error screen or reinitialise the session.  The HTML stream
is not affected by the size of the context, since all that is transmitted is
the session context key.

<P>If you encode session in this way, you need to do a few things if you are
building a serious server:
<UL>
<LI>You have to ensure that the session context key is unique, of course.
<LI>You must either generate a new key for each session step, or add some
kind of step counter, to enable the server to tell if the user uses the
browser's Back action, and then tries to resubmit the form data.
<LI>You must clean-up contexts when the user ends a session (if it is
possible to determine this) or when the session has been inactive for a
certain time (which you can determine using SMTTIME alarm messages).
<LI>You may want to compress the context (there are functions in SFL to do
this kind of thing).
</UL>

<P>One troublesome problem is the browser Back action.  There is no way to
disable this, and HTTP/1.1 specifically states that there is no way to
change the behaviour of a browser's history (which is what this is).  The
problem arises because when a user uses the Back action, they can resubmit a
form that is no longer meaningful in the current context.  One solution that
we have used in this situation is to refresh the current form when we detect
that the user has a valid session key but an invalid 'step' (i.e. has used
the Back action).  Another solution is to simply redisplay the main form
when this happens.  In any case, it's worth educating the user -- if only
with a small message on the main form -- that the Back action is not a good
idea within these forms.

<H4>Messages From smthttp</H4>

<P>A WSX agent talks to smthttp. The protocol is strictly binary: smthttp
sends a WSX_REQUEST or WSX_REQBIN message to the agent; the agent processes
this and sends back a reply. Each request has exactly one reply.

<P>The smtmsg.h and smtmsg.c modules provide functions to send and decode
WSX messages (as well as all the other SMT messages). These macros are used
to send a message to a WSX agent. Normally only smthttp does this, but you
may want to chain WSX agents so that one sends messages to another:
<PRE>send_wsx_request (
    QID  *to,                       /*  Destination thread queue       */
    char *request_url,              /*  URL for admin request          */
    char *arguments,                /*  URL arguments, if any          */
    char *virtual_host;             /*  Virtual host for request       */
    char *post_data,                /*  POSTed data, if any            */
    word  symbols_size,             /*  HTTP symbol table size         */
    byte *symbols_data              /*  HTTP symbol table data         */
);

send_wsx_reqbin (
    QID  *to,                       /*  Destination thread queue       */
    char *request_url,              /*  URL for admin request          */
    char *arguments,                /*  URL arguments, if any          */
    char *virtual_host;             /*  Virtual host for request       */
    qbyte post_size,                /*  POSTed data size               */
    byte *post_data,                /*  POSTed data body               */
    word  symbols_size,             /*  HTTP symbol table size         */
    byte *symbols_data              /*  HTTP symbol table data         */
);
</PRE>

<P>The HTTP symbol table is prepared as for a CGI process. That is, it
contains the same CGI fields, and the HTTP header fields under the same
conditions. Symbol names are converted to uppercase, with hyphens replaced
by underlines. For instance, the 'Content-Type:' header value is held as a
symbol called 'CONTENT_TYPE'. This block is stored as a table of strings of
the format "name=value" and a single null. The table ends with a null string
(two nulls in a row). To convert this block back into a usable symbol table
you can use the SFL descr2symb() function (from sflsymb.c). To use this you
must first prepare a DESCR block (which holds the size and data in a single
structure) as follows:
<PRE>DESCR symbols;
SYMTAB *symtab;

symbols.size = request-> symbols_size;
symbols.data = request-> symbols_data;
symtab = descr2symb (&symbols);
</PRE>
See below for an explanation of how to get the 'request' structure used in
this example.

<P>The virtual_host field is NULL if the request was made to the default
host; if the request was made to a virtual host, this field contains the
name or ip address of the virtual host as defined in the main config file
under the [Virtual-Host] section.

<P>The post_data field contains the POSTed HTTP data, if any.  In some cases
this data may be placed in a temporary file; in this case the post_data
field contains '@<I>filename</I>'.  The WSX agent should read the data from
this file.  It does not need to delete the file: this is done by Xitami
automatically.

<P>This is the structure of a WSX request:
<PRE>typedef struct {
    char *request_url;              /*  URL for admin request          */
    char *arguments;                /*  URL arguments, if any          */
    char *virtual_host;             /*  Virtual host for request       */
    char *post_data;                /*  POSTed data, if any            */
    word  symbols_size;             /*  HTTP symbol table size         */
    byte *symbols_data;             /*  HTTP symbol table data         */
} struct_smt_wsx_request;
</PRE>

<P>To unpack a WSX_REQUEST message into this structure, use this function:
<PRE>int get_smt_wsx_request (byte *buffer, void **params);
</PRE>

<P>This is the structure of a WSX binary request:
<PRE>typedef struct {
    char *request_url;              /*  URL for admin request          */
    char *arguments;                /*  URL arguments, if any          */
    char *virtual_host;             /*  Virtual host for request       */
    qbyte post_size;                /*  POSTed data size               */
    byte *post_data;                /*  POSTed data body               */
    word  symbols_size;             /*  HTTP symbol table size         */
    byte *symbols_data;             /*  HTTP symbol table data         */
} struct_smt_wsx_request;
</PRE>

<P>To unpack a WSX_REQBIN message into this structure, use this function:
<PRE>int get_smt_wsx_reqbin (byte *buffer, void **params);
</PRE>

<P>For example:
<PRE>struct_smt_wsx_request
    *request = NULL;               /*  Incoming smt_wsx request       */

/*  Decode the WSX request using this standard function call          */
get_smt_wsx_request (thread-> event-> body, (void **) &request);

if (request)
    the_next_event = ok_event;
else
  {
    /*  The request can only be null if there is no memory left       */
    send_wsx_error (&thread-> event-> sender, HTTP_RESPONSE_OVERLOADED);
    the_next_event = exception_event;
  }
</PRE>

<P>When you've finished with a request, you must deallocate it as follows:
<PRE>/*  We're finished with the request structure - deallocate it         */
free_smt_wsx_request ((void **) &request);
</PRE>

<H4>Messages Back To smthttp</H4>

<P>The WSX agent can reply to a WSX_REQUEST or WSX_REQBIN with one of these
messages:
<UL>
<LI>WSX_OK - send a HTTP reply to the user (HTTP code 200).  This can be
HTML text, or the name of a file containing binary data.
<LI>WSX_MULTIPART - send a HTTP reply to the user, as for WSX_OK, but
continue waiting for WSX messages from the WSX agent.  This allows a WSX
agent to send multipart messages to the web browser.  The last message, if
any, should be a WSX_OK.
<LI>WSX_BIN - send a HTTP reply to the user, as for WSX_OK, but where the
body contains arbitrary binary data, e.g. an image file.
<LI>WSX_MBIN - As WSX_MULTIPART, for binary data.
<LI>WSX_ERROR - return error status to the user (HTTP codes 3xx, 4xx, or
5xx).  The user will get the error message as formatted by the web server
according to the configuration profile.
<LI>WSX_REDIRECT - redirect the request to another URL.  This is returned to
the browser as a code 302.
<LI>WSX_RESTART - show a page of HTML to the user (HTTP code 200), then
restart the web server.  All open connections (HTTP and FTP) are killed by
this action.
<LI>WSX_KILL - show a page of HTML to the user (HTTP code 200), then
terminate the web server.  All open connections (HTTP and FTP) are killed by
this action.
</UL>

<P>The following macros prepare and send reply messages:
<PRE>send_wsx_ok        (QID *to, char *html_data);
send_wsx_multipart (QID *to, char *html_data);
send_wsx_bin       (QID *to, qbyte html_size, byte *html_data);
send_wsx_mbin      (QID *to, qbyte html_size, byte *html_data);
send_wsx_error     (QID *to, dbyte error_code);
send_wsx_redirect  (QID *to, char *new_url);
send_wsx_restart   (QID *to, char *html_data);
send_wsx_kill      (QID *to, char *html_data);
</PRE>

<P>Note that the 'to' argument in these calls is the queue id of the smthttp
agent, which sent the original WSX_REQUEST or WSX_REQBIN message.

<P>The code for unpacking these messages (if you're calling a WSX agent) is
similar to that described above for WSX_REQUEST and WSX_REQBIN. You can see
the details in smtmsg.h.

<P>The WSX_OK, WSX_MULTIPART, WSX_RESTART, and WSX_KILL messages send
'html_data' to the web server. This data should respect the rules for CGI
output. Normally it would be a HTML page, e.g.:
<PRE>&lt;HTML&gt;&lt;BODY&gt;
&lt;P&gt;Hello World!
&lt;/BODY&gt;&lt;/HTML&gt;
</PRE>

<P>You can also start the data with your own HTTP header fields if necessary,
using the traditional blank line to separate the header from the body, e.g.:
<PRE>Cache-control: no-cache

&lt;HTML&gt;&lt;BODY&gt;
&lt;P&gt;Hello World!
&lt;/HTML&gt;&lt;/BODY&gt;
</PRE>

<P>This argument must be a string, so to transfer binary data, Xitami also
understands the syntax '@filename', where <I>filename</I> refers to a
<EM>temporary</EM> file that Xitami will parse, send, then delete.  The file
should start with a 'Content-Type: some/type' header, followed by a blank
line, and the file data.  A WSX_BIN or WSX_MBIN message is probably more
efficient for transferring binary data, unless you already have a temporary
file sitting around.

<P>The WSX_BIN and WSX_MBIN messages send a binary block of data back to the
web server. This should be formatted with a Content-Type: header, a blank
line, and the binary data as follows:
<PRE>Content-Type: xxxx/yyyy

..binary data..
</PRE>

<H4>Starting From A Skeleton Program</H4>

<P>If you start writing a new WSX program, start from a skeleton. The
xierror program is a simple example of a single-threaded, context-free WSX
agent. This is pretty much the simplest example you can make. You should
start by copying xierror.l and xierror.c to new files (keep these
extensions).

<P>Like any SMT agent, you start the design phase in the dialog (.l file).
Look at the dialog file, either using a text editor, or using the Libero
tool (which is amply documented in the Libero documentation from the iMatix
web site).  You'll need to install Libero to make any changes to the agent.

<H4>Modifying The Server main() Function</H4>

<P>Before you can test a WSX agent you must install it into the server
main() function.  This is how the xierror agent is defined in the Xitami
program (xitami.c).  First, we define a prototype near the start of the
program:
<PRE>int xierror_init (void);         /*  Xitami error simulation agent    */
</PRE>

<P>Then we initialise the xierror agent before starting the main HTTP agent.
Here is the code which initialises all the WSX agents, then the main smthttp
agent:
<PRE>xiadmin_init ();                 /*  Xitami administration agent      */
xierror_init ();                 /*  Xitami error simulation agent    */
smthttp_init (rootdir, cgidir);
</PRE>

<P>The order of these initialisation functions can be important.  For
example, if you want to install dynamic WSX aliases (see below) when your
agent initialises, you must add the xxxx_init() call <I>after</I> the call
to smthttp_init().  This provides smthttp the opportunity to create its
main thread.

<P>The Windows 95 and Windows NT source code is available for individual
developers and companies at various prices - contact us for details. You can
purchase this if you want to make OEM versions of the Windows servers.
The OS/2, UNIX, and OpenVMS source code is supplied with the Xitami source
package.

<H4>Modifying The Server Config Files</H4>

<P>To install a 'static' WSX agent you have to change the config files for
the server; add an entry to the [WSX] section like this:
<PRE>[WSX]
path=agent
</PRE>
Where 'path' is a single word that identifies all URLs passed to this WSX
agent, and 'agent' is the agent name (as defined internally in the agent).
You can define a different path per virtual host, or organise your site so
that specific WSX agents are only available on specific virtual hosts.

<P>It is also possible to add and remove paths at runtime.  There are two
macros that do this:
<PRE>send_wsx_install (QID *to, char *vhost, char *path, char *agent);
send_wsx_cancel  (QID *to, char *vhost, char *path);
</PRE>

<P>Note that the 'to' argument in these calls is the queue id of the smthttp
agent. You should use the following style of code to identify this queue id:
<PRE>THREAD *http_thread;

/*  Find 'main' thread in smthttp agent             */
http_thread = thread_lookup (SMT_HTTP, "main");
ASSERT (http_thread);
send_wsx_install (&http_thread-> queue-> qid, NULL, pattern, AGENT_NAME);
</PRE>

<P>The vhost argument tells the smthttp agent what virtual hosts the WSX
agent should be accessible to. If this argument is NULL, the agent will be
accessible to all virtual hosts. If the argument is a virtual host name or
ip address as defined in the [Virtual-Hosts] section of the config file, the
agent will be invisible to other virtual hosts. Note that you can send
several WSX_INSTALL messages, for different virtual hosts, if required.

<H4>Testing And Debugging The WSX Agent</H4>

<P>The best way to test and debug a WSX agent (as for any SMT program) is to
use the Libero animator.  This is a simple code-generation option (-anim)
which causes the agent to display every step it goes through to handle the
request.  Animation output is sent to the console or to one of the log
files, depending on the way you set-up the server.

<P>Since the effects of a bug in a WSX agent will show-up as browser error
messages, or other funny reactions, you can also set the server:debug option
on.  This causes all headers to be logged - a useful way of seeing what is
actually being sent back to the browser.

<H4>Writing Efficient WSX Agents</H4>

<P>The basic rules of multithreaded SMT programming apply.  Your program
should not block.  For example, it'd be a bad idea to try to access a
relational database and execute some SQL code.  The entire web server would
block while the SQL request was being satisfied.

<P>If you need to do database access, there are other, more efficient ways
to do this.  The best way we know is to work with more than one process; the
web server passes requests (transactions) to a second process that handles
them one by one.  You can scale this model up to very large systems handling
tens of transactions per second.  This is the type of approach that is well-
implemented using a WSX agent.

.-----------------------------------------------------------------
.page Extending Xitami with External Peer Processes

.build anchor lrwp
<H2>$(TITLE)</H2>

<P>By Robin Dunn <robind@earthling.net>

<H3>Introduction</H3>

<P>Any serious web-based application relies, possibly quite heavily, on
dynamic content. In other words, dynamically generated pages.

<H4>CGI</H4>

<P>To facilitate the need for dynamic content, CGI was invented back in the
dark-ages of the Web (just a few years ago.) While CGI provides the ability
to do dynamic generation of web pages as well as quite an elegant and
flexible interface, it also has a very big wart. It is <B>too slow</B> for
serious work. The basic model that CGI follows is:
<OL>
<LI>The web server receives a request that maps to a CGI handler.
<LI>The web server starts a new process with the specified CGI command,
feeding the CGI data to it.
<LI>The web server waits for the process to terminate.
<LI>The output of the process is sent to the browser.
</OL>

<P>Unfortunately, each time the CGI process is started, it can be several
seconds before it is able to even begin processing the request. Depending on
the OS there may be a large amount of overhead in creating a new process.
There may be a Perl or other language interpreter to load and initialize,
followed by loading and parsing the CGI script itself. Database connections
may have to be made, files opened, etc.

<H4>Server Extensions</H4>

<P>Because of the shortcomings of CGI, server extension APIs were created by
the various web server vendors.  For example, Netscape provides NSAPI,
Microsoft ISAPI, Apache ASAPI, and even Xitami has WSX. (Isn't it refreshing
to <B>not</B> have &quot;SAPI&quot; at the end?)

<P>While these extension APIs do away with the overhead of process creation
they introduce a few warts of their own:
<OL>
<LI>The extension is linked into the server itself, (either statically at
compile/link time or dynamically at runtime) so bugs in the extension can
potentially bring down the entire web-server.
<LI>Server extensions by their nature are highly specific to the API it is
written for. It would be very difficult to be portable to another
server.
<LI>You are limited in your choice of languages to what is supported by
the API.
</OL>

<H4>Persistent CGI</H4>

<P>There have been several alternatives that combine the ease of use and
flexibility of CGI with the efficiency of Server extension APIs.  One of the
most popular of these is called <A HREF="http://www.fastcgi.com/">FastCGI</A>
developed by <A HREF="http://www.openmarket.com/">Open Market, Inc.</A>
FastCGI or other persistent CGI alternatives are, as the name suggests, a CGI
type of interface that is Faster than CGI.  It could potentially be up to 20
times faster, or more, depending on what kind of startup/initialization
overhead the script has.  It does this phenomenal feat by allowing the CGI
process to handle more than a single request each time it starts up.  The web
server communicates with the running persistent CGI process via a socket and
sends the appropriate data to the persistent CGI process when the reqest is
made.  The persistent CGI process does its thing, generates an html page or
other response and sends it back over the socket and then instead of
terminating, it waits for the next request.

<H3>LRWP</H3>
<P>Begining with version 2.2a, Xitami includes a persistent CGI extension
called LRWP, (which stands for Long Running Web Process.)  LRWP is written as
a WSX agent which implements a simple protocol for communicating with external
processes called Peers.  The peer process simply waits for the requests to
come from Xitami and then responds with a valid http response, just like a
CGI program.  The main difference is that like other persistent CGI
solutions, the LRWP peer waits around for another HTTP request instead of
terminating.

<P>LRWP is not FastCGI, but it is very similar.  The protocol between Xitami
and the LRWP Peer is much simpler than the FastCGI protocol, and therefore
less prone to implementation differences or errors.  However, given the right
circumstances it is possible to run the same program as both a LRWP Peer and
a FastCGI Peer with only minor differences in the startup code.

<H3>The LRWP protocol</H3>

<P>As mentioned above, the communications protocol between the LRWP Peer and
the LRWP Agent within Xitami is quite simple.

<OL>
<LI>The Peer connects to the port specified in the [LRWP] section of the
Xitami configuration file, (offset by portbase if needed,) and sends a
startup string.  The startup string has three components:
<OL TYPE=a>
<LI>The appname or alias.  This is what will be used to redirect HTTP
requests to the Peer.  For example, if you use "testapp" as the
alias, then requests begining with http://yourhostname.com/testapp
will be sent to the peer.  If the alias is "this/is/a/test" then
requets begining with http://yourhostname.com/this/is/a/test will be
sent.
<P>If multiple peers connect with the same alias name, then multiple
simultaneous requests will be able to be handled.  If there are more
simultaneous requests then there are peers to handle them, then the
LRWP Agent in Xitami will queue up the requests and wait for a peer
to complete its current request.
<LI>The next component of the startup string is the name of the
virtual host to be associated with.  If a name is passed, then the
peer will only be given requests that are directed to that virtual
host.  Otherwise, the peer will be sent requests from any virtual or
nonvirtual host that matches the alias.
<LI>The third component of the startup string is reserved for a
currently unimplemented feature.
</OL>

<P>Each component of the startup string is separated by a character with
an ASCII value of 255.
<LI>The LRWP Agent then responds with either "OK" or an error message
that begins with "ERROR".  If "OK" then the peer is good to go,
otherwise the LRWP Agent is rejecting the connection for some reason and
you have some debugging to do.
<LI>At this point the Peer simply waits for a request to be sent to
it.  When the request comes, it is formatted as follows:

<CENTER>
<P>
<TABLE BORDER=1 CELLSPACING=1>
<TR>
<TD> ENV size </TD>
<TD> ENV data as a series of name=value pairs </TD>
<TD> POST size </TD>
<TD> POST data, if any </TD>
</TR>
</TABLE>
</CENTER>

<OL TYPE=a>
<LI>A nine-digit, zero-filled number representing the size of the
CGI-environment data.  For example, "000001234".
<LI>Immediately following the size is that number of bytes of
data formatted as NAME=VALUE pairs, each separated by a NULL byte.
<LI>The next component is another nine-digit, zero-filled number,
this time representing the size of the POST data, if any.
<LI>If there is any POST data, the specifed number of bytes comes
next.
</OL>

<LI>The Peer now has everything it needs to handle the request, so at
this point it should do whatever it needs to create a HTML document, or
some other type of data to return.  The Peer then sends back on the
socket the number of bytes it will be sending, formatted as a nine-digit,
zero-filled number, followed by that number of bytes of data.

<P>The content returned to the server will be treated just like the
output from CGI programs, so content-type and other headers are
significant.

<LI>At this point the Peer should either exit or go back to wait for
another request.  If it exits, and if there are no other peers attached
to the server with the same alias name, then that URI will
fall-back to default Xitami handling.  For example, if the URI
doesn't match a real file or directory then it returns an access
error, otherwise the physical file or directory will be processed
normally.

<P>There may be situations where this is a highly desirable feature, for
example if you are running a contest and only want to collect 100
entries, the peer could exit after collecting the desired amount and
then Xitami will fall-back to a static document at the same URI that
explains that the contest is now closed.

<P>Another reason to exit is to ensure that any memory leaks in your
program or the interpreter it is built upon are released.  In order for
this to be effective you probably will want to have the ability to
automatically restart your peer processes.  (UPM is currently being
modified to allow this type of functionality.)  For example, I know
people with scripts running in the FastCGI environment that only allow
the processes to handle 50 requests and then they exit and get restarted
by an external process monitor.
</OL>

<H3>LRWP Environment Variables</H3>
<P>LRWP programs receive the same environment variables as a CGI program.
If you're in doubt as to which ones these are, either read this manual again
or run the testcgi program supplied with Xitami.

<H3>The LRWP Library</H3>
<P>Included with Xitami is a small library of C functions to assist
in writing LRWP Peers.  The source files are lrwplib.h and lrwplib.c and
contain the following functions:


<p><hr WIDTH="60%" ALIGN=Center><pre>
char* lrwp_connect(LRWP* lrwp,        /* pointer to UNCONNECTED LRWP object */
                   char* appname,     /* Name or alias of Peer app         */
                   char* host,        /* hostname/IP address to connect to */
                   char* port,        /* string containing port number     */
                   char* vhost)       /* optional virtual hostname         */
</pre>

Connects to the LRWP agent running in Xitami on host and port.  Sends
the given appname to use as the URI alias that will trigger requests to
be sent to this peer.  If vhost is given, this peer will only be sent
requests origininating from that virtual host.  This function assumes
that the LRWP structure is uninitialized and clears it before use.

<p>Returns NULL on success and a pointer to an error message otherwise.

<p><hr WIDTH="60%" ALIGN=Center><pre>
int  lrwp_accept_request(LRWP* lrwp)    /* pointer to CONNECTED LRWP object  */
</pre>

This funation waits for and recieves a request from the LRWP agent, and
populates the LRWP structure with the request data.
<p>
Returns 0 on success and -1 otherwise.

<p><hr WIDTH="60%" ALIGN=Center><pre>
int  lrwp_send_string(LRWP* lrwp,       /* pointer to CONNECTED LRWP object  */
                      char* st)         /* an ouput string                   */
</pre>
This function appends a string to the response buffer.
lrwp_finish_request() must be called to send the response back to Xitami.
<p>
Returns 0 on success and -1 otherwise.

<p><hr WIDTH="60%" ALIGN=Center><pre>
int  lrwp_send_data(LRWP* lrwp,         /* pointer to CONNECTED LRWP object  */
                    void* data,         /* pointer to a data buffer          */
                    size_t len)         /* size of the data buffer           */
</pre>
Appends a buffer of (possibly binary) data of the specified size to
the response buffer.  lrwp_finish_request() must be called to send the
response back to Xitami.
<p>
Returns 0 on success and -1 otherwise.

<p><hr WIDTH="60%" ALIGN=Center><pre>
int  lrwp_finish_request(LRWP* lrwp)    /* pointer to CONNECTED LRWP object  */
</pre>
Completes the request by sending the response buffer back to Xitami
and prepares the lwrp structure to receive another request.
<p>
Returns 0 on success and -1 otherwise.

<p><hr WIDTH="60%" ALIGN=Center><pre>
int  lrwp_close(LRWP* lrwp)             /* pointer to CONNECTED LRWP object  */
</pre>
Closes the connection to Xitami.
<p>
Returns 0 on success and -1 otherwise.

<p><hr WIDTH="60%" ALIGN=Center>

<H3>A Simple Example Using C</H3>

<PRE>
#include "sfl.h"
#include "lrwplib.h"

void main()
{
    LRWP    lrwp;
    int     count = 0;
    int     err;
    char*   errMsg;
    char    buf[256];

    sock_init();
    errMsg = lrwp_connect(&lrwp, "hello", "localhost", "81", "");
    if (errMsg) {
        fprintf(stderr, "%s\n", errMsg);
        exit(1);
    }
        /* only handle 5 reqests, then exit */
    while (count &lt; 5 && lrwp_accept_request(&lrwp) != -1) {
        count += 1;
        lrwp_send_string(&lrwp, "Content-type: text/html\r\n\r\n");
        lrwp_send_string(&lrwp,
                "&lt;HTML>&lt;HEAD>&lt;TITLE>hello&lt;/TITLE>&lt;/HEAD>\n&lt;BOD

        sprintf(buf, "&lt;H2>Hello from LRWP&lt;/H2>\nCount = %d", count);
        lrwp_send_string(&lrwp, buf);

        lrwp_send_string(&lrwp, "\n&lt;/BODY>&lt;/HTML>\n");
        lrwp_finish_request(&lrwp);
    }
    lrwp_close(&lrwp);
    sock_term();
}

</PRE>

<H3>A Simple Example Using Python</H3>

<PRE>
from lrwplib import LRWP

def main():
    lrwp = LRWP('hello', 'localhost', 81)
    lrwp.connect()
    count = 0
    while count &lt; 5:        # exit after servicing 5 requests
        count = count + 1
        req = lrwp.acceptRequest()
        req.out.write('Content-type: text/html\r\n\r\n')
        req.out.write('&lt;HTML>&lt;HEAD>&lt;TITLE>hello&lt;/TITLE>&lt;')
        req.out.write('&lt;/HEAD>\n')
        req.out.write('&lt;H2>Hello from LRWP&lt;/H2>\nCount = ' + str(count))
        req.out.write('\n&lt;/BODY>&lt;/HTML>\n')
        req.finish()

    lrwp.close()

if __name__ == '__main__':
    main()

</PRE>


.-----------------------------------------------------------------
.page FAQ

.build anchor faqlink
<H2>$(TITLE)</H2>

.macro FAQ_TABLE -
.if $\(PASS) == 1 -
.FAQ_TABLE $* -
.else -
.define skip $1 -
<P><FONT SIZE=+1><B>$+</B></FONT> -
<UL> -
.for nbr from 1 to $\(count_$1) -
<LI>$\(nbr): $\(*$1_$\(nbr)) -
.endfor -
</UL> -
.define count_$1 = 0 -
.endif

.macro -noquote FAQH -
.define count_$1 = $\(count_$1?0) + 1 -
<P><B>$\(count_$1): $+</B>\ -
.build anchor $1_$\(count_$1)=$+

.macro -noquote FAQ -
<P>$(*faqlink=[Top])<HR> -
.define count_$1 = $\(count_$1?0) + 1 -
<P><B>$\(count_$1): $+</B>\ -
.build anchor $1_$\(count_$1)=$+

.FAQ_TABLE i Installing and Configuring Xitami
.FAQ_TABLE 3 Windows 3.x Questions
.FAQ_TABLE w Windows 95/98 Questions
.FAQ_TABLE n Windows NT Questions
.FAQ_TABLE u UNIX Questions
.FAQ_TABLE o OS/2 Questions
.FAQ_TABLE c CGI and SSI questions
.FAQ_TABLE v Multihosting/Virtual Hosting
.FAQ_TABLE f FTP Questions
.FAQ_TABLE l Log File Questions
.FAQ_TABLE m Miscellaneous Questions

<HR>
<H3>Installing and Configuring Xitami</H3>

.FAQH i When I try to use the /admin setup, Xitami asks for a password!
<P>Create two files:
<OL>
<LI>defaults.cfg:
<PRE>[Security]
    filename=defaults.aut
</PRE>
<LI>defaults.aut:
<PRE>[/Admin]
    admin=verysecret
</PRE>
</OL>
Now use userid 'admin' and password 'verysecret' to access the WBA.

.FAQ i Help - I don't understand how to define users and passwords!
<P>Xitami uses two separate user/password systems, one for web pages and
one for FTP access.  To start with, create the defaults.cfg and defaults.aut
file as described above.  Then, for each webpage directory you want to
protect, add an entry in defaults.aut.  Enter the URL directory with or
without a leading '/' - it does not matter.  Add each user with their
password.  For instance, to say that only 'John' and 'Janet' can get at
webpages starting with '/personal', you write something this:
<PRE>
[/personal]
    john=Go96xas883
    janet=Yhs7gsr73
</PRE>
(I'm inventing silly passwords here.)
<P>For FTP access, you need to define each FTP user separately.  First, add
these lines to defaults.cfg:
<PRE>[Ftp]
    Directory-file=ftpdloc.aut
    User-file=ftplocal.aut
</PRE>
Now you can edit ftplocal.aut to define users.  The file ftpusers.aut shows
what's allowed.  For example, to define an 'anonymous' user, who connects to
the ftproot/pub directory with read access only, write this in ftplocal.aut:
<PRE>[Anonymous]
    Access=G
    Password=*
    Root=/pub
</PRE>
<P>A fairly classic setup is to define a personal web space for each user
which they can update using FTP.  Be careful with this, since it's possible
to set things up so that any user can run a CGI program (unsafe on Windows
systems).  However, this is how you do it:
<OL>
<LI>For each user, create a directory below the ftproot with the user's
short name.
<LI>Create an FTP account as described above.  Use the access rights GPD,
and MR if you want allow them to create/remove directories.
<LI>Define an HTTP alias that points to this directory.  For instance, in
defaults.cfg:
<PRE>[Alias]
    john=ftproot/john
</PRE>
<LI>If you also want these webpages to be private (password protected), add
an entry to defaults.aut:
<PRE>[/John]
    john=Gsh65sgs12
</PRE>
</OL>

.FAQ i Can I refer to an environment variable in the webpages setting?
<P>Yes.  For example, if you defined the variable WEBROOT to specify the
webpages location, use $\(WEBROOT) in the webpages setting.  Note that
environment variables are set in your startup script at the operating
system level (e.g. .profile under Unix, autoexec.bat under Windows 95).

.build anchor reset-default
.FAQ i I've screwed-up my installation and nothing works - Help!
<P>If you edited xitami.cfg, you have to get the original version back out
of the Xitami zip file or installation package.  Under Windows you can use
Winzip or unzip to extract files from the .exe packages.  If you only worked
through the WBA, you can delete defaults.cfg.  See the previous question for
defining a new admin user and password.

.FAQ i I installed Xitami two days ago, and now I can't connect to it!
<P>You probably set the server IP address to something.  Delete the line
ipaddress=xxx in the defaults.cfg file.  If you really grok it, delete
defaults.cfg.  See the previous question.

.FAQ i What is a 'HTTP port', actually?
<P>It is a TCP/IP port that is used for HTTP. (HTTP being the HyperText
Transfer Protocol, the means by which web pages, etc, get transfered around
(usually).)

.FAQ i Why do web servers want to use port 80 by default?
<P>In order to contact a program running on another computer via TCP/IP
(such as, say, a web server), you need to know two things: the IP address of
the other computer, and the TCP/IP port on which it is listening for
requests. The URL always includes the name of the other system (or its IP
address), from which you can get the IP address that you need. The TCP/IP
port </I>can</I>be included in the URL, but usually isn't. So you need
another way to find out the URL. Of the various ways that this could be done
(ask someone/another computer, guess, etc), the one chosen for most TCP/IP
services is "you just know what it is". That is, there is a "Well Known"
port number for most TCP/IP services including HTTP, which "everyone knows",
and if nothing else is specified then that is the one that is used. The
"Well Known" port number for HTTP is 80. So the servers want to use it by
default so that everyone will know where to find them by default.

.FAQ i Is there some way to disable the WBA completely?
<P>Yes, set the security:admin option to 0.

.FAQ How do I know that my personal config 'xxx.cfg' is being loaded?
<P>Edit the config file and add a line '! Loading xxx.cfg'. Now, enable
server debugging, and when you start Xitami, this message is output to the
debug.log file.

.FAQ i Why does the installation replace my xitami.cfg and .aut files?
<P>It has to do this, since new versions of Xitami may depend on updated
\.cfg and \.aut files. The important thing is to make all changes in
defaults.cfg, and this includes defining your own .aut file, so that the two
standard files can be reinstalled at any time.
<P>The installation will not override other files, except those provided as
standard in the install package (e.g. default.htm).  So, as a general rule,
do not modify anything that was supplied as standard, and if you're really
paranoid, make a backup before you re-install Xitami.

.FAQ i How do I install a new version of Xitami without losing my config?
<P>Firstly, make sure you did not change either xitami.cfg or xitami.aut.
If you did change these, put your changes into defaults.cfg and
defaults.aut, and add this to defaults.cfg:
<PRE>[Security]
    filename=defaults.aut
</PRE>
In principle you can now re-install Xitami safely.  The installation will
not overwrite anything else you modified, including log files, web pages,
CGIs, etc.  However, for safety, make a zip of the whole Xitami root before
re-installing, just in case.  You should do this regularly anyhow.

.FAQ i Can I install Xitami on a system that already has a web server?
<P>If you are already running a server on port 80, you must configure Xitami
to run on some other port.  Change or create defaults.cfg:
<PRE>[server]
    portbase=1000
</PRE>
will run Xitami on port 1080.  The portbase is also added to the standard
FTP port of 21 to give, in this case, 1021.

.FAQ i How do I change the HTTP port but leave the FTP port at 21?
<P>You can shift the HTTP port between 80 and 100 while leaving the FTP port
at 21.  Set the server portbase to a value between 1 and 20, and subtract
this from the FTP port setting.  So, to move the HTTP port to 90, set the
portbase to 10, and the FTP port to 11.

.FAQ i When I'm not connected to the network, Xitami is VERY slow!
<P>Under Windows 95 and NT, your network configuration must match what's
really going on. For instance, if your TCP/IP configuration specifies a
particular gateway or DHCP server that is not available (because you are not
physically connected). Check that the host and domain info in the DNS tab of
the TCP/IP properties in the network control panel matches the info in the
identification tab of the network control panel.
<P> One typical symptom is that when you click on the Xitami icon in the
taskbar, it takes a minute or two before the Xitami window appears. You may
also get error messages when trying to point your browser to 127.0.0.1. The
bottom line is this: if you want to run your PC off-line from the network,
you must ensure that your PC's network configuration matches. There are
various shareware tools that help you to manage multiple network
configurations, for example NetSwitcher.

.FAQ i 'ping 127.0.0.1' works but I can't connect to http://127.0.0.1/
<P>There are many possible causes of this problem.  The ones we know:
<OL>
<LI>The browser simply won't connect at all... you probably told Xitami to
use a specific IP address, which excludes accesses via 127.0.0.1. Solution:
delete any line 'ipaddress=xxx' in defaults.cfg.
<LI>If you're using a proxy server, first try to disable this completely.
If this improves things, now reconfigure the proxy settings so that the
local addresses (127.0.0.1 and localhost) get past.  If this still fails,
you may need to define an entry in your 'hosts' file for 'localhost'.
<LI>Your server may be behind a proxy server that is not allowing HTTP
connections to get past.  See your network administrator.
</OL>

.FAQ i I can connect to http://127.0.0.1/ but not http://127.0.0.1/admin
<P>There are many possible causes of this problem.  The ones we know:
<OL>
<LI>You may have an old version of Xitami. Make sure you're running at least
version 2.0.
<LI>You may have installed a new version of Xitami but kept the xitami.cfg
from an old installation. This can leave the WSX definition for /admin
undefined, so /admin will not work. Symptom: you get 'not supported' as an
error message.
<LI>If you're using Xitami under Windows 3.x, the /admin WBA is not
supported.  The 32-bit 'console' version of Xitami can run under Win32s.
</OL>

.FAQ i Why does 127.0.0.1 not work with proxy servers?
<P>The problem is that if 127.0.0.1 is passed to the proxy server, it can't
resolve that back to your local machine. You can configure your browser so
that certain addresses (127.0.0.1) are not passed to the proxy.  This is
actually the browser being really silly, because this address never means
anything else than 'this machine'.

.FAQ i Why does my server address switch between 127.0.0.1 and 253.239.42.1?
<P>127.0.0.1 is always available (it's the local loopback address); the
other address is available when you're online and connected to the outside
world.

.FAQ i I want to test a site but my browser can't find 'www.myhost.com'
<P>Edit the 'hosts' file (in the Windows directory, and you may want to
rename 'hosts.sam' to 'hosts'), and point the your site name to 127.0.0.1.

.FAQ i What's the 'document root'?
<P>The document root is the directory where the main files are. For example
if someone asks for a file "http://somehost/index.htm", this is taken to
mean 'index.htm in the document root'. This is usually the directory called
'webpages' in the Xitami directory. So if you installed Xitami in c:\xitami,
the index.htm file would actually be in c:\xitami\webpages\index.htm. This
webpages directory can itself contain subdirectories, of course.

.FAQ i Do I need two computers to use Xitami?
<P>You can use one computer as a server, and one as a client if you like,
but you can also use the same computer as client and server. Xitami is so
small and fast that you can develop Java or CGI programs on the same system
you test them on, and you will not notice any slow-down. This is also a
simpler way of working than always copying your webstuff to another machine.
Just set your Xitami cgi-bin option to point to the directory where you
build your executables, or the webpages directory to your HTML directory
root.

.FAQ i Can I run Xitami on stand-alone machine?
<P>You can certainly run Xitami on a stand-alone system. It is a Good Idea
to have TCP/IP networking installed (on a PC, go for Win95, OS/2, or Linux,
which have TCP/IP built-in, instead of Win3.1 which is crippled in this
area). You must install TCP/IP correctly and at least have a dial-up adaptor
(software) configured. The 'ping localhost' command must work. Under Windows
the winsock library may want to dial-up when you initialise it (e.g.
connect from your browser), but this can be configured (in the browser or
Internet control panel) to not be necessary.

.FAQ i Can I run Xitami under DOS?
<P>Which version of DOS? We've not tested Xitami on a pure-DOS system, but
it does run in the DOS box of Windows 95. If you're looking for something
that will run on a PC without Windows, you could consider OS/2 or Linux:
both run Xitami very well and with minimum hardware.

.FAQ i Can I use Xitami over an ISDN or dial-in connection?
<P>Yes, if TCP/IP works and the 'ping' command does something useful. The
Same goes for X.25, frame-relay, carrier-pigeon, and telephone drums.

.FAQ i How do I change my IP address?
<P>By default, Xitami accepts connections on any available IP address.
If you have multiple IP addresses, Xitami accepts connections on all of
them.  More usually under Windows you have only one network card, only
one IP address (though with a dial-up connection you have two interfaces
and two addresses).  You can also configure Xitami to accept connections
on a specific address only.

.FAQ i Xitami is reporting the wrong server address!
<P>Xitami gets its name from the operating system.  Check the  TCP/IP
configuration and especially the computer name.  You  should be able to
test this using the 'ping' command in a DOS box.  Eg. 'ping mysystem'.

.FAQ i How do I tell Xitami to use my domain name?
<P>Xitami works with any of the IP addresses available on the system. It
does not care what the domain name is, and there is no way to define this
within Xitami. (When you use virtual hosts the situation changes a little:
there the domain name is used as a key to chose which virtual host to work
with.)

.FAQ i How do I move my web site to an Internet domain name?
<P>See the $(*beginners=Beginner's Guide) section. You have to do two main
things:
<UL>
<LI>Register a new domain name with Internic.
<LI>Get at least two existing machines to act as DNS servers for
this name.
</UL>
<P>This is usually only worth doing if you have your own system, permanently
connected to the Internet, or you want to rent a 'virtual host' on someone
else's system. In the first case, your ISP can usually help set things up.
In the second case, the virtual host provider will be able to help.

.FAQ i Can I set my hostname in xitami.cfg or defaults.cfg?
<P>You cannot set your system hostname here. You have to get this working at
the level of TCP/IP itself, e.g. by using the hosts file or a domain name
server (DNS). However, you can specify the hostname that's used in
redirected URLs, and this is important for virtual hosts.

.FAQ i My server keeps starting on port 160, why?
<P>Set server:portbase to 0, or remove the line. The HTTP port is at
portbase+80, and the FTP port at portbase+21.

.FAQ i Why does 'http://address/directory' does not work?
<P>This should work. Set server:debug to 1 and see what's going on in
debug.log. If you're on a PPP connection try setting server:translate to 0.

.FAQ i My images don't load, and various links give 'Not found'
<P>You can switch off image loading in the browser, but I doubt this is the
problem. More likely, you're using references that are incorrect for the
configuration you're using. Look at the HTML pages, and check the &lt;A
HREF&gt; tags. These must be valid. For example if they refer to some
hostname which is not accessible, the images won't load.

.FAQ i Why do my aliases not work?
<P>Set server:debug to 1 and see what's going on in debug.log. The WBA pages
provide a 'test' facility where you can type an URL, and Xitami tells you
what disk file it would be translated to.

.FAQ i How can I change the error 404 message in Xitami?
<P>Edit the file errors/text-404.

.FAQ i What's 'Vanilla' Xitami?
<P>This is just name for the portable, command-line version of Xitami.
Usually we use this term in contrast to the Windows GUI versions of the web
servers, which provide a graphical control panel for the web server.

.FAQ i Why is Xitami.aut not encoded?
<P>This is a temporary situation: we plan to release an update in 1998 that
uses encoded (hashed) passwords for better security. The password file
itself is not accessible to browsers, unless you specify the Xitami root
directory as its webpage directory, which would not really be a good idea.
There are also advantages to plain-text password files: it is simple to
manage these using scripts.

.FAQ i After running a script that modifies defaults.aut, how do I get -
the same script to restart the server?
<P>You don't need to, since Xitami will automatically reload its config,
including any modified password files, after a timeout that you can set as
required (the server:refresh option).

.FAQ i Can I use 'home.html' instead of 'default.htm'?
<P>Change the defaults.cfg file server:defaultn options. You can specify
anything you like: begin with 'default1'.

.FAQ i What is defaults.cfg?  I can't find it anywhere!
<P>Up to v1.3a, people had to modify the pre-supplied xitami.cfg file. This
worked fine until they installed a new version, at which point they could
start again. Defaults.cfg is not supplied with the server - you just copy
the part of xitami.cfg you want to modify. Eg.
<PRE>[CGI]
    debug=1
</PRE>

.FAQ i Why does my webmask (!xx.xx.*) not work?
<P>The webmask is a bit pedantic. This mask forbids all hosts in a certain
domain, but does not <I>allow</I> other hosts. Follow it by ',*' to allow
all other hosts: webmask=!xx.xx.*,*

.FAQ i How do I make my server run faster?
<P>Make sure the server:keep-alive option is enabled. Add lots of RAM to
your system and make sure this is available to your operating system disk
cache. Put your web site onto a RAM disk.  Don't use lazy, slow CGIs,
especially ones that search large databases. Change the priority under
Windows NT to 'High'.  Raise the keep alive limit to 100 or more under
Windows NT, or Unix (not under Win95 or your system will have problems).

.FAQ i How do I make my server secure?
<P>Firstly, consider buying Xitami/Pro which includes support for SSL/2,
SSL/3, and TLS.
<P>Then, understand that there are several standard ways to compromise a
system via a web server:
<UL>
<LI>protocol attacks at the TCP/IP level, mostly aimed at denial of service
attacks.  This depends on your operating system.
<LI>buffer-overflow attacks enabled by programming flaws which allow hackers
to write into the server code by using (for instance) very long URLs or
filenames.  Xitami is robust against these attacks.
<LI>all kinds of attacks based on CGI access.  This depends on who you allow
to put CGIs on your web server system.
</UL>
<P>The main protection is to run Xitami on a system that has no basic
security problems (i.e. Linux v.s NT), and to run it under a user id that
has minimum privileges (so that even through a buffer-overflow attack, the
hacker cannot do much damage). Disabling CGI is also a good idea. FTP does
not pose much risk either way, if you disallow uploading, which allows a DoS
attack (fill-up the hard disk).
<P>Here is Brian Westric's checklist for securing Xitami under Windows NT:
<OL>
<LI>Under Unix, set port to 8085 to allow use of guest account (note: this
doesn't work from web admin, one must edit the config file and restart the
server).
<LI>Start webserver as a service that uses a guest account. This account
will have read access to the webpage directories, and no access to other
directories.
<LI>Make sure cgi-bin directory is empty.
<LI>Disable directory browsing (in both cgi, and security sections).
<LI>Delete default user in default.aut.
<LI>Change admin password (by editing default.aut), and specify a su
password (in security tab).
<LI>Ftp: put port (offset) at -7984 so it runs at port 21 (otherwise, it
doesn't seem to work correctly, possibly an issue with my firewall).
<LI>Ftp: rename greeting, goodbye, userpermission, and dirpermission files.
<LI>Ftp: only have an anonymous user, and give them download permission in
one dir, upload in another.
<LI>Ftp: specify log directory for a different directory than main
directory.
</OL>

.FAQ i I want each user to have FTP access to their personal web pages
<P>You do not need aliases.  Simply assign each user a subdirectory of
the webpages directory, then specify this directory as their FTP home
directory (using a full path).
<P>You can also do it using aliases: create HTTP aliases which point into
the FTP space.  So, user Joe gets a FTP directory: 'ftproot/joe'.  Then
define a HTTP alias:
<PRE>[Aliases]
    joe=ftproot/joe
</PRE>
Which points all URLs starting with '/joe' into this directory.

.FAQ i Does Xitami support http://ipaddress/~username?
<P>The ~username syntax is a UNIX thing; the UNIX shell translates ~username
into the home directory for a user. Xitami does not yet support this
automatically. However you can get much the same effect by creating a
subdirectory for each user underneath the webpages directory, called
'~username'.

.FAQ i In FTP, 'ls' fails from a remote system (it works locally)
<P>This is probably due to the remote machine being hidden by a router or
firewall which prevents return connections from the FTP server to the
client. You should use passive mode for such connections. The next release
of Xitami handles this situation better, but the basic problem is
unsolvable; if the client is behind a firewall or router that does not allow
reverse connections (i.e. server to client) then the default FTP protocol
does not work correctly.

.FAQ i No-one can get to my server.  I can get in, but no-one else can
<P>From Paul S R Chisholm and others...
<P>The 'ping' command (from the client to the server) is the simplest way
to make sure that there is a TCP/IP connection actually established.
However, because of "ping of death" attacks that have become popular over
the past year or so, a lot of routers have been shutting off ICMP. Thus,
ping doesn't work. traceroute (a.k.a. tracert) doesn't work either. This
last one really hurts, in my experience. There are other things to try:
<UL>
<LI>"telnet <hostname> 80", then type "HEAD /" <return><return>;
"Connection refused" means the host is accessible but the server isn't
listening (a Bad Thing(tm)).
<LI>"telnet <hostname> 32760"; you *should* get a "Connection refused"
(I presume nothing's listening on port 32760), which means the host is
accessible (a Good Thing(tm)).
</UL>
<P>You can still try ping and traceroute/tracert, but their failure may not
mean anything. (Their *success* is encouraging.)
<P>Another possible problem is that your server is behind a firewall or
proxy server which is preventing HTTP access (it may even allow ping to
work.)  If this is the case, see your network administrator for help.

.FAQ i No-one can connect to my server through the firewall!
<P>In some networks, your server may not even be addressable from beyond the
firewall. In this case you cannot do much. In other cases, the server is
addressable, but the firewall may be blocking some combination of ports and
protocols and addresses. If this is the case you may be able to convince the
network administrators to open-up access to your server on port 80.

.FAQ i Why does the Restart function not work?
<P>Some functions are not affected by the Restart function.  You cannot
modify the HTTP port through this function.  If you find that the Restart
function has no effect on the configuration change you made, you will
need to stop and restart the server program fully.

.FAQ i The browser is not showing my new pages
<P>There are various reasons why a browser will cache out-of-date pages.
These are the most common ones:
<UL>
<LI>The Reload action by itself will usually fetch pages from the browser
cache, not the web server.  Use Shift+Reload to force the browser to
actually get the page from the server.
<LI>Proxy servers use their own cache.  If your browser connects through a
proxy server, you may find it hard to force a reload.  Disable the proxy
connection, and connect directly to the web server.
<LI>Try flushing the browser disk cache.  It's pointless to flush the
browser's memory cache.
<LI>If you use the META 'expires' tag in the HTML pages, check that it's not
set to a future date.
<LI>If your HTML is generated dynamically (e.g. by a CGI program), check
that HTTP headers such as 'Expires:' and 'Last-Modified:' are correct.  If
in doubt, remove these headers.
</UL>

.FAQ i I get the wrong default page, even if I change the webpages root!
<P>If you load a default page, the browser caches it under a URL name with
no filename, e.g. 'http://localhost/'.  If you then switch to another
webpages root and request the same URL, the browser will compare dates and
load the current default page only if it's more recent.  You'll often find
that requesting the full filename will work correctly.  This problem can
occur if you upgrade to a new release of Xitami, then take a look at the
'Welcome to Xitami' default page.  If you then switch to your own config,
the browser won't show your default page.  This problem can also happen if
you run Xitami with different webpage roots, for instance to test different
sites.  The solution to the first case is to flush the browser cache.  In
the second case, disable the server:cache-defaults option.

.FAQ i I want several 'sites' on the same IP address, on different ports
<P>You can run several copies of Xitami, each in a different directory, and
each on a different port.  Xitami is small enough that this will not slow
down the system.  In each directory, create a suitable defaults.cfg file
with the server:portbase set to a different value.

.FAQ i How do I use Xitami on several different web projects?
<P>It's common to use Xitami to test different web projects on the same
system.  Generally we create a suitable root directory with the
defaults.cfg, authorisation, and other site-specific files, then run Xitami
in that directory.  Put the Xitami executable on the path.  You can also run
the Xitami command-line program (For Windows, xidos32.exe) with command-line
options to set the webpages, CGI, and FTP directories (-r, -c, -f).  It's a
good idea to set the server:cache-defaults option to 0 if you use this kind
of setup, so that default pages are always loaded correctly.

.FAQ i How does Xitami work with subdomains?
<P>Let's say you have a domain, like imatix.com, with a fixed IP address
(207.92.100.8 or something like that). The domain-name servers provided by
our web site providers (azc.com), handle the translation from imatix.com to
a numeric address.  For fun, we defined www.imatix.com and ftp.imatix.com to
point to the same address, i.e. the same network card on the same system.
It'd be quite possible to define further subdomains, all ending in
imatix.com, and all pointing to the same system.  We call these 'virtual
hosts' since each apparently distinct system, or host, actually comes back
to the same thing.  Xitami lets you define a specific profile for each
virtual host, which you can create using the WBA virtual host wizard.
All this works under the same single registered domain.

.FAQ i Where can I get (just) primary & secondary DNS hosting for cheap?
<P>Try the public DNS service at http://soa.granitecanyon.com/. It's free.
You can also try using a .nu domain instead of a .com one.  Go to
http://www.nunames.nu for info. They also link to a service that does the
full DNS service for $49.95/year.  nunames updates your DNS info with an
interactive program right on their web site and it's effective within 24-48
hours.  Similar services are available at www.tonic.to.

<HR>
<H3>Windows 3.x Questions</H3>

.FAQH 3 Xitami does not work - why not?
<P>You need a TCP/IP winsock.dll.  And it has to work.  And it has to be
configured correctly.  If you have any kind of difficulty running Xitami
or connecting to it, use the PING command to debug your TCP/IP
configuration.  First, use 'ping 127.0.0.1' to check that TCP/IP is
working.  Then, use 'ping localhost' to check that winsock.dll is
working.  Next try ping with the system name that Xitami displays.
Then, try this command from another system.  All these must work before
you can use Xitami.

.FAQ 3 'Could not open HTTP port 80 - Protocol not known'
<P>Your TCP/IP protocol is not correctly installed.  Ping must work!
This is typically caused by inadequate winsock dialers that have incomplete
support for server applications.  Try Trumpet winsock, which we've been
told works.  Alternatively, install the 16-bit MSIE, which comes with a
TCP/IP stack that should work with Xitami.

.FAQ 3 Are there still plans to introduce CGI for Win 3.x?
<P>No.  We are moving off this platform in the long term.  You'll find that
the 32-bit console version of Xitami runs pretty well under Win32s, although
CGI does not work due to filesystem incompatibilities.  You <EM>can</EM>
write LRWP programs under Win32s.

.FAQ 3 When will FTP work in the Win 3.x version?
<P>This will never work, due to memory limitations. We've had reasonably
good results running the 32-bit console version on top of Win32s, and we
recommend you try this if you really need the FTP and other features (such
as WBA and LRWP) which are missing from the 16-bit version.

.FAQ 3 Why does xiwin16.exe use all my CPU?
<P>When idling, xiwin16.exe spends most of its time waiting for incoming
socket events. Under Windows 95 or NT, a 16-bit program that is waiting for
socket events looks like it is sitting on the entire CPU. Maybe it is.
Anything can happen in this business. However, as far as we can tell, the
program really is idling, and does not slow-down the system. If this bothers
you, move to Windows 95, and run the 32-bit version of Xitami. This uses
Windows threads (as well as its own internal multithreading) to reduce CPU
consumption to 1% or less when idling.

<HR>
<H3>Windows 95/98 Questions</H3>

.FAQH w Can I use my Win95 system as a real server?
<P>A decent web server like Xitami does not need large amounts of memory or
a blazing CPU. You can happily serve a group of several hundred users from a
486 PC with 16Mb memory. If you want to run heavy CGI programs, you'll need
a faster system. Also, a fast hard disk is a good idea. And of course, any
server is limited to the speed of the network. Given a fast hard disk and a
fast network, Xitami will be able to handle several hits per second even on
a slow 486 PC, and dozens of hits per second on a fast Pentium. (One hit per
second is equivalent to about 20 users actively browsing, at the rate of a
page per minute where a page requires about 3 accesses. If an average user
browses for an hour a day, one hit per second thus translates into 100-150
users.) Note that the earlier releases of Win95 are not really too stable.
<P>Note also that Win95 and Win98 appear to be unstable when they are very
heavily loaded; this does not happen with WinNT, and we assume this is done
deliberately, since in principle the TCP/IP code is shared between these
systems (at least the later Win95 releases).  Windows 95/98 leak memory when
the TCP/IP stack is heavily used.  If you want to run a web server on a
small cheap system, use Linux.

.FAQ w Can I use ASP (Active Server Pages) with Xitami?
<P>If you have Visual Basic 5.0, you can convert your ASP pages with the VB
conversion module provided in the server pack. You will need to make some
modifications to the ASP code. You can then compile it as an executable
program, and run it as a normal CGI program.

.FAQ w 'Could not open HTTP port 80 - Protocol not known'
<P>Your TCP/IP protocol is not correctly installed. Try these steps:
<UL>
<LI>Open the Windows control panel and open the Network icon.
<LI>You need to have at least one network adaptor: if you do not have a
network card in your PC you can install the 'dial-up' adaptor: choose
'Add...', then choose network adaptor, and choose the dial-up adaptor from
Microsoft.
<LI>You then need to add a protocol, TCP/IP, and allow Windows to install
the necessary files.
<LI>When you reboot, you can check that 'ping 127.0.0.1' works. If it does,
go ahead with Xitami and Internet Explorer. If it does not work, you need to
get hold of someone who can help.
</UL>

.FAQ w 'Port is already used by another server (WSEADDRINUSE)'
<P>You are running another web server (perhaps MS PWS) - remove it then
run Xitami.  In some cases you may have to edit the registry; look for
a key 'Runservices' and delete any references to previous web servers.
You can also run Xitami on another port by changing the server:portbase
option, e.g.:
<PRE>[Server]
    portbase=1000
</PRE>
To run the HTTP service on port 1080 and the FTP service on port 1021.

.FAQ w 'How do I run PWS and Xitami on the same system?'
<P>Using regedit, edit your registry:
<PRE>HKEY_LOCAL_MACHINE/
System/
CurrentControlSet/
Control/
ServiceProvider/
ServiceType/
W3SVC/
</PRE>
TcpPort will be set at 50 (hex), value must be changed to 901f (hex) for
port 8080.  Reboot your system.   If you're running FrontPage, FP Ext's must
be uninstalled and reinstalled again.  

.FAQ w 'Your browser sent a malformed request'
<P>Check you're not using a Wingate proxy server or something similar on
Xitami's port.  If you are, switch Wingate to port 90.

.FAQ w How can I tell what TCP/IP ports are assigned?
<P>You can find out which TCP/IP ports are being used with:
<PRE>netstat -a
</PRE>
or "netstat -na" if you don't have good DNS access. But this won't tell you
what programs are using them. Under some Unixes you can use something like
lsof (list open files) to find out the program using them; but I'm not aware
of any equivalent for Windows 95. With Xitami stopped, try running the
netstat command and look for a line with ":80" in it (or ":http") in the
local address part; which indicates that something is using port 80. If
there is, you'll have to dig around and see if you can find what it is.

.FAQ w My URLs starting with file:// don't work across the network
<P>When you use a URL starting with file://, this is not handled by Xitami
at all, but by the browser which picks-up the file from the local system.
Xitami can handle URLs starting with http: and ftp:.

.FAQ w Tips for using Xitami with dynamic IP addresses
<P>From Alex Feinerg a.k.a Yoonicks@EFNet and others...
<UL>
<LI>Get a DYNAmic Domain. There is a free one: http://www.ml.org: subscribe
to Monolith and register a dynamic domain. You will need to know your ip
every time you reconnect so you can update it.  Under Windows 95/NT, use
winipcfg to see your IP address.
<LI>With Monolith Dynamic IP you can use vhosts.  Just check the button
"Use wild card aliases". All under your-domain.dyn.ml.org will resolve to
your ip. Now use Xitami's vhost feature to perform these tasks so you can run
two sites of one computer.
<LI>Protect yourself with a firewall. Get a windows PC firewall from Conseal
(http://www.signal9.com).  It's not freeware but is very useful.  It blocks
ICMP, UDP and some TCP connections and is configurable.  For Linux/Unix use
ipwadm.
<LI>Does your ISP disconect if you are idle?  If it does write a program that
does a certain task every 10-15 minutes. Here is a script for mirc irc client
(add this to aliases): <TT>aidle { timer 0 600 /say . }</TT>.
<LI>Other addresses to try: http://www.iceinc.net/DynamIP/, and
http://www.dynip.com.
</UL>

.FAQ w Tips for using a dial-up IP connection
<UL>
<LI>Disable dial-on-demand; this option causes the winsock library to try to
connect each time you initialise it. (In MSIE3, choose View, Options,
Connection, and clear the option 'Connect to the Internet as needed'; for
MSIE4, tell it you have a LAN connection, not a modem connection). At the
best, this option will cause you delay and expense when you try to browse
local pages. At the worst it can cause long timeouts while your browser
tries to resolve names.
<LI>If you have an early release of Windows 95, install the dial-up
networking upgrade (last seen somewhere in the vicinity of the MS ISDN
dial-up package).
<LI>Enable Xitami's server:autostart option.  Then you can start Xitami at
boot time, and it'll wait until the dial-up connection is ready.
</UL>

.FAQ w Ping will find 127.0.0.1 but not <I>myhost</I>.com
<P>Ping is a good test to see if your computer name can be translated
correctly. If you're on the Internet, you need to ask your Internet service
provider to make the necessary DNS entries. On your own PC, you can edit the
'hosts' file in the Windows directory. The file 'hosts.sam' is a sample that
you can rename to 'hosts'. Then, add your machine name and 127.0.0.1. This
may not always work; address translation may require that you are actually
on-line. For instance, I can 'ping 127.0.0.1' at any time. When I try to
'ping localhost', I get the TCP/IP dial-up dialog. I can Cancel this, and
then 'ping localhost' works. But to ping my machine name, I must be online.

.FAQ w How do I debug my Windows network connection?
<P>Windows 95 includes two tools besides ping to test TCP/IP connections:
tracerout and winipcfg. With tracert, you can follow the route for a TCP/IP
connection. Open a DOS prompt and type the command: tracert
<I>somehost.com</I>. The program shows the route to the host, up to 30 hops.
Type tracert with no arguments to get help. Winipcfg shows you your IP
address(es) and some more information about your network.  Just type
winipcfg; it's a Windows program.

.FAQ w Xitami just sits there blinking between 'Running' and 'Suspended'
<P> The server is trying to start up, but there is a problem with the TCP/IP
connection. Its default reaction prior to release 2.3c was to wait and try
again, it blinks between 'Running' and 'Suspended'. You can edit the
defaults.cfg file to include these lines:
<PRE>[server]
    autostart=0
</PRE>
which disables the autostart function. You can also check the xitami.log
file to see what error messages Xitami has logged.  If you get a message
like 'Port is already used', check that no other web server is already
running.

.FAQ w I get 'Not authorized to access this resource' on aliases
<P>For security, Xitami does not allow access through short filenames when a
long filename is defined. Without this check, it's possible to bypass
user/password authentication by using the shortened name for a long name, or
vice-versa. When you get this error, the xitami.log file will say '- request
refers to an illegal filename'. One consequence of this security check is
that if you use short filenames in your alias or webpages definition, all
requests through to those files will be rejected with a 403 error (not
authorized). Use the full long filenames in alias or webpages definitions,
or if the security issue does not bother you, set the security:safepaths
option to 0.

.FAQ w I get 'Not authorized to access this resource' on other URLs
<P>There are a number of specific reasons why Xitami may return this:
<OL>
<LI>The resource you are accessing is protected by a 'webmask' definition
which excludes your PC.
<LI>You are trying to browse a directory, but directory listings have not
been enabled.
<LI>You are trying to use an HTTP update method (PUT, DELETE, MOVE, or COPY)
on a resource which has not been authorised for this.
<LI>You are trying to run the WBA, but this has been disabled by the
security:admin option.
<LI>The URL refers to a Windows short filename when a long filename also
exists.  Xitami rejects this as being a potential security violation.
You can switch this behaviour off by setting security:safepaths to 0.
<LI>You're trying to do a HTTP PUT, DELETE, MOVE, or COPY operation, and
specified an absolute Content-Location: or Destination: URI which did not
have the same path as the request URI.  Xitami rejects this because the
authorisation was carried-out on the request URL, and using a different path
for the Content-Location: or Destination: URL would violate this.
<LI>A HTTP PUT, DELETE, MOVE, or COPY operation failed because of an access
violation at the operating system level - for instance Xitami tried to write
to a file which was marked as read-only.
</OL>
<P>In most of these cases, the reason for the error will be logged when you
enable server debugging.

.FAQ w How do I change my 'web server address'?
<P>Xitami gets its host name from the operating system - i.e. Windows. Your
IP address is not something that Xitami can change or choose. Check your
network configuration and if neccessary, ask your network administrator. The
same applies to the hostname that Xitami displays. This is the name of the
system as supplied by Windows. You can change this in the network control
panel.

.FAQ w My web server address is 'http://default/' - why?
<P>Check the TCP/IP configuration; your system is probably called 'default'.

.FAQ w Can I run RealServer on the same system as Xitami?
<P>Yes, but change RealServer's port from 80 to something else (e.g. 1024).

.FAQ w My 16-bit CGI program does not output anything
<P>You cannot correctly run a 16-bit CGI program that is on a path with
'long filenames'. For instance, if you installed Xitami in 'C:\Program
Files\Xitami', then put a 16-bit CGI into the cgi-bin subdirectory, it will
run, but its output is lost, and the browser will eventually time out and
show a message like 'Document contains no data'. The fix is to either move
Xitami to a directory like 'C:\Xitami' or create a CGI alias and put the CGI
programs elsewhere than under the Xitami root.

.FAQ w How do I use the FrontPage extensions with Xitami?
<P>The FrontPage server extensions are not documented and as far as we have
been able to test, they do not work with Xitami under UNIX or under Windows
NT.  Support for specific servers appears to be added at the whim of
Microsoft, so you may want to try writing Bill Gates a sweet letter.  We're
not in the business of reverse-engineering Microsoft software.

.FAQ w Win95 crashes with a GPF in VxD IFSMGR(01)
<P>Upgrade to a more recent version of Windows 95.  There are several known
problems with the winsock library and Win95 kernel in pre-1998 releases of
Win95.  See the question below on miscellaneous Win95 crashes.

.FAQ w Win95 crashes with a GPF in WINMM.DLL
<P>Check whether you are running Win95 with service pack 1 (also called
OSR-2.1).  In 'My Computer', select Properties, and you'll see the version
number.  If you have 950a (service pack 1), you need to upgrade to 950b.
As far as we know this is only available as an OEM CD-ROM.

.FAQ w Win95 gives me an error 10055 - Out of buffer space
<P>This can happen when you load the TCP/IP system heavily by running lots
of servers.  There is no cure except to switch to WinNT, OS/2, or Linux.

.FAQ w Win95 still gives me errors when I use Xitami
<P>Apply the various Windows 95 'service packs' and updates.  This is our
list as of August 1998:
<UL>
<LI>W95setup.exe - Windows 95 Service Pack 1, 31 Dec 95
<LI>W95oleupd.exe - Windows 95 OLE 32 Update, 24 Jan 96
<LI>mspwlupd.exe - Windows 95 Password List Update, 17 May 96
<LI>W95krnlupd.exe - Windows 95 Kernel 32 Update, 29 Jul 97
<LI>W95ws2setup.exe - Windows 95 Windows Sockets 2 Update, 19 Feb 98
</UL>

.FAQ w Xitami crashes as soon as I try to start it
<P>Check your clock; Xitami is known to crash if the clock is set to later
than the year 2038.

.FAQ w When I access my local site, it takes 3-4 minutes to load!
<P>Change the Internet Control Panel not to autodial. (In MSIE3, choose
View, Options, Connection, and clear the option 'Connect to the Internet as
needed'; for MSIE4, tell it you have a LAN connection, not a modem
connection).

.FAQ w Why does Xitami use all my CPU?
<P>You probably set the priority to 'High'.  This is excellent if you do not
use the system for anything else, but is not a good idea if Xitami shares
the system with other users.  At high priority, Xitami will consume most of
the CPU time during large downloads.  We do recomment High priority for a
dedicated web server, and 'Normal' for a mixed-use system.

.FAQ w When I run a CGI, I get a blank screen for several seconds
<P>Check that you've not configured your MS-DOS command window to appear
full-screen. When the Xitami web server launches the CGI program, it does so
in a way that says don't create a console window for the application.
However, if the command window agent is configured for full screen, it
switches first to full screen before making the test for putting up a
console window which causes the blank screen to appear (sometimes with a
blinking cursor). There doesn't appear to be a way of preventing this
behaviour programmatically.
<OL>
<LI>Open the Start menu and choose Settings, Taskbar... and Start Menu
Programs. Click on the Advanced button and find the 'MS-DOS Prompt' object
in the Programs folder.
<LI>Right mouse button click on the 'MS-DOS Prompt' object and choose the
Properties option.
<LI>Select the 'Screen' tab and set the usage to 'Window', not 'Full
Screen'.
</OL>

.FAQ w How do I reinstall just one file from the Xitami kit?
<P>Use unzip (WinZip, etc.) on the installation .exe file.  This file is
compatible with the zip format.

.FAQ w Xitami is reporting errors on its control panel
<P>Xitami reports 'Not Found', and any other 3xx, 4xx, or 5xx return
code as an error on its control panel.

.FAQ w Can I run multiple instances under Windows?
<P>You can run multiple instances of xiwin32.exe or xidos32.exe in separate
directories (each with its own web space, config files, etc) and specify the
portbase either on the command line or in the defaults.cfg file.

.FAQ w IE sometimes fails with multiframe documents
<P>Microsoft IE 3.0 has occasional problems mixing keep-alive connections
with highly-framed documents. The symptoms are that the last frames will not
display. IE opens a connection, asks for a document, but prematurely closes
the frame. Workarounds: use Navigator, a more recent version of IE (we
assume the problem may be fixed), or switch-off keep-alive if you are using
heavily-framed documents.

.FAQ w Windows says 'URL.DLL not found' when I choose 'Setup'
<P>URL.DLL is a Windows DLL that is installed as part of TCP/IP networking,
and allows you to double-click a .htm file to launch a browsers. Xitami uses
this technique to launch a browser when you click on the 'Setup' button. You
can either try installing TCP/IP networking (again) or start a browser and
enter the URL 'http://127.0.0.1/admin' yourself.  This file may only be on
the OSR/1 release of Windows, or may be supplied with MSIE or Navigator 4.

.FAQ w Why is Windows ignoring my changes to the hosts.sam file?
<P>This file must be called "hosts", without an extension.

.FAQ w What's CGI/Win?
<P>The CGI/Win protocol (which Xitami does not support) uses a mechanism for
transferring the stdin/stdout and environment data that is different from
the normal CGI manner. It's meant to support languages like Visual Basic
that do not have access to stdin/stdout streams.

.FAQ w Do you know of a good free proxy server for Windows?
Louis C. Lupin says: VSocks is a freeware Socks 4 proxy. It's easy to set-up
and use.  See http://www.pscs.co.uk/software/support/vsockslight.html.

.FAQ w Do you know of a good free e-mail server for Windows?
<P>Thomas Schroeter says: On www.freeware.com, I found a very good server
(VPOP3) which includes POP 3, SMTP, finger connections, forwarding accounts
and autoresponders. The program has a lot of settings (user accounts,
headers, listserver, logging, error reporting, ...). It runs with Windows 95
and it's very fast. Now, I'm using Xitami and VPOP3 together - both programs
are working very well in my local network.
<P>Justin Scott says: Try the freeware version of SLMail .. it supports
upto 6 users, and an autoresponder. It's a commercial-grade e-mail server
for Win95/NT. If you want more than the 6 users available in the freeware
version, you'll have to get the standard edition for win95 (SLMail v2.6),
which runs for about $200 (go with the freeware). It is available from
Seattle Labs at www.seattlelab.com. Hope you find it useful (I know I do :).
<P>Ian Hayes says: For Win95/NT you can get a nice little SMTP server called
JSMail at http://j-bg.demon.co.uk It does SMTP, POP3, finger, autoresponders
and you can reject mail based on Received: lines, source or subject words.
Reverse DNS, anti-relay, and RBL support (for those interested). Of course,
you'll still need a domain, and when mailing to certian domains, an MX
record. Monolith provides both for free. You can run it as a service or from
the command line. Takes up very little resources.

.FAQ w Do you know of a mail client for Windows?
<P>$(*sendmail=A free mail client for Windows) is available from from the
iMatix website.
<P>David Lau also says: wSendmail is a tiny Win32 utility that sends e-mails
from the command line - or you can use the program directly as a standard
CGI-BIN app. In CGI-BIN mode it will pick the data from your HTML Forms and
send it all as e-mail to whoever you choose. There also is a Perl .cgi script
from Jeff Marriott/NZ that demonstrates and uses wSendmail. This can be useful
for experienced UNIX Perl programmers when migrating to Win95/NT.
wSendmail is located at
<A HREF="http://www.jgaa.com/cgi-bin.htm">http://www.jgaa.com/cgi-bin.htm</A>
<P>A shareware alternative is WindMail. See
<A HREF="http://www.geocel.com/">http://www.geocel.com</A>

.FAQ w Any hints for boosting Xitami's performance?
<UL>
<LI>Set virtual memory yourself.  If Windows handles this, the swap file
changes constantly, thus slowing your system.  You should set both the
min/max virtual memory to 1 1/2 to 3 times the physical memory in your
computer.
<LI>Create a RAM disk for Perl if you use a lot of CGIs. A RAM disk is fast,
and reloaded at boot time. You should use RAM disks for read-only data only.
To put Perl onto a RAM disk, use a disk with 512-byte sectors and about 1.2
Mb space. Use a line like this in config.sys:
<PRE>DEVICEHIGH=C:\WINDOWS\RAMDRIVE.SYS 1200 512 /E
</PRE>
where 1200 is the size and 512 is the sector size. Windows will attach the
next available free drive letter to it (e.g. 'R:'). If you want to load Perl
onto the RAM disk automatically, at boot time, add some commands to your
autoexec.bat:
<PRE>md r:\perl
xcopy32 e:\perl\bin\perl*.* r:\perl
xcopy32 e:\perl\bin\cmd*.* r:\perl
PATH %PATH%;R:\PERL
set PERLLIB=E:\PERL\LIB
</PRE>
This assumes that you leave the Perl libraries on the hard disk (here, E:).
If you want a full-blown Perl on a RAM disk, you'll need about 6Mb of space.
<LI>Create a RAM disk for commonly-used web pages and graphics.
<LI>In the Win95 System control panel, under Performance, File System, set
the 'Typical Role' to 'Network Server'.  We have reports that this improves
system performance under heavy loads.
</UL>

.FAQ w Why does Win95 insist on running 'service.bat'?
<P>Xitami installs this batch file when you install the Xitami Console
version as a Windows 95 service. The service.bat file simply sets the
correct working directory, then starts Xitami. To disable this, you can edit
service.bat to remove the call to xidos32.exe. You can also remove the entry
for service.bat in the registry; run regedit and find the key
SOFTWARE\Microsoft\Windows\CurrentVersion\RunServices. You'll see a
definition for service.bat, which you can delete.

.FAQ w I installed MSIE 5 and uninstalled it, and now Xitami crashes -
whenever I try to start it up.
<P>Yes, indeed.  Well, what do you expect when you install and then remove
half of your operating system?  Probably the only cure is to format the hard
drive, and install a clean copy of Windows 95 or 98.  Maybe reinstalling
MSIE 5 will help.

.FAQ w I'd like to run an abitrary Windows program from a browser
<P>Okay, but be warned that this opens your system to arbitrary abuse. You
cannot launch a Windows program directly, since a CGI program runs as a
hidden console (DOS) process. However, it's trivial via a small batch file,
which itself starts the Windows program. For instance, here's a batch file
that starts any program at all using the CGI argument, e.g.
"/cgi-bin/run?notepad", where run.bat contains just 3 characters: "@%1".

.FAQ w Can I stop Xitami from the command line or a batch script?
<P>You can use the wmkill.exe program supplied with Xitami. Wmps.c and
wmkill.exe were written by Thomas Grobicki of Avilar Technologies to perform
the functions of the Unix ps and kill commands for Windows 95/98 and NT. To
kill Xitami, use this command:
<PRE>wmkill -exact -titles -icons "Xitami Web Server"
</PRE>
To see the syntax for wmkill or wmps, type 'wmkill -help' or 'wmps -help'.

<HR>
<H3>Windows NT Questions</H3>

.FAQH n My 16-bit CGI program does not output anything
<P>Under Windows NT, you cannot run 16-bit CGIs at all, due to a limitation
of the Windows 32-16 bit interface. A simple workaround is to use a batch
file like this:
<PRE>@echo off
mycgi.exe &gt; temp.tmp
type temp.tmp
</PRE>

.FAQ n The Xitami service can't access a network drive
<P>The problem is one of security; the service runs under the account
'system' by default, and this may not have access to your network drive. In
the Services control panel, you can change the start-up options for the
Xitami service so that it logs-on as a user with the necessary privileges.

.FAQ n The Xitami service fails to start, saying 'Access is denied'.
<P>You should install Xitami when logged-on as administrator. You can fix
this quite simply. In a DOS box, go to the Xitami directory and type
'xiwinnt -u' to uninstall the service. Now log-on as administrator and use
'xiwinnt -i' to re-install the service. If you still have the problem,
de-install Xitami completely, and re-install after logging-on as
administrator.

.build anchor start_service
.FAQ n The Xitami service still fails to start!
<P>Search for the string "xiwinnt.exe", which may appear as follows:
<PRE>KEY         VALUE
ImagePath   c:\program files\xitami\xiwinnt.exe
</PRE>
The space in 'program files' is what's bothering NT. Change the key data to
this:
<PRE>KEY         VALUE
ImagePath   "c:\program files\xitami\xiwinnt.exe"
</PRE>

.FAQ n Can I restart the Xitami service from a batch file?
<PRE>net stop xitami
net start xitami
</PRE>

.FAQ n How do I remove the Xitami icon in my control panel area?
<P>When you installed the Xitami service, it installed the Xitami control
panel file in the Windows System directory. Delete the file called
'xiwinntc.cpl'. If you install and uninstall the NT service version, this
file gets left behind due to an access conflict (which we have not
figured-out how to resolve). (Details: if you use the 'Add/remove software
components' control panel option, then the Xitami CPL is loaded, and can't
be deleted...)

.FAQ n I defined a new VH and now my NT service won't run
<P>Check that the specified .aut file exists, even if it's just empty. Check
the Xitami log files for error messages. If in doubt, run the console
version to see what error message is being produced.

.FAQ n When I try to install Xitami on NT 4 I get a dialog box that says -
"Corrupt installation detected"
<P>Could be that the install .exe has indeed been corrupted. Try downloading
it again and trying again. If this fails you could be seeing a problem with
the 16-bit subsystem in NT. Did you install any service packs? (I think SP2
or 3 fixed this problem...) In any case you can easily install from the .zip
file; if you're using the service version, install it by copying the .cpl
file to the Windows system directory, and run 'xiwinnt -i'.

.FAQ n Can I use 'srvany' with Xitami?
<P>Yes, this is a good way to run the console version as a service. You can
get srvany from the NT resource kit, or you can download it from MSDN (the
Microsoft Developer Network web site).  The following tips were provided by
Ignacio "Iggie" Bustamante.
<OL>
<LI>Copy SRVANY.EXE and INSTSRV.EXE to your NT system directory and install
it as a Windows NT service for Xitami, for example:
<PRE>instsrv Xitamiweb c:\winnt\System32\srvany.exe
</PRE>
This will set the preliminary entries for a service named "Xitami" (choose
your own name).
<LI>Specify the application to start and its parameters:
  <UL>
    <LI>Run the Registry Editor (REGEDIT32.EXE), and open the registry at
    HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Xitamiweb.
    <LI>Create a "DependOnService' value of type REG_MULTI_SZ and specify
    the services that should be started before launching Xitami; mamely, Tcpi
    and Afd. For example:
    <PRE>DependOnService: REG_MULTI_SZ Tcpip Afd</PRE>
    You will be presented with a multi-entry screen.  Just hit [Enter] after
    each entry.  You can add other services here if you wish.
    <LI>Create a 'Parameters' key.  Under the Parameters key, create an
    'Application' value of type REG_SZ and specify the full path of the Xitami
    executable (including the extension), for example:
    <PRE>Application: REG_SZ: C:\Xitami\Xiwin32.exe</PRE>
    <LI>Additionally, under the Parameters key, create an 'AppDirectory' value
    of type REG_SZ and specify the current directory to use for Xitami, for
    example:
    <PRE>AppDirectory: REG_SZ: C:\Xitami</PRE>
  </UL>
<LI>Under Settings-> Control Panel-> Services, select Startup for Xitami.
Set Startup Type:  "Automatic", set Log On As: Select "This Account", and
enter the appropiate Username and Password for an Administrative account.
</OL>
This should do it.  Note that NT will report that the service was started
successfully even if there was an error.  Always test Xitami after changing
its configuration by running it as a console program (with the service
stopped).  When the service has started, test the server and check its log
files for possible errors.

<HR>
<H3>UNIX Questions</H3>

.FAQH u Xitami does not build on my XXXX system
<P>Xitami should build on: IBM AIX, Digital UNIX, HP/UX, Sun Solaris, SCO
OpenUNIX, SCO OpenServer, FreeBSD, NetBSD, Sinix, and of course Linux.
Anything else is unexplored territory, and that includes the future, since
some of these systems are starting to come without an ANSI C compiler as
standard.

.FAQ u I need to search /usr/src/linux/include/ at build time
<P>The Xitami build uses a script, 'c', that lets you specify additional
compiler options by setting the CCDEFINES variable. So, to specify an
additional include directory, use shell commands like this before starting
xibuild:
<PRE># CCDEFINES="-I/usr/src/linux/include"
# export CCDEFINES
# ./xibuild
</PRE>

.FAQ u Can I run Xitami from my ISP telnet account?
<P>Yes, if you have access to an ANSI C compiler. Build Xitami as usual, and
run it with a command like this: 'xitami -b 5000 -s'. Avoid port 8080 which
is often used for proxies. You may also find that the ISP kill all
long-running processes at regular intervals (e.g. midnight). The -s switch
runs Xitami in the background; it's a bit cleaner than using 'nohup'.

.FAQ u Does Xitami support .htaccess with per-directory access control?
<P>No, Xitami uses its own .aut files for access control.

.FAQ u How can I run Xitami and have it listen on port 80 under Unix?
<P>Under Unix, only processes that are running as root are able to listen
for new connections to TCP/IP ports less than 1024, including the well
known HTTP port 80.  So for Xitami to listen for connections on port 80
it needs to be run as root.  And of course there must not be another web
server running that is already listening for connections to port 80.
There are three ways that you could do this:
<OL>
<LI>Log in, or su, to root, and start up Xitami.
<LI>Have Xitami started during the startup scripts when the machine boots.
<LI>Make Xitami "setuid root".
</OL>
Which is best?  It depends.  (In the real world the answer is always "it
depends"; why do they never accept that in exams?)
<UL>
<LI>If you just want to run Xitami occassionally on your own system then
starting it up manually by logging in as root, or su'ing to root, is the
best idea, because it ensures only people with the root password can run
programs as root.
<LI>If you want Xitami running all the time on your Unix system then having
it started automatically from the boot scripts is best, and by default
it will then start running as root, letting it listen on port 80.  
Exactly how to set this up varies from Unix system to Unix system, so
look in the documentation for your Unix system.
<LI>If your Unix system is only used by you, or just by people that you
trust, and you don't want Xitami running all the time, and you don't
want people to log in (or su) to root, then setting Xitami "setuid root"
might be a suitable option for you.
</UL>
To make Xitami "setuid root" after compiling it:
<PRE>% su
# chown root xitami
# chgrp www xitami
# chmod 4770 xitami
# exit
%
</PRE>
where "www" is a Unix group that contains the users that should be able to
start Xitami. Then the users that can run Xitami will be able to start it
running as root, just by running it.  If you do decide to set Xitami "setuid
root" beware that this is a potiental security risk, because it means that
users without the root password can start the server running, and if they
discover a bug in Xitami or a program run by Xitami they may be able to get
root access to other things on the machine.
<P>iMatix does not recommend setting Xitami "setuid root" except in
situations where only people who can be trusted to run any program as root
have access to log in to the machine, such as a personal Unix box. Even in
this situation the use of a program like "sudo" should be investigated as a
possible alternative.  Please also take a look at the next question
concerning security aspects.

.FAQ u What are the security implications of running Xitami as root?
<P>From Xitami 2.4b onwards it has been possible to request Xitami to change
to a different user id and group id from the one that it was started in, for
most of the time it is running.  To do this in the [Security] section of
defaults.cfg put:
<PRE>[Security]
    setuid=1
    setuid-user=www
    setuid-group=www
</PRE>
assuming you have a "www" user and a "www" group (this is a common setup for
Web Servers, but not universal). The default for setuid-user is "nobody" and
the default for setuid-group is "nogroup", but using "www" for user and
group is better if you have them available (or can add them).  The user and
group privileges you choose will have to be sufficient to allow Xitami to
write to all the log files it needs, and run the programs it needs (eg,
cgi-bin programs).
<P>When [Security] setuid=1 is used Xitami changes the effective user id and
group id to the ones specified. However it also retains the privileges with
which it was started (commonly in this situation root privileges), in order
to be able to reopen the TCP/IP port it is listening on and so on.
<P>Currently Xitami runs cgi-bin programs with the same privileges as it is
running itself.  This means that when [security] setuid=1 is used, cgi-bin 
programs will be started with the effective user and group set as
configured in the [security] section, but still with the user id with
which it was started saved away (typically the "root" user id).
<P>If Xitami is started as root (or has been "setuid root" (see above)), 
and using [security] setuid=1 a malicious cgi-bin program could recover 
the saved root privileges and then do nasty things.  It also means that 
if someone finds an exploitable bug in your cgi-bin program, they might 
be able to trick the program into recovering the root privileges and
running a program as root.  All of this means that, as always, you need 
to be especially careful about checking cgi-bin programs for security 
issues.
<P>Work is under way adding the ability for Xitami to run cgi-bin programs
with different privileges from the ones which it is running as, including
permanently discarding any saved privileges, which will further reduce this
risk. This enhanced version will also include the ability to run the cgi-bin
program with a different "root directory" from the one that Xitami is using,
for additional security.

.FAQ u What's the best Linux operating system? RedHat, Debian, FreeBSD...?
<P>Ewen McNeill says: Firstly, FreeBSD isn't a Linux operating system; it's
a BSD-derived operating system. I haven't used it myself, but a number of
large sites do use it and seem to be quite happy with it (eg, cdrom.com).
Earlier versions of Xitami compiled and run under FreeBSD, but I'm not sure
if anyone has tried with recent versions -- it should either run or be
pretty simple to fix so it'll run.
<P>Of the rest (RedHat, Debian, OpenLinux) I wouldn't expect much difference
between them in terms of ability to handle load, etc. (Same for Slackware,
Suse, etc as well.) They're all based around the same Linux kernels, and
that (along with the web server) are the main things that'll affect
stability, speed, etc (given the same hardware).
<P>The main reason for choosing between the difference Linux distributions
is the packaging of software they give you. Both RedHat (which uses RPM) and
Debian (which uses .deb packages) have flexible package managers which will
let you automatically install pre-compiled software, and make sure that any
other programs that are needed to use them get installed too. RedHat has
more GUI administration tools, but I've heard that it's more fussy about you
using them too (that is, editing files by hand doesn't work so wel). Debian
mostly has command line admin tools, which is good if you're used to that
sort of thing (I like it). OpenLinux, Suse, etc, I don't know that much
about -- but Suse is apparently very popular in Europe, and LinuxJournal are
offering a copy of it with new subscriptions at present (at least they were
in July). (I've installed some Slackware systems in the past and having
tried Debian wouldn't switch back. Slackware seems to handle the basic
install okay, but it's not so good on helping you keep your system up to
date; Debian is very good at helping you keep your system up to date.
<P>Personally my systems are all Debian systems -- but I like the command
line tools, and the (dpkg) package manager, and tend to install systems
without X.

.FAQ u Why does the documentation always use DOS-style slashes?
<P> All recent versions of Xitami treat \ and / as identical, so the
distinction is purely for the benefit of the server administrator. (Actually
there is one exception, which is the \\ used to identify a remote file
system under Windows. This must be entered as \\, not //.) We generally aim
the documentation at Windows users, since these make-up the large majority
of our user base. We also expect that Unix users are able to make the mental
translation from \ to /.  Use / on Unix and either / or \ on Windows.

<HR>
<H3>OS/2 Questions</H3>

.FAQH o Xitami does not start, and 'ping 127.0.0.1' does not work
<P>Check the interfaces and routing with "netstat -r"; a "127.0.0.1"
host with the interf(ace) of "lo" ought to be present if it is going
to work.  The following command ought to establish a loopback
connection: "ifconfig lo 127.0.0.1 up".

.FAQ o Xitami reports 'too many open files'
<P>Add this environment variable definition 'SET EMXOPT=-h120' to your
config.sys.  However, note the following point.

.FAQ o Xitami aborts when my site is very heavily used
<P>EMX appears to have a fixed limit of 40 open sockets; when you hit this,
programs start to abort or freeze. It's very unusual to reach 40 open
sockets, but it is possible. You can limit the number of HTTP and FTP
connections for your server, remembering that each FTP connection uses two
sockets (one control, one data). You should also allow 5 sockets for use by
Xitami itself.

<HR>
<H3>Application Programming Questions</H3>

.FAQH c How do I write CGIs?
<P>There must be hundreds of places to get a good answer to this question.
Look at the example programs in the cgi-src directory.

.FAQ c What's a good source for CGI programs?
<P>Try <A HREF="www.cgi-resources.com">www.cgi-resources.com</A>.

.FAQ c When I run a CGI program, I don't get any response
<P>Run your CGI in a DOS box and check first that it actually runs without
errors.  Then, check that whether it prints a first line starting with
'HTTP/'.  If it does this, it must also generate a correct 'Content-Length'
header.  This is vital if the server uses Keep-Alive connections, which is
the default configuration.  You can disable Keep-Alive, but this makes
things work slower.  The best solution is to <I>not</I> produce neither the
'HTTP/' first line, nor the 'Content-Length' line.  These just cause
problems.

.FAQ c Does Xitami have an API like ISAPI or NSAPI?
<P>We support WSX and LRWP.  These are portable protocols: WSX lets you
build plugins that are linked into the server; LRWP lets you build external
peer processes that handle specific URLs.  WSX programs are written using
the iMatix SMT library, in C.  LRWP programs can be written in C, Java,
Python, Perl, or any other language that supports sockets.

.FAQ c Would you recommend CGI or WSX for a simple e-mail application?
<P>CGI is much simpler.  There is lots of information about CGI on the Net.

.FAQ c How do I tell Xitami which files are CGI programs?
<P>With some servers you have to configure the server to recognise executable
files.  For instance with Apache, one uses the AddHandler directive to say
that a filename extension should be treated as a CGI script.  For example
"AddHandler cgi-script .cgi".
<P>Xitami, in contrast, will execute anything it considers executable and
which is in a CGI binary directory. Special directives are not needed. Under
Windows, files with extension .exe or .com or .bat are executable by
default. Otherwise, files that start with #! and the name of an interpreter
are executable through the interpreter (typical example: Perl scripts).
Otherwise, files starting with the magic letters 'MZ' are also considered to
be executable. Under Unix, executable files are de-facto marked by a
protection bit, which makes things a lot simpler.
<P>You can add support for special kinds of CGIs by using the [Filter]
configuration section: this allows you to execute a file by passing it to
some interpreter.

.FAQ c How do I debug CGI programs?
<P>In many cases you can run the CGI program from the command-line,
providing test data to the program using the '<' redirector. It's also
possible to use a debugger. For example, under Windows I use the MSVC
compiler for C CGI programs. To set a debug breakpoint I insert a call to
DebugBreak() at some appropriate point in the program. This launches the
debugger and I can then step through the code. If you use this technique, be
sure to set the cgi:timeout high enough so that Xitami does not think your
CGI program has started to loop (it will then kill the process, and leave
you with a very confused debugger).

.FAQ c Can you give me a checklist for installing Perl for Windows?
<P>Okay, here goes:
<OL>
<LI>This applies to Windows NT, Windows 95, and Windows 98.
<LI>Get Perl for Windows from $(*perl=activestate.com).
<LI>Follow the installation instructions and install into a directory like
C:\software\perl.
<LI>Using the above example, make sure that the PATH setting in your
autoexec.bat includes the directory C:\software\perl\bin.
<LI>Also, make sure that the PERLLIB environment variable is set in your
autoexec.bat to 'PERLLIB=.;C:\software\perl\lib'.
<LI>Reboot, then go to the Xitami cgi-bin directory and try 'perl
testperl.pl'.  This should print 'Hello World'.
<LI>Now make sure that the CGI scripts you want to run start with the magic
line '#! perl', or '#! /usr/bin/perl' or '#! C:/Software/perl/bin/perl' or
something else appropriate.
</OL>

.FAQ c Why does my Perl CGI not run?
<P>This is a check list that may help you.
<OL>
<LI>Did you install Perl?  (Yes, some people do forget this.)
<LI>Can you run the CGI script from the DOS command line using the syntax
'perl <I>scriptname</I>'?
<LI>Can you run the standard http://127.0.0.1/cgi-bin/testcgi program?
<LI>Can you run a simple script like this:
<PRE>#! perl
print "Hello World!";
</PRE>
<LI>Does your CGI script start with '#! perl'?
<LI>If you're running a 16-bit Perl, make sure Xitami is not in a subdirectory
with long filenames (E.g. C:\Program Files\Xitami) or the CGI won't work.
Under NT, forget 16-bit Perls completely.
<LI>Finally, set the cgi:debug and server:debug options to 1. This will
leave you with a couple of files in the temp directory- tempxxxx.cgo and
header.log - that contain the actual CGI output and the headers sent back to
the browser.
</OL>

.FAQ c How can I find-out what directory a script is called from?
<P>Here's a handy Perl snippet. It will dump the values of all environment
variables. Use it after you have output the usual http/html document
headers.
<PRE>print map("&lt;pre&gt;$_ = $ENV{$_}\n&lt;/pre&gt;", sort keys %ENV);
</PRE>
You'll find the values quite instructional, and you may even find a
variable that you can use to solve your problem.

.FAQ c Can I restrict the commands that a Perl CGI uses?
<P>This question was posed to Gurusami Sarathy, and he most graciously
offered the following reply:
<P>"The answer should be simple: just don't use Windows 95 if you want
security. I'd recommend some OS that understands users, permissions, etc.
Try Linux (I won't recommend NT, because NT makes for a rather inefficient
webserver).  That said, you may be able to disallow operators of your
choosing with the Safe module. But its usage is not for inexperienced
users."

.FAQ c Every time my SSI page uses #exec, Xitami scans the floppy drive!
<P>This can be caused by virus-checking programs.  Disable floppy scans in
the virus-checker setup and check that the A: drive is not in your path.

.FAQ c When I try to run a Perl CGI, my browser says 'Save to disk?'
<P>You must let Xitami know that the script is executable, rather than a
text file to be sent to the browser.  Make sure the script starts with
the magic '#! perl' line.

.FAQ c A require() or use() command in my Perl CGI script fails
<P>This is a problem caused by the working directory used by the Perl
interpreter.  First-off, make sure the CGI working directory is "-" (which
means the script's current working directory).  If this still does not work,
you have to modify the CGI script to explicitly set the correct working
directory.  Issue the following command, once, near the beginning of the
main Perl function and be any "require()" or "use()" commands:
<PRE>chdir ("c:/Xitami/cgi-bin/my_perl_script_dir");
</PRE>
<P>Use an absolute path, and substitute your own path, of course.

.FAQ c I get "Can't locate ./lib/cgi-lib.pl in @INC at C:\Program
Files\Xitami\cgi-bin\test\hello.cgi line 3."
<P>You have probably a problem with the PERLLIB setting.  It must include
the directories where require'd files are found.  Alternatively, you may be
able to fix this by running the script in the correct directory (set the CGI
workdir to "-").  To sort this problem out, make a CGI script that creates a
small file, then look for the file (this tells you where the script is
running).  E.g.:
<PRE>open (FILE, ">myhint");
print FILE "This is my working directory";
close (FILE);
</PRE>

.FAQ c I get "Document contains no data" when running a Perl CGI
<P>This message generally means "the Perl script didn't compile", which
in turn means there was a bug in your script.  Two things that might help:
<OL>
<LI> If you're using CGI.pm (recommended for Perl CGI scripts) then try
running it from the command line (CGI.pm will prompt for the script input,
which is very handy).
<LI>When you've run the CGI script, have a look in the Xitami cgi error log,
which is cgierr.log by default. If your script fails to compile, then you'll
get error messages here.
</OL>
You can also try putting "warn" messages in your Perl script, eg:
<PRE>warn "About to try ... \n";
</PRE>
and they'll appear in the CGI error log, so long as the script compiles and
runs up to that line.

.FAQ c How does Xitami handle its CGI stdio?
<P>Xitami creates temporary files called 'pipe' something, and connects
these to the stdin and stdout streams for the CGI subprocess. If there is
something crooked in the subprocess itself, these can get lost. For instance
if it's a 16-bit program under NT. The CGI_STDIN and CGI_STDOUT environment
variables are provided for languages like BASIC which really can't access
the stdio. Then it's possible to switch-off Xitami's piping (set cgi:stdio
to 0), and in the program, read and write the stdin and stdout files
directly.

.FAQ c Why does my Perl 'flush' command not work under Xitami?
<P>This command is a simple "$| = 1;" issued somewhere at the beginning of
the script, and is supposed to send (flush) to the browser any and all
output (print statements) as they are being issued. Because Xitami does not
work with streaming output, for now. It buffers all CGI output until the CGI
ends, then sends it to the browser. We're considering alternatives to this
model to allow streaming output.

.FAQ c My BASIC .exe CGI does not work
<P>Some languages do not write their output to the stdout device, but
directly to the BIOS. Try 'myprog > xxx' and if the output is still being
sent to the screen, consult your documentation. At a pinch, use the
CGI_STDOUT environment variable to determine the name of the expected output
file, and write directly to that file. If you do this, makes sure you set
cgi:stdio to 0.

.FAQ c How do I add support for PHP3?
<P>To install PHP3 support, add an entry to the [Filter] section of the
config files, e.g.
<PRE>[Filter]
  .php=c:\php3\php3.exe

.FAQ c Why do I get 'HTTP/1.0 502: Service temporarily overloaded'?
<P>Increase the cgi:timeout value. Your CGI is taking so long that Xitami
reckons it's looping with intent, and kills it (after giving it the
customary fair trial, of course). ('Looping with intent' is a Legal Term
that means almost exactly, but not quite totally, the opposite.)

.FAQ c Why is the REMOTE_USER not correctly filled-in?
<P>Make sure your directory is password-protected.  You can put the CGI
script at any level under a directory like 'private', so long as the URL
contains '/cgi-bin' somewhere.  If you access a CGI without an
authentication check, the REMOTE_USER will contain arbitrary junk; typically
the last user id that was used to access a protected resource.

.FAQ c Why is the HTTP_REFERER not correctly filled-in?
<P>Variables starting with HTTP_ come from the browser (unless you changed
something you were not supposed to).  For instance, the browser will usually
provide its own name rank and serial number in 'HTTP_USER_AGENT'.
HTTP_REFERER is filled-in if you choose a URL from another page, but not if
you type it by hand.

.FAQ c When I generate images in my CGI program, LF becomes CRLF!
<P>By default the stdout for a program is handled as a text stream.  This
is easy to change.  First write the HTTP header, then (in C):
<PRE>setmode (fileno (stdout), O_BINARY);
</PRE>
In Perl, this should work:
<PRE>open (BLOCK, '>'.$ENV {'CGI_STDOUT'});
binmode BLOCK;
print BLOCK $binbuffer;
close BLOCK;
</PRE>

.FAQ c Must I use /cgi-bin in CGI URLs?
<P>You can redefine this by changing the server:cgi-url option. As
usual, modify this in defaults.cfg, not xitami.cfg.

.FAQ c I want to put some CGIs in another directory, e.g. /htdocs/myscripts
<P>Define a $(*cgi-alias=CGI alias).

.FAQ c How do I use a CGI program as a default page?
<OL>
<LI>Add the index.cgi file to the list of default pages.
<LI>Make sure that index.cgi is 'executable'.
<LI>Define the server:cgi-url as "/".
<LI>Define the server:cgi-bin directory to be same as server:webpages.
<LI>Define cgi:mixed-url to be 1.
<LI>Define cgi:dirlist to be 1 if you want directory listings to be enabled.
</OL>

.FAQ c How do I set-up a web site counter?
<P>Use a web site counter like
<A HREF="http://www.geocities.com/SiliconValley/6742">this one for
Windows 95</A>.

.FAQ c How do I make a CGI file executable for DOS?
<P>There is no equivalent to the UNIX 'chmod' command under DOS/Windows.
After considering various techniques (e.g. looking at the extension), we
decided that the UNIX execve technique was the simplest; i.e. the script
specifies what interpreter to use. Actually if you want to see the code that
decides this, look at the SFL code in sflfile.c -- file_is_executable ().
The UNIX technique works for Perl, Awk and presumably shell scripts, and
with a little tweaking, for Rexx too. Finally, we take a peek at the file
contents if necessary. Under MS-DOS & Windows, a real executable starts with
'MZ'. That's sufficient for Xitami to try to run the thing. Conclusion:
executable files can take any extension and work with pretty much any
processor/interpreter.

.FAQ c I tried compiling testcgi.c but it wants sfl.h?
<P>The example CGI programs in C use the iMatix SFL library.  This is
included in the Xitami source kit (since Xitami also uses it).  You can
<A HREF="http://www.imatix.com/html/sfl">download it</A> from our site.

.FAQ c How do I use an URL like '/cgi/script'?
<P>You can set this option in the [Server] section of custom.cfg, in
the cgi-url option. Try this:
<PRE>[Server]
    cgi-url=/cgi
</PRE>

.FAQ c My CGI '/somedir/cgi-bin/script' does not work
<P>If you use /cgi-bin in the URL below the top level, you must enable the
cgi:wildcard option.

.FAQ c Can I redirect users to different pages using the .aut file?
<P>No, not without CGI programming. But it's quite simple to do in Perl or
C: you test the user name (forget the password - it's already been
validated) and return a header that redirects the browser to the actual
page: "Location: /somedir/somefile.htm". Use the environment variable
REMOTE_USER, which contains the user id.

.FAQ c Can I trap the user id to subset data?
<P>In a CGI you can use the user name to subset data: you could issue a
redirection to the appropriate file, e.g: Location: filename.htm depending
on the value of the REMOTE_USER environment variable, or use this variable
to determine what data to read from a database.

.FAQ c I want to limit CGIs, but not HTML pages, to certain IP addresses
<P>Add this to the authentication file:
<PRE>[/cgi-bin]
    webmask=..whatever...
</PRE>

.FAQ c How do I allow CGIs in any regular HTML directory?
<P>Set the server:cgi-url option to "/", and the server:cgi-bin option to
the same as the server:webpages option. Make sure cgi:mixed-url is 1.

.FAQ c How do I write a shopping-card CGI program?
<P>You should ask this kind of question on CGI or HTTP newsgroups, and
research the Internet for answers. The simplest way to do this is to use
cookies, or to use URL arguments (?xxxx) to know the 'state' for each user.
If you want to maintain long-term state for users, it's best to force them
to logon (and thus identify themselves) each time they come back to the
site.  See the question on $(*user_authentication=CGI user authentication).

.FAQ c How do I access ODBC databases under Windows?
<P>From Perl, you can use Win32::ODBC, ActivePerl for Win95, and the DCOM
driver. One report: "It worked very well - I was able to duplicate in a
matter of hours what my buddy took almost a week to do with MS software, and
the result was faster and looks better!"

.FAQ c My CGI program can't connect to ODBC under Windows NT; it works -
from the command line
<P>Under NT, each login ID has its own set of ODBC definitions. The reason
your program works from the command line is that it runs under your current
login ID, which apparently has a proper ODBC definition to utilize. The
Xitami web server runs as an NT service and does not use your login ID by
default. Xitami and all CGI programs launched from within it assume the
login ID assigned to Xitami at start up. This can either be a system ID,
which is typical, or a specified user ID, which requires extra configuration
by an NT administrator.
<P>The solution is to have an NT login created specifically for Xitami. It
need only have the standard User privileges (assuming your NT environment
uses the default definition of "User"). After this login is established, one
must use it to login and then define a proper ODBC connection. Next, Xitami
must be made to start as NT service using this new login instead of a system
ID. Since this new login ID does not (or at least should not) have
administrative rights, one will have to logout and log back in as an
administrator to change this setting, which is made from the Services
component of the Control Panel. Now when CGI programs run, they will do so
under the new login ID, and will consequently have access to the new ODBC
definition.

.FAQ c When I run a heavy ODBC CGI program, I get "Server Overloaded"
<P>Your problem is that the CGI program runs 'too long' and is then
killed by Xitami.  Increase the CGI timeout (which is specified in
seconds).

.FAQ c My images don't load when my CGI uses extra PATH_INFO
<P>When you run a CGI that contains extra path information (the PATH_INFO
environment variable), images on pages generated by the CGI will fail to
load if they're referred-to by relative URLs.  For example, if the CGI URL
is http://my_domain/cgi-bin/my_prog.cgi/extra-blah, and you refer to an
image "pic.gif", the browser will ask for a URL called:
http://my_domain/cgi-bin/my_prog.cgi/extra-blah/pic.gif, which presumably
won't work.  You can check this by enabling server debugging and looking at
debug.log.  There are two solutions:
<OL>
<LI>Use absolute references for the image files (starting with '/').
<LI>Add a BASE tag at the start of the page (after the HEAD tag):
<PRE>&lt;BASE href="http://my-domain/cgi-bin/"&gt;
</PRE>
</OL>

.FAQ c How do I do file uploads through CGI?
<P>Find the Internet document RFC1867. This is the kind of FORM code you
need:
<PRE>&lt;FORM ENCTYPE="multipart/form-data" ACTION="_URL_" METHOD=POST&gt;
File to process: &lt;INPUT NAME="userfile1" TYPE="file"&gt;
&lt;INPUT TYPE="submit" VALUE="Send File"&gt;
&lt;/FORM&gt;
</PRE>
You can test this quite simply by using ACTION="cgi-bin/testcgi.exe" and
enabling CGI debugging ([cgi]debug=1) to see what the stdin stream looks
like. To decode the file upload data you could use the functions in
sflhttp.c.
<P>Form-based file uploads do not work in IE3.x and earlier, and we have
reports that it fails with some IE4 configurations.  Netscape 3.x and later
work fine.  Opera 3.x does not handle this.  Therefore, we recommend that
you use this carefully and probably best within an intranet setting where
you can be sure of the type and version of browser used.

.FAQ c My SSI page says '#exec command not permitted for security reasons'
<P>To enable the #exec command, set the ssi:exec option.

.FAQ c Can I use Java servlets with Xitami?
<P>Takyiu Liu says: I have used servlets with Xitami with an unconventional
way. I use servletrunner (or Jrun if you prefer a 3rd party servlet engine)
and point it to the servlet classes I have written (I have the servlet
connected to a SQL Anywhere DB on request). I then use Xitami to serve the
web pages, with form actions pointing at something like:
<PRE>&lt;FORM ACTION="http://53pc2951:8000/servlet/DBQuery" METHOD="POST"&gt;
</PRE>
On any platform where the servletrunner is not available, one can use the
(undocumented) approach:
<PRE>java sun.servlet.http.HttpServer -d your_servlet_directory
</PRE>
In other words, so long as a platform has a JDK 1.1 JVM, you can run servlets
with just a copy of jsdk.jar.
<P>Jrun is meant to be a servlet engine but in 2.2 they added primitive http
support.  By default, it comes up on port 8000 and a typical location to put
the web pages is:
<PRE>\Program Files\Live Software\JRun\2.2\jsm-default\services\jws\htdocs
</PRE>
I think it is modelled after Sun's Java Web Server.  The default path for the
servlet classes is:
<PRE>\Program Files\Live Software\JRun\2.2\jsm-default\services\jse\servlets.
</PRE>I also believe Jrun's http capability comes from ACME's server API, and
so is very primitive compared with Xitami.  It is great to be able to combine
Xitami's http capability and Jrun (or servletrunner)'s servlet capability.

.FAQ c Can I use LRWP peers with another web server?
<P>You can use the sneaky parallel-server approach suggested by Takyiu Liu
for running servlets: run Xitami beside the other web server on another port,
just for the benefit of LRWP.

.FAQ c What plans do you have for server-side JavaScript?
<P>Xitami does not support server-size JavaScript and we do not have such
plans.

.FAQ c I've discovered a limit of 252 LRWP servers under Unix
<P>This is a problem with some Unix systems, caused by a limit on the number
of open file handles. You can link Xitami with AT&T's "SFIO" library
(available from http://www.research.att.com/sw/tools/sfio/ ). No source
modification is required: just copy libstdio.a and libsfio.a from the SFIO
distribution to ./src/smt/ and modify one line in "./src/smt/c" script from:
<PRE>LIBLIST="$LIBLIST $CCLIBS"
</PRE>
to
<PRE>LIBLIST="$LIBLIST $CCLIBS libstdio.a libsfio.a"
</PRE>

.build anchor user_authentication
.FAQ c How do I do user authentication in a CGI script?
<P>When a browser requests a page which Xitami considers 'protected', i.e.
which is defined in defaults.aut, it fills-in a request header like like
this:
<PRE>Authorization: Basic dXNlcm5hbWU6MTIzNDU2Nzg=
</PRE>
<P>The strange thing at the end is the sequence "username:password" encoded
using base-64, as defined in the Basic Authentication Scheme in RFC2068.
Xitami provides the encoded string in the HTTP_AUTHORIZATION environment
variable.  You can decode this using a fairly simple function - see the SFL
sflmime module for an example in C.
<P>It's also possible to tell the browser to ask for a password, if none is
supplied, by generating a WWW-authenticate header.  For example:
<PRE>  if not VariableSet( HTTP_AUTHORIZATION )
    {
     HeaderLine( 'HTTP/1.0 401 Unauthorized' );
     HeaderLine( 'WWW-authenticate: basic realm="UserArea"' );
     echo 'Text to send if user hits Cancel button';
     exit;
    }
  else
     HeaderLine( 'Location: http://anHost/users/userCode/userPage.html' );
</PRE>
An entry like the following should exist in the defaults.aut file:
<PRE>[/users]
  realm="UserArea"
  UserName1="UserPassword1"
  UserName2="UserPassword2"
  ...
</PRE>

<HR>
<H3>Multihosting/Virtual Hosting</H3>

.FAQH v What exactly do I need to define for a Virtual Host?
<P>For the main configuration you have xitami.cfg+defaults.cfg. For each
virtual host you have some XXXXX.cfg. For unresolved virtual hosts you have
basehost.cfg. Use the WBA virtual host wizard to define new virtual hosts.

.FAQ v How do I set-up a virtual host on another port?
<P>You can do this quite simply by starting two copies of Xitami. We do this
quite often; the advantage is that you can get the effect of multiple hosts
(different document roots) without playing with the DNS system. Otherwise,
you have to define DNS entries that map several different names
'www1.here.com', 'www2.here.com' to the same IP address, then base the
virtual hosting on the different names. Either way is okay; Xitami is so
small that running two or even a dozen copies will not stress a system.

.FAQ v How do I provide space for individual users on my system?
<P>Let's say you installed Xitami in c:\servers\xitami. Then, the main
webpage directory will be c:\servers\xitami\webpages. An URL like
'http://dynamic210.adelphia.net/Joe' is taken to mean something like:
'http://dynamic210.adelphia.net/Joe/index.htm', which would be a file:
'c:\servers\xitami\webpages\joe\index.htm'. You can also use
default.htm, and you can change the main webpages directory to be
somewhere else if you want. Under Windows 95 and NT you can make each
subdirectory shareable separately, so that users can update their pages
but not mess with other files.  You can also use aliases, especially if
users' pages are on different disks.

.FAQ v And how about their CGI scripts?
<P>Any URL containing /cgi-bin/ is treated as a CGI directory. So, Joe
can put his web pages in "c:\servers\xitami\webpages\joe\" and his CGI
programs in "c:\servers\xitami\webpages\joe\cgi-bin\".

.FAQ v Can I run two versions of Xitami, e.g. on ports 80 and 1010?
<P>It should work okay, providing you stop the two Xitami's from stepping on
each others toes (eg, different home directories). If you want to run on
port 1010 you'll have to give Xitami a carefully calculated base value (base
(1010-80)=930; 1080 would be easier (base 1000).

.FAQ v My virtual host setup does not work - what can I try?
<UL>
<LI>First off, if you're using DNS-based virtual hosting, understand that
this will only work with version 3 or later browsers.  If in doubt, enable
server debugging and check the request.log - each request must have the
correct Host: header field.
<LI>Then, check the debug.log file, which will show the virtual-host chosen
for each URL request.
<LI>If necessary, use the config-file debugging option to trace which config
files are loaded, and when.  Any line starting with '!' will be sent to the
debug.log file, if debugging is enabled.  For instance, add lines like this
to your VH config and authorisation files:
<PRE>! Loading somehost config
</PRE>
<LI>Check that your proxy is not playing games: it could be passing you
old pages despite the virtual host config.
</UL>

<HR>
<H3>FTP Questions</H3>

.FAQH f People can't transfer files or see directories on my FTP server
<P>This is a typical problem caused by the way FTP works. If there is a
firewall (some some kinds of router are the same) which does not allow
connections from the server to the client, file transfers (including
directory listings) will fail. You should tell your users to use 'passive'
connections.

.FAQ f How do I use my D: drive for additional FTP space?
<P>You can move the entire FTP root anywhere you like - this is one way. You
can also define any number of FTP aliases, which point to different file
systems, CD-ROMs, etc. You can also put different FTP users' directories on
different disks. For instance if I log in to 'anonymous', you could set my
home directory to d:\anon\.

.FAQ f When exactly does Xitami read the FTP user file?
<P>Xitami reads this when it starts up, when you restart it, or after the
refresh timeout (30 seconds by default).

.FAQ f If I give a user only 'P' access to a directory they can't list it
<P>Normally you'd use 'P' by itself for a directory meant purely for
uploads. I.e. a userid 'uploads' with a dedicated write-only directory.
If you use 'P' by itself on a subdirectory, the user will not be able to
'cd' into it.

.FAQ f I'm having problems getting my FTP permissions right
<P>The FTP permissions definitions are quite complex and it's easy to get
these wrong.  The most common mistake is when you define directory-level
protections.  For instance, if the ftproot is in 'ftproot', and a user
'guest' connects to 'guest' (a subdirectory of ftproot), then how do you
specify the protection for a subdirectory 'guest/pub'?  The correct form is:
<PRE>[pub]
    guest=..flags..
</PRE>
and not [guest/pub], [/pub], [/guest/pub] or any other combination.  The key
is that you have to look at the protected directory name from the point of
view of the logged-on user.  The user's home directory is []; the pub
subdirectory is [pub].
<P>To debug this kind of problem, enable server debugging, then check
debug.log. It'll indicate the actual permissions that were used to access
the directory.  Make sure you read the comments in ftpdirs.aut to see how
FTP authentication works.

.FAQ f How do I create an alias under the /pub directory?
<P>This is not possible at present.

.FAQ f Helloftp.txt does not show up under web-based FTP access
<P>This depends entirely on your browser: some show it, some don't.

.FAQ f FTP aliases don't show-up when I do a browser directory listing
<P>Aliases don't show-up in HTTP directory listings.  They do show up in
FTP listings.  This is just the way things work.

.FAQ f How do I set-up FTP virtual hosts?
<P>Xitami does not yet support this, and when it does, it will only allow
IP-based (as opposed to DNS-based) virtual hosting due to the way the FTP
protocol works. A simple workaround is to run multiple copies of Xitami, one
for each IP address, and each in its own home directory. Make sure to set
the LRWP port to different values for each server, and set the FTP ipaddress
and force-ip appropriately. Use the console version of Xitami to debug it,
since this displays any error messages nicely. The Windows GUI versions
don't, and you may just find yourself staring at a non-starting web server
without knowing what's going on.

.FAQ f Can I remotely browse my hard drives using Xitami?
<P>You can define an FTP alias to C:\, for instance, and manage this using a
remote FTP client. Make sure you use a secure user id and password.

<HR>
<H3>Log File Questions</H3>

.FAQH l How do I use the Xitami log files?
<P>There are many freeware and commercial logfile analysers; the Xitami
access logfiles are NCSA/HTTPd compatible and thus compatible with most
logfile analysers.  The Xitami.log file is used for server messages and
thus not suitable for analysis.

.FAQ l Does the FTP server log logins, uploads, and downloads?
<P>The FTP server logs uploads and downloads in the Xitami access log file,
by default.  To separate the FTP access log into a separate file, change
the Ftplog:filename configuration option.  This also applies to the error
log, specified by ftperrlog:filename.

.FAQ l Why does access.log contain only numeric addresses?
<P>Xitami does not yet translate IP addresses into names since this is
very slow unless done asynchronously, and that's a lot of work.  The Xixlat
translator (supplied with Xitami) will do a fast log file translation.

.FAQ l Can I use Microsoft's WINS protocol for analysing my log files?
<P>Yes. This is extracted from Microsoft's documentation: "In Windows NT
4.0, Microsoft's implementation of DNS is tightly integrated with WINS. This
allows non-WINS clients to resolve NetBIOS names by querying a DNS server.
Administrators can now remove any static entries for Microsoft-based clients
in legacy DNS server zone files in favor of the dynamic WINS/DNS
integration. For example, if a non-Microsoft-based client wants to get to a
Web page on an HTTP server that is DHCP/WINS enabled, the client can query
the DNS server, the DNS server can query WINS and the name can be resolved
and returned to the client. Previous to the WINS integration, there was no
way to reliably resolve the name because of the dynamic IP addressing.
Please see the 'DNS and Microsoft Windows NT 4.0' white paper for details on
the WINS/DNS integration."  The upshot of this is that xixlat will work with
WINS if you have a WinNT 4.0 DNS server.

.FAQ l My log file has this strange URL: webpages/http://hostname/file.htm
<P>This is caused by the browser (usually MSIE4) sending a HTTP1/1 proxy
request.  Xitami can not (yet) handle these.  This usually indicates that
someone has defined your web server as a proxy server.

.FAQ l What's the logic behind the log file naming scheme?  Is there any?
<P>The log file naming schema is an attempt to manage what can become a
large number of files with pretty arbitrary names. This is how it works:
<UL>
<LI>When a log file is cycled, the new file is created with the
specified name, e.g. access.log.
<LI>The old file, if it exists, is renamed to a file with the same first two
letters, followed by six digits representing the year, month, and day, of
last modification of the file.  (In old versions of Xitami, the hour, minute
and second.)
<LI>If this name was already used, the file extension is changed to .000,
\.001, \.002, etc. until a unique name is found.
</UL>

.FAQ l I can't access the log files while Xitami is writing to them!
<P>This is normal behaviour under Windows.  Under Unix and OS/2 you may
have more luck.

.FAQ l My log files do not get updated until Xitami is restarted
<P>This happens (on several operating systems) because the OS may not show
changes to a file until the file is closed by the process writing to it.
When you do a restart, Xitami closes its log files, and then you see all the
entries. At a guess the log files are being block buffered, which means that
they'll only be written out to the file once a block is full (probably
somewhere between 2K and 8K at a guess). This is a function of the way that
the runtime library handles file I/O.

.FAQ l My computer crashed and now my log files are full of junk
<P>When the computer crashes, for whatever reason, it can leave open files
in an incomplete state. One symptom is that allocated blocks can contain
garbage from previous files, allocated to the new file, but not yet written
with data.  This is probably what happened to your log file.  In other words,
the junk is probably not what caused the crash, just random data that
happened to be on the hard disk when Xitami was writing to its log file.

<HR>
<H3>Miscellaneous Questions</H3>

.FAQH m How do you pronounce Xitami?
<P>Just say 'iMatix' backwards -- it's simple! Okay, to be more precise...
There are two basic ways to pronounce this name; you can aspirate the 'X' as
'Sh', or you can keep it hard, as 'Ks'. In either case the accent is on the
second syllable.

.FAQ m What are the main problems with Xitami today?
<P>People also often ask for FrontPage support.  Besides the fact
that FrontPage uses an undocumented server interface, we think that if you
want to be tied to a single platform (Windows in this case) you can use the
platform-specific server (IIS in this case).  Xitami offers a long-term
approach, robust enough to survive several OS changes.

.FAQH m Can you recommend a search engine for Xitami?
<P>We've tried a few; there is a free engine available from <A
HREF="www.excite.com">www.excite.com</A>, and we've also tested the free
Swish engine, which works well with Xitami. You can get Wim Niemans' port of
this for Windows 95/98/NT from the $(*swish=iMatix website).

.FAQ m Why is the Xitami mailing list not a newsgroup?
<P>We are well aware of the advantages and disadvantages of newsgroups
vs. mailing lists.  Each has their strong points, but in general a mailing
list is accessible to more people than a newsgroup.  We're looking for ways
to provide transparent merging of the two techniques, so that people can
use the mailing list either as a newsgroup or a list.  Until that date,
we will stick with a mailing list.

.FAQ m Why do I get errors on 'robots.txt'?  What is this?
<P>The various search engines (like AltaVista) use a 'web spider' or 'robot'
to scan and index websites. This often includes large amounts of junk that
make the resulting searches pretty useless. So, a standard mechanism has
evolved to make this work better. The 'Robot Exclusion Standard' specifies
that a file called 'robots.txt' in the home directory will indicate which
pages or directories should be ignored. This is not meant as any kind of
security device, just a 'hint'. So, most robots will ask for this file. If
the errors in the log files bother you, create an empty file in the webpages
directory called 'robot.txt'.  To ask all robots to skip your site, use
this:
<PRE># robots.txt
User-Agent: *
Disallow: /
</PRE>

.FAQ m Can I customise the directory listings?
<P>No, not in this version.

.FAQ m Why is the password file not encrypted?
<P>In general if access to your server is secure, then the lack of
encryption is not a problem. If someone can read the Xitami directory on
your system, they can see the passwords. Note that even if you use a hashed
password file, it is often trivial to discover passwords using a
dictionary-based attack. It's therefore much better to concentrate on hiding
the password file than on encrypting it.  At some future date, Xitami will
support encrypted (hashed) passwords.

.FAQ m Do I need a special license to use/sell/modify Xitami at work?
<P>No, none.  Read the $(*license=Xitami_license).

.FAQ m I want to write a great Xitami addon...
<P>Excellent news!  Xitami is an Open Source project, and has benefitted
from many contributions, including people who ported the SFL library, wrote
plugs like the LRWP agent, wrote documentation, tested it, and so on.  You
will want to learn how to use our great tools - Libero, SFL, SMT.

.FAQ m How do I rebuild the SFL under Windows using MSVC?
<P>The simplest check-list is:
<OL>
<LI>Get the Xitami Windows source code distribution (this always contains
the most recent release of SFL).
<LI>Unzip into a directory; the SFL source code is put into src\sfl.
<LI>Create a new project, for a static library; change the options to
create an output file in the main directory (instead of debug/). I usually
call the library 'libsfl.lib'.
<LI>Add all source files called 'sfl*.c' from the src/sfl directory.
<LI>Build.
</OL>
For SMT, you can do the same, but there are some sources you want to leave
out: smttst*.c and smtschm.c.

.FAQ m I'm building a Windows app based on Xitami, but it aborts
<P>If you try to mix Xitami with MFC, you'll get a server that stops running
after 60 seconds, or whatever you set the server:refresh interval to. This
is because MFC traps the timer signal Xitami uses, and handles it as an
abort. There may be workarounds for this, depending on how well you know
MFC.

.FAQ m How do I rebuild Xitami under Windows using lcc-win32?
<P>If you want to compile under Windows, you should download the Windows
source kit, not the Unix one - this will give you files with the correct
line endings (CRLF not LF). Then, you should set the environment variable
CCNAME to lcc and CCDIR to the lcc-win32 directory. Try the c.bat file on
one source, e.g. sflbits to make sure it works correctly, then run build.bat
in src/sfl. Copy sfl.h and libsfl.lib to src/smt, and run build.bat there
too. Lastly, when Xitami is built, be prepared to throw it away, since at
the time of writing, lcc-win32 had a bug which causes Xitami to halt when it
gets a timer signal -- see the following question.

.FAQ m I compiled Xitami with lcc-win32 but it always aborts
<P>Lcc is a wonderful little compiler but its runtime has a problem with
certain interrupts. Basically, when Xitami receives a timer signal, it
aborts. This hits after the refresh timeout, and when running CGIs. We have
notified the author of lcc, and provided a small test program that shows
this behaviour. It's quite clearly a bug in lcc. Apart from this problem,
we've found lcc to be fast, reliable, and in fact it's supported fully by
the SFL. I can recommend it for CGI programming (oh, one more caveat - no
support for ODBC as far as I could see).

.FAQ m Why does iMatix.com use Apache, not Xitami?
<P>iMatix.com is hosted by Ascentrix Technologies, Inc. an excellent web
hosting company (previously called AZC).  They use a customised version of
Apache with electronic commerce facilities.

.FAQ m Why are there bugs in Xitami?
<P>Any complex software is filled with bugs. Xitami is pretty good in this
respect, we reckon. Our policy is to fix those we can identify and localise,
depending on the severity of the problem. A bug that causes the server to
crash will make us run around a lot faster than a bug which causes some
obscure feature to work otherwise than documented.  Large amounts of money
will also tend to focus our attention.

.FAQ m Why is Xitami free, and will it remain this way?
<P>Xitami is a product that we developed to demonstrate the quality of our
technology and to introduce people to iMatix Corporation.  This web server
will remain free software, and as the kernel for our commercial web server
products, will continue to be ported, improved, and maintained.

.FAQ m Where can I get older versions of Xitami?
<P>We keep one back version but not older ones.  You may be able to find
a specific version by searching through an FTP search engine like the
one at http://ftpsearch.ntnu.no.

.FAQ m Do you have any plans to incorporate SSL into Xitami?
<P>Xitami/Pro supports this.  E-mail us for details and prices.

.FAQ m What is the future for Xitami?
<P>Xitami will continue to be improved and extended, while keeping it a
server that you can install and set-up within minutes.  For professional
users, Xitami/Pro offers more sophisticated functions but these also take
more time to learn and configure.  Xitami will remain free software.

.FAQ m Is Xitami year 2000 compatible?
<P>Yes.

<P>$(*faqlink=Go back to FAQ index)

.-----------------------------------------------------------------
.page Technical Implementation

<H2>$(TITLE)</H2>

<P>Xitami was built using the $(*smt=SMT_kernel) from iMatix. This is a
toolkit for building portable multithreaded servers, amongst other types of
program. You can get the sources for Xitami and SMT from the iMatix web
site, as well as the tools (for instance the
$(*libero=Libero_development_environment)) you need to modify it, or write
your own multithreaded servers. The SMT kernel is inherently portable, and
runs on a variety of systems. For more information, see our
$(*imatix=web_site). All documentation is held on-line.

<P>The Windows implementation was built as a (native Windows) multithreaded
process, with one foreground thread handling the control panel and one
background thread running the (portable multithreaded) HTTP server.

<P>Various articles in Dr Dobb's Journal describe the technical
implementation of Xitami. See Dr Dobb's Sourcebook July/August 1996, and Dr
Dobb's Special Report on Software Careers Spring 1997 for articles on Libero
and SMT.

.-----------------------------------------------------------------
.page Getting Support

.build anchor getting_support
<H2>$(TITLE)</H2>

<P>Xitami is a free product, and well-documented.  Before you email us with
questions, make sure you read the documentation and especially the
$(*faqlink=FAQ).  Bug reports are always welcome, if you can tell us what to
do to make the problem happen.  E-mails like 'Xitami crashed' are not very
useful.  When you report a problem, tell us:
<OL>
<LI>What version of Xitami you are using
<LI>What operating system you are using
<LI>The exact error message you get
<LI>How to reproduce the problem
</OL>
<P>Xitami includes a debugging option (the server:debug option) which
generates various trace files.  Use this feature to get information about a
problem before you mail us.  Often the trace files (debug.log, header.log,
and request.log) will contain very useful information.

.build anchor group
<P>For help about using, configuring, or extending Xitami, use the Xitami
discussion group. This is a mailing list kindly hosted by Scott Drake. The
Xitami group generates 10-30 messages a day, and has an
$(*archlist=on-line_archive) which you can search by going to
http://xitami.isonline.com/ and clicking on Search.
To subscribe, send a $(*mailist=message) with the following command in
the <EM>body</EM> of the message: <B>subscribe xitami</B>.

<P>Registered Xitami users get automatic news about updates, bugs, special
offers, and other items of interest. Registration is free. To register, send
a $(*register=message) with your comments in the body of the text. We will
sometimes use your comments (with permission) on our web site. In any case,
if you mail us with any question regarding Xitami, you are automatically
registered.

<H3>For Technical Support</H3>

<P>Technical support licenses for Xitami and other iMatix products are
available from iMatix Corporation at reasonable prices.  Contact
$(*sales=sales@imatix.com) for information.  Commercial clients should
use the priority support facilities noted in their license.

<H3>For Regular Information</H3>

<P>For regular information on iMatix - our products, our future, and our
opinions - you can subscribe to Liberetto, the monthly iMatix newsletter.
Send a mail to $(*liberetto=liberetto@imatix.com) with 'subscribe' in the
message subject or message body.

.-----------------------------------------------------------------
.page Release History

.build anchor history
<H2>$(TITLE)</H2>

<UL>
  <LI>Xitami 2.4d7 released 2000/04/01 with these changes:
  <UL>
    <LI>Closed denial-of-service hole whereby a request 'GET<space>' caused
    an assertion failure.
    <LI>Closed denial-of-service hole whereby requests for filenames or
    directory names containing DOS device names caused the operating system
    to fail (affecting Windows 95/98).
  </UL>

  <LI>Xitami 2.4d6 released 99/11/26 with these changes:
  <UL>
    <LI>Fixed error in logfile 'append' method.
    <LI>FTP mkdir command failed on UNC drives (\\system\drive).
    <LI>LRWP/2.0 handler was broken - fixed
    <LI>HEAD method did not work with SSI pages - fixed.
  </UL>

  <LI>Xitami 2.4d5 released 99/11/14 with these changes:
  <UL>
    <LI>Closed some denial-of-service weaknesses in LRWP/2.0 agent.
    <LI>Various fixes in logging agent.
    <LI>Unix build script had errors - fixed.
  </UL>
  
  <LI>Xitami 2.4d4 released 99/11/01 with these changes:
  <UL>
    <LI>Sealed Windows '//' security issue.
    <LI>Upgraded LRWP agent to LRWP/2.0 protocol.
    <LI>Safepaths option was not being applied to CGIs and directory
    listings - fixed.
    <LI>Logging agent sometimes failed to cycle log files - fixed.
  </UL>
  
  <LI>Xitami 2.4d3 released 99/09/19 with these changes:
  <UL>
    <LI>Sometimes aborted when launched at startup under Windows - fixed.
    <LI>Sometimes aborted when restarted from the WBA - fixed.
    <LI>Sometimes aborted when accessing CD-ROMs through FTP - fixed.
    <LI>Log files were not cycling at correct time - fixed.
    <LI>FTP service has some memory leaks - fixed.
    <LI>URLs starting with // bypassed authentication checks - fixed.
  </UL>

  <LI>Xitami 2.4d2 released 99/08/05 with these changes:
  <UL>
    <LI>Redirections were returning the wrong MIME type - fixed.
    <LI>Windows GUI correctly updates server IP address if it changes.
    <LI>1024-byte limitation on form query variables was removed.
  </UL>
  
  <LI>Xitami 2.4d1 released 99/06/23 with these changes:
  <UL>
    <LI>Better handling for sockets under Windows when keep-alive is off.
    <LI>Corrected PATH_TRANSLATED for PHP and other filters.
    <LI>Issued two Content-Length: headers for CGIs that generated this -
    fixed.
    <LI>WBA wrongly showed links 'Errors Wsx Filters' for some pages, and
    crashed when these were selected - fixed.
    <LI>WBA sometimes showed errors in lists of users - fixed.
    <LI>Xitami sometimes returned '403' when looking for files on networked
    drives - fixed.
    <LI>Removed server:translate option - redirected URLs now always use the
    hostname.
    <LI>New option, cgi:passargs, controls whether CGIs receive command-line
    arguments or not.
    <LI>FTP rmdir command failed after doing a 'dir' of the directory.
  </UL>
  
  <LI>Xitami 2.4d0 released 99/05/15 with these changes:
  <UL>
    <LI>HTTP listings failed when filenames contained '%' character.
    <LI>FTP quota manager was causing problems - fixed.
    <LI>FTP server secured against dictionary-based password attacks.
    <LI>FTP server stopped responding if two PASV commands were issued to
    same control connection.
    <LI>FTP server now handles APPEnd command correctly.
    <LI>FTP timeouts were being set 100 times too high.
    <LI>Windows timer handler gave occasional aborts - fixed.
    <LI>Xitami crashed if posted variable was greater than 255 characters.
    <LI>Access log lines were limited to 255 characters - increased to 4k.
    <LI>Access log file showed a file size '-1' for 404 errors - fixed.
    <LI>Access log time format was wrong in some time zones.
  </UL>
  
  <LI>Xitami 2.4c3 released 99/03/14 with these changes:
  <UL>
    <LI>FTP server failed when APPEnd command was used - this command was
    disabled.
  </UL>

  <LI>Xitami 2.4c2 released 99/01/23 with these changes:
  <UL>
    <LI>FTP server now suppports multihoming virtual hosts.
    <LI>Logging stopped after server restart - fixed.
    <LI>CGI PATH_TRANSLATED symbol now holds full path and was corrected to
    fix a problem introduced in 2.4c0.
    <LI>CGI SERVER_NAME symbol no longer contains port number for instances
    of Xitami running above port 80.
    <LI>New symbol, SERVER_URL holds full URL to server.
    <LI>HTTP file upload was not working for files > 30k - fixed.
    <LI>Added new CGI variable, SERVER_VERSION.
    <LI>HTTP server sometimes closed socket before entire page was
    transmitted to browser - fixed.
    <LI>Corrected bug in handling of CGI Location: header.
  </UL>

  <LI>Xitami 2.4c1 released 99/01/02 with these changes:
  <UL>
    <LI>Better handling for high ASCII (e.g. Chinese) characters.
    <LI>CGI variables PATH_TRANSLATED and CGI_ROOT now hold full path, which
    corrects some problems with the SSI #include and #exec commands.
  </UL>

  <LI>Xitami 2.4c0 released 98/12/23 with these changes:
  <UL>
    <LI>FTP server sometimes gave 'unauthorised' message on rmdir - fixed.
    <LI>FTP server now lets you allocate disk space quotas per user.
    <LI>Web server now accepts URL names containing '+'.
    <LI>New FTP access mode, 'U' allows only uploading of new files.
    <LI>FTP 'P' access mode now allows directory browsing.
    <LI>Web-based administration interface improved.  Much nicer.
    <LI>Corrected long-standing problem with aliases under OS/2.
    <LI>No longer generates Last-Modified header for CGIs, WSXs, & filters.
    <LI>Corrected display of IP address in Xitami Windows control panel.
    <LI>Corrected bug under Linux which caused TCP/IP functions to go into
    debugging mode when keep-alive connections were enabled.
    <LI>PATH_INFO was not being provided to WSX agents - fixed.
    <LI>Added Crash Recovery system to Windows GUI and NT service versions:
    Xitami will now recover from a memory violation error.
    <LI>Added server:recover option for silent crash recovery.
  </UL>

  <LI>Xitami 2.4b2 released 98/12/06 with these changes:
  <UL>
    <LI>Server sometimes crashed during log file cycling - fixed.
    <LI>DOCUMENT_ROOT CGI variable now holds full path; this fixes a
    problem with the 'SSI #include virtual=' command.
    <LI>Corrected a fault in the handling of the HTTP MOVE command.
    <LI>Xitami distribution filenames changed to new format.
    <LI>Server:advertize option turns off server name in directory listings.
    <LI>WBA Help function now works correctly.
    <LI>Improved WBA icons.
    <LI>FTP manager now lets you set quotas per user.
  </UL>

  <LI>Xitami 2.4b1 released 98/11/28 with these changes:
  <UL>
    <LI>SSI #include command was broken in Perlssi - fixed.
    <LI>It was possible to freeze the server by asking for 'com1' or 'lpt1'
    (and variants) as a URL - fixed.
    <LI>Rare memory overwrite problem in SMT kernel was fixed.
    <LI>Changed default ftp:ipaddress for passive connections to '*'.
    <LI>HTTP PUT method returned 404 for new files - corrected.
    <LI>Removed cgi:exit-ok configuration option.
    <LI>Improved handling for 'webmask=@filename' option.
    <LI>Access logs now allow filenames containing spaces (these are
    replaced by the MIME encoding '%20').
    <LI>Added new fields (filename, config table) to WSX_REQUEST messages.
    <LI>Log file cycling corrected to work per virtual host.
    <LI>Server:log-dir option now defaults to 'logs'.
    <LI>Authentication was still looking for URL names with '_', e.g.
    [cgi_bin].  This was changed to search for the real URL value, e.g.
    [cgi-bin].
    <LI>Server created empty files when asked for filtered file that did not
    exist - fixed.
    <LI>WBA Restart function still occasionally crashed the server - fixed.
  </UL>

  <LI>Xitami 2.4b released 98/11/08 with these changes:
  <UL>
    <LI>Improved support for PHP 3.0, corrected PHP_SELF variable.
    <LI>Added support for HTTP MOVE and COPY methods.  All update methods
    are now controlled by the same 'http-update' URL authorisation option.
    <LI>WBA Restart function crashed the server - fixed.
    <LI>WBA Help function killed the WBA agent - fixed.
    <LI>Log files were wrongly named (e.g. "./d:\logs\access.log") when
    fully-specified log file names were used - fixed.
    <LI>Server now uses setuid functions to access port 80 under Unix
    (thanks to Grant McDorman &lt;grant@isgtec.com&gt;).
    <LI>Server now uses setuid functions to switch to a safe user and group
    under Unix (thanks to Georg Ottinger &lt;g.ottinger@magnet.at&gt;).
    <LI>Changed console:refresh default to 0 to get rid of IE4 warning
    messages.
    <LI>Added Xitami version number to WBA screens.
    <LI>Maximum size of HTTP request in log files increased from 255 to
    1024 chars.
    <LI>Added win32:service-name and service-text options to allow multiple
    Xitami services to run on the same system.
    <LI>Extended FTP access logging to include logins, failed logins, and
    logouts.
    <LI>FTP server did not show aliases if user's root directory was empty -
    fixed.
    <LI>Filters now run as specified by the cgi:workdir option.
    <LI>CGIs and filters appeared twice in logfiles - fixed.
    <LI>Under Windows, accessing URLs 'aux', 'con', 'prn' or 'nul' caused
    server to freeze-up - fixed.
    <LI>401 errors were being logged to the error log - these are now
    ignored.
    <LI>Xitami was logging 'WSAECONNRESET' messages in the error log file;
    these were removed since they do not actually indicate errors.
    <LI>DNS-based virtual hosts did not work correctly on HTTP ports other
    than 80 - fixed.
    <LI>cgi:timeout can be set to zero to indicate 'no limit'.
  </UL>

  <LI>Xitami 2.4a1 released 98/10/03 with these changes:
  <UL>
    <LI>Added support for HTTP PUT and DELETE methods.
    <LI>Configuration file handling was changed to allow "-" in key names,
    for instance in virtual host names.  Old config files containing "_" in
    key names must be changed to use '-'.
    <LI>Added ftp:login-text option to WBA FTP setup.
    <LI>Last-Modified: response date was miscalculated by a month.  This
    also showed-up in FTP directory listings.
    <LI>Corrected a fault in the log file cycling code which created old
    log files in main directory, even if log files were stored in separate
    directory.
    <LI>FTP server crashed if REST command was sent with no arguments.
    <LI>Added 'local' option for HTTP and FTP access and error logs which
    allows you to suppress logging for local connections.
    <LI>PerlSSI filter was improved to strip-off HTTP headers from CGI
    output.
    <LI>Corrected a bug in the logging code which sometimes wrote a file
    size of '-1' bytes, under Windows.
    <LI>Windows version now updates the system tray icon to indicate
    connections.
    <LI>Added cgi:enabled option to enable/disable CGI completely.
    <LI>Added cgi:wildcard option to control whether /cgi-bin is allowed
    anywhere in URL, or only at start (by default, not allowed).
    <LI>Added server:log-dir option to allow central control of logfile
    directory.
    <LI>Security:admin option now works correctly for virtual hosts.
    <LI>Windows 95 tray message now shows server statistics.
    <LI>Xitami used to accept URIs like "/cgi-bintestcgi"; these are now
    rejected.
    <LI>'BBA' renamed to 'WBA' (web-based admin) in documentation.
    <LI>Corrected a bug in the config file handling which caused problems
    when one tried to protect a resource containing ':', e.g. [e:\private].
    <LI>Corrected a bug in the FTP transfer statistics which were counting
    arbitrary transfer sizes for simple FTP commands.
    <LI>Added WSX_REQBIN, WSX_BIN and WSX_MBIN messages for passing binary
    data to and from WSX plugins.
    <LI>WBA given a facelift; added graphical toolbar and changed the look
    and feel a little.
    <LI>Added security:safepaths option to disable unsafe filename checking.
    <LI>Added all=* option in authorisation files.
    <LI>Fixed a bus error in the LRWP agent under SGI.
    <LI>Increased the maximum length of a CGI cookie string from 237 to
    about 4K.
    <LI>FTP server no longer replaces international characters by octal
    escape sequences in directory listings.
    <LI>CGI:workdir default changed from 'cgi-bin' to '-' (so that CGIs run
    in the script directory).
    <LI>Corrected a bug which caused logging to cease after WBA restart.
    <LI>Corrected a DoS bug which crashed the server when a very long user
    name or password was entered in for a URL authorisation.
    <LI>Corrected a DoS bug which crashed the server when an URL was entered
    with an extra trailing slash.
    <LI>Corrected a bug which crashed the server when a .map file contained
    incorrect values.
    <LI>Added Java interface library for LRWP (thanks to Eugen Woronenko
    &lt;EWoronen@osram.com&gt;).
    <LI>Added Visual Basic CGI 'stdcgi' module (thanks to Wei-dun Teng
    &lt;tiberius@ms13.accmail.com.tw&gt;).
  </UL>

  <LI>Xitami 2.3d1 released 98/07/26 with these changes:
  <UL>
    <LI>Corrected a fault in the FTP server which caused it to refuse
    new connections after a WBA Restart, under Windows NT.
    <LI>Added regression testing tool, 'xitest' to addons section.
  </UL>

  <LI>Xitami 2.3d released 98/07/25 with these changes:
  <UL>
    <LI>Corrected a fault in the HTTP server which left dangling sockets;
    after intensive use the server could refuse new connections.
    <LI>Corrected a fault in the CGI handler which had problems with CGI
    scripts located in directories that contained '.' in the name.
    <LI>Corrected a fault in the HTTP security system which was producing
    403 (Not Authorised) errors on some directories.
    <LI>Improved the HTTP directory listing to show GMT times correctly.
    <LI>Corrected a fault in the LRWP agent which sometimes aborted when
    peer processes de-registered.
    <LI>Improved the handling of the Windows version with respect to the
    Windows 95/NT 'Suspend' mode.
    <LI>Improved the handling of very long URLs in the HTTP server; these
    were causing assertion failures.
    <LI>Corrected the 'iMatix Web Site' button in the Windows version which
    wrongly used the current portbase setting when linking to imatix.com.
    <LI>Added Desktop icon installation procedure for OS/2 (thanks to Scott
    Drake).
  </UL>

  <LI>Xitami 2.3c3 released 98/07/13 with these changes:
  <UL>
    <LI>FTP listing always omitted the last entry.
    <LI>Default pages and SSIs did not always show correctly.
    <LI>FTP and HTTP listings now hide 'hidden' files.
    <LI>HTTP 302 return code works better with Opera browser.
    <LI>Fixed some problems with use of CGIs as default pages.
  </UL>

  <LI>Xitami 2.3c2 released 98/07/06 with these changes:
  <UL>
    <LI>DNS-based virtual hosts were broken.
    <LI>Log file did not contain correct value for User-Agent field.
  </UL>

  <LI>Xitami 2.3c1 released 98/07/05 with these changes:
  <UL>
    <LI>Server aborted on certain URLs (CGIs without extensions).
    <LI>Some problems in OS/2 and Windows build scripts were fixed.
  </UL>

  <LI>Xitami 2.3c released 98/07/04 with these changes:
  <UL>
    <LI>Closed security hole under Windows 95/NT which let people access a
    URL containing long filenames by using the abbreviated short name.
    <LI>Closed a security hole which allowed 'webmask' and 'realm' to be
    used as user names in certain cases.
    <LI>The server:autostart option is now FALSE by default.  If you want
    this you have to explicitly enable it.
    <LI>At startup, Xitami indicates on which addresses it will accept
    connections (in WBA messages box or console window).
    <LI>Under Windows, did not always handle CGI .bat files correctly.
    <LI>Handling of CGI program arguments now conforms to CGI standards: URL
    argument string is split on '+', unless it contains '=', in which case
    it is passed only as the QUERY_STRING variable.
    <LI>Added ability to specify HTTP and FTP directory list sort order in
    server:dirsort and ftp:dirsort.
    <LI>Added support for FTP sign-off message (ftp:signoff option).
    <LI>CGI SERVER_NAME variable is now the HTTP Host: field if available.
    <LI>SSI "#include file=" command did not work correctly - fixed.
    <LI>Corrected a memory leak introduced in 2.3b2.
    <LI>Corrected handling of empty error header/footer blocks.
    <LI>WSX interface corrected to handle small binary uploads.
    <LI>FTP service can now be enabled/disabled through the WBA.
    <LI>WBA virtual host wizard defines a password for "/admin" in all cases.
    <LI>New format for [Filter] definitions: ".xxx=filter".  Old format is
    still supported.
    <LI>[WSX] definitions can now be based on file extensions, using
    ".xxx=agent" format.
    <LI>HTTP directory listing format revised for long filenames.
    <LI>Multilanguage Accept header now applies to CGI programs, filters,
    and to default pages.
    <LI>Redirected URLs (302) now use server:hostname in preference to the
    Host: field, if server:hostname defined.
    <LI>Directory listings could fail on directories that were shared as
    volumes with Services for Macintosh (which creates funny filenames).
    <LI>Cycled log files are now given names based on the date, not time.
    <LI>Server aborted on CGI scripts starting with '#!' without a following
    program name.
    <LI>Corrected log file timezone indicator to always be [-+]nnnn.
    <LI>CGIs failed if server:temp-dir did not exist - fixed.
  </UL>

  <LI>Xitami 2.3b2 released 98/06/02 with these changes:
  <UL>
    <LI>Corrected a problem with the NT service version which caused it
    to issue system log messages with no reason.
    <LI>Corrected a security hole in the authentication system which made it
    possible to get into protected files by using '\' in the URL (under
    Windows only).
    <LI>Automatically looks for a .htm file if it can't find a .html (and
    vice-versa).
  </UL>

  <LI>Xitami 2.3b1 released 98/05/24 with these changes:
  <UL>
    <LI>Windows install created broken shortcut for Xitami icon if Xitami
    was installed elsewhere than in the default directory.
    <LI>WBA transfer statistics were sometimes incorrect - fixed.
    <LI>POST method now allowed for filters - small but important change.
    <LI>Virtual host lookup now uses Host: field before IP address
    (previously tested the other way around).
    <LI>Added ftp:password-case option.
    <LI>FTP server aborted if ftp root was set to '/'.
    <LI>FTP server root got corrupted after a restart operation.
    <LI>Form POSTs passed through the environment did not work.
    <LI>Filenames ending in % could cause aborts.
    <LI>Limit on size of customised error texts increased to 32k total.
    <LI>FTP server correctly issues a 221 Closing Connection after QUIT.
  </UL>

  <LI>Xitami 2.3b released 98/05/09 with these changes:
  <UL>
    <LI>Priority option was being ignored; Xitami always ran under
    HIGH priority (under Windows 95 and NT).
    <LI>Multipart/form uploads failed for binary files smaller than 8K.
    <LI>SSI include files can now contain SSI commands themselves.
    <LI>SSI #execute cgi command can pass URL arguments (?xxx).
    <LI>16-bit version was not scanning HTTP requests correctly: fixed.
    <LI>Referrer field in access log file was empty.
    <LI>WBA crashed when the 'Errors' option was selected from the
    main config screen - fixed.
    <LI>Accept-Language support improved.
    <LI>Restart function did not always reload configuration: fixed.
  </UL>

  <LI>Xitami 2.3a1 released 98/04/25 with these changes:
  <UL>
    <LI>Redirection of URLs based on aliases did not work correctly.
    <LI>CGI_STDIN/STDOUT variables were being wrongly formatted.
    <LI>CGI content type was being forced, wrongly, to text/html.
    <LI>Added support for Accept-Language header for multiple languages.
    <LI>FTP server also handles APPE command.
    <LI>Xitami aborted when WBA Restart command was used.
    <LI>Xitami aborted when FTP user list held more than a page of users.
  </UL>

  <LI>Xitami 2.3a released 98/04/18 with these changes:
  <UL>
    <LI>FTP connections now work asynchronously; previously clients behind a
    firewall could cause the FTP server to block.
    <LI>Referencing a file like 'nul.gif' caused the server to abort under
    Windows (fixed).
    <LI>WSX and filters now take precedence over CGI URLs.
    <LI>Handles DOS-style aliases better (allows '\' in alias values).
    <LI>Windows 3.x 16-bit version now works correctly.
    <LI>Support for Win32s under Windows 3.x now documented correctly.
    <LI>Configuration values can contain environment symbols like this:
    $\(NAME).
    <LI>Allows CGI programs to be placed in any HTML directory (you must set
    server:cgi-url=/, server:cgi-bin=webpages, and cgi:mixed-url=1).
    <LI>Files with no extension can now have a MIME type (.=text/plain).
    <LI>server:temp-dir directory is used for temporary files (e.g. CGI pipes).
    <LI>server:debug-dir directory is used for debug log files.
    <LI>"Support 16-bit CGI programs?" option in WBA CGI page did not work.
    <LI>Server crashed on restart if Serverlog:enabled=0 was set - fixed.
    <LI>PerlSSI filter improved to allow execution of CGI scripts.
    <LI>Access log now contains full Referer field, including arguments.
    <LI>Mime:default option defines MIME type for undefined file types.
    <LI>Code uses snprintf/vsnprintf to protect against buffer overruns.
    <LI>WBA FTP users screen did not delete users correctly; now does so when
    you clear the user name.
    <LI>It is now possible to define for each user whether or not they have
    access to the root FTP aliases (aliases=0/1 option).
    <LI>CGI output reparsing improved (was losing lines starting with
    &lt;HTML&gt;).
    <LI>FTP cdup command moved to root directory; now works correctly.
    <LI>FTP ftplogin.txt file can be placed in user login directories.
    <LI>FTP server can now resume broken downloads.
    <LI>FTP server also handles REIN, and STRU commands.
    <LI>Log file cycling did not work correctly if set from WBA - fixed.
    <LI>CGI programs can now generate multiple Set-Cookie: header lines.
    <LI>Added support for long webmasks (up to 64k): use @filename.
  </UL>

  <LI>Xitami 2.2d3 released 98/03/03 with these changes:
  <UL>
    <LI>The security hole in 2.2d was still open in a different place.
    Finally closed it!
  </UL>

  <LI>Xitami 2.2d2 released 98/03/02 with these changes:
  <UL>
    <LI>Corrected a bug in the FTP security code which was causing
    memory overwrites and consequent problems in the WBA.
    <LI>Corrected a denial-of-service loophole which caused the server
    to crash when given a very long URL.
    <LI>FTP 'mode' command was not working - fixed.
  </UL>

  <LI>Xitami 2.2d1 released 98/03/01 with these changes:
  <UL>
    <LI>Closed security hole in 2.2d that allowed access to protected
    resources.
  </UL>

  <LI>Xitami 2.2d released 98/02/28 with these changes:
  <UL>
    <LI>Certain POST requests (between 500-8000) bytes did not work.
    <LI>Virtual host wizard was broken: it did not let you define a
    DNS-based virtual host.
    <LI>Empty passwords are now accepted in the WBA and by the server.
    <LI>WBA did not show authentication realms.
    <LI>WBA treats FTP directory '/' as empty (i.e. in FTP root itself).
    <LI>FTP server responses (550, 553) improved.
    <LI>FTP server access rights per directory were not always used.
    <LI>FTP directory access restrictions on [] now work.
    <LI>FTP server was allowing all users to access aliases - fixed.
  </UL>

  <LI>Xitami 2.2c released 98/02/09 with these changes:
  <UL>
    <LI>Fixes an abort in the WBA (when you use the console properties
    button.)
    <LI>Corrected UNIX and OS/2 build scripts.
    <LI>Password protection sometimes switched-off completely, until
    Xitami was restarted.  This has been fixed.
    <LI>FTP uploads did not work any longer - fixed.
  </UL>

  <LI>Xitami 2.2b (beta 2) released 98/01/18 with these changes:
  <UL>
    <LI>Cgi:msdos-style option now controls whether CGIs and filters get
    filenames with Unix-style or MS-DOS style slashes.  Default is 0.
    <LI>Server:refresh can now be set to 0 to disable autorefresh.
    <LI>Server:priority option added (can run up to 2-3 times faster under
    Windows).
    <LI>Xitami crashed if you enabled full logging (server:debug=1)
    and there was an access error on a log file.
    <LI>Security:admin option was not implemented in console version.
    <LI>Server:cache-defaults option added to control whether defaults pages
    are cached or not.  When this is 0, the browser will always fully reload
    a defaults page.
    <LI>WBA now uses JavaScript for (New! Improved!) user interface.
    <LI>Under Windows, PATH_TRANSLATED now uses \ instead of /.
  </UL>

  <LI>Xitami 2.2a (beta 1) released 98/01/13 with these changes:
  <UL>
    <LI>WSX protocol improved to allow dynamic aliases, non-HTML mime types,
    CGI environment variables,...  Thanks to Robin Dunn for providing these
    ideas and the LRWP WSX agent.
    <LI>LRWP (long-running web process) protocol support added.
    <LI>PerlSSI was not still not really working - fixed again.  Thanks to
    R. K. Lele for providing a solid test page.
    <LI>Filters are now applied to the default pages; you can use SSI in the
    default page for a directory.
    <LI>WSX protocol now allows dynamic aliases (WSX_INSTALL and WSX_CANCEL
    messages).
    <LI>Small POSTs to WSX agents are now passed in memory; large POSTS in
    temporary files.  Similar principle for returned HTTP data.
    <LI>Authentication can now work with user-defined realms (previously the
    realm was always the requested URI, which was not excellent).
    <LI>Server:debug option now also logs incoming requests.
    <LI>Virtual host wizard closes a security loophole in which virtual hosts
    could access the WBA pages without password control.
    <LI>Filters did not work under OS/2 - fixed.
    <LI>Server:limit default changed to 0 for all platforms; ftp:limit
    default is now 25.
    <LI>FTP service did not indicate transfer file type correctly - fixed.
    <LI>FTP access rights strengthened - this code was completely rewritten.
    <LI>FTP delete and rename functions always replied 'Okay' even if there
    were protection errors.
    <LI>FTP directory listing function was broken - fixed.
    <LI>FTP user and authentication files now uses full path names: this
    changes the meaning of an entry like [/pub], which is now a full path
    name (it used to be relative to the ftp root directory).
    <LI>Various buffer-overrun flaws in FTP service fixed.
    <LI>Xitami sometimes crashed when restarted from WBA - fixed.
    <LI>Server restart no longer closes/reopens port - this was too
    delicate.
    <LI>WBA can be disabled by setting security:admin to 0.
    <LI>UNC names (\\server\filename) no longer worked - fixed.
  </UL>

  <LI>Xitami 2.1c released 97/12/25 with these changes:
  <UL>
    <LI>ftp:login-text option added for configurable login messages.
    <LI>Online management of custom error messages rewritten.
    <LI>Online management of FTP passwords was broken - fixed.
    <LI>File upload function was broken in 2.1a and b - fixed.
    <LI>'Powered by Xitami' images now shown on welcome page.
    <LI>PerlSSI was not working - fixed.
    <LI>CGI:debug was not being applied to filters - fixed.
    <LI>Server portbase was not being applied to FTP access - fixed.
  </UL>

  <LI>Xitami 2.1b released 97/12/19 with these changes:
  <UL>
    <LI>FTP 'cd' command failed if user did not have GET authority; now
    works within all subdirectories of user's root directory.
    <LI>Server:autostart option is now TRUE by default (Win95 only).
    <LI>FTP service sometimes crashed, due to a memory overwrite.
    <LI>Webmask=local did not work at all; fixed.
    <LI>Windows source kit (console version) now provided.
  </UL>

  <LI>Xitami 2.1a released 97/12/15 with these changes:
  <UL>
    <LI>OS/2 CGI handling rewritten.
    <LI>FTP service 'LIST' command now works in all cases.
    <LI>FTP service now shows subdirectories in compact listing.
    <LI>Server died if FTP was disabled and web-based console tried
    to display details of current connections - fixed.
    <LI>Added 'Powered by Xitami' graphic to distribution (by Jptxs).
    <LI>Added server:autostart config option (Windows 95 only).
    <LI>Added server:limit option to restrict number of connections.
    <LI>Added ftp:email-check config option.
    <LI>Added ftp:webmask config option.
    <LI>Changed cgi:dirlist option to default to 0.
    <LI>Added [Filter] section and PerlSSI filter.
    <LI>Added configurable welcome text for FTP server.
    <LI>Added support for PHP as filter program (tested version 2).
    <LI>Added timezone indication to log files.
    <LI>Host name in redirected URLs now taken from Host: header if
    possible; this makes image maps work better with modern browsers.
    <LI>Error 401 now returns HTML page correctly: previously this
    returned an empty page.
    <LI>All error texts are predefined in the errors/ subdirectory.
    <LI>Under Windows, taskbar menu works correctly in secure mode.
    <LI>Web-based admin crashed on certain Unix systems.
    <LI>Web-based admin crashed when using More... key on the user
    list file.
    <LI>FTP aliases now supported.
    <LI>ftp:http-alias option includes HTTP aliases in FTP aliases.
    <LI>FTP user configuration file syntax changed slightly, and access
    rights can now be defined on a directory basis.
    LI>Works with CGI programs that do not produce a header.
    <LI>CGI output sometimes failed on NT; this was fixed in 1.3 and broken
    again in 2.0.  Fixed again!
    <LI>cgi:exit-ok option now set to 0 by default.
    <LI>Fixed a bug which crashed Xitami when you used Restart.
    <LI>Better documentation of WSX protocol.
  </UL>

  <LI>Xitami 2.0e released 97/10/11 with these changes:
  <UL>
    <LI>Customised error messages now work correctly.
    <LI>User-defined CGI directories was broken: fixed.
    <LI>POSTed data was sometimes not being passed to admin screens.
    <LI>Admin screens aborted in some configurations: fixed.
  </UL>

  <LI>Xitami 2.0d released 97/10/07 with these changes:
  <UL>
    <LI>Various corrections to the FTP service.
    <LI>Various corrections to the UNIX kits.
  </UL>

  <LI>Xitami 2.0c released 97/10/04 with these changes:
  <UL>
    <LI>Windows control panel 'Setup' button did not work if a port
    other than 80 was used.
  </UL>

  <LI>Xitami 2.0b released 97/09/30 with these changes:
  <UL>
    <LI>Form POST data no longer passed as QUERY_STRING by default.
    <LI>Form POST data no longer limited in size.
    <LI>Supports RFC1867 form-based file uploads.
    <LI>Added ability to run server on one specific IP address.
  </UL>

  <LI>Xitami 2.0a released 97/09/15 for limited beta testing, with
  these changes:
  <UL>
    <LI>Added FTP server.
    <LI>Changed config handling so that you can change options on
    <EM>either</EM> the control panel or the config file (previously
    ignored webpages, cgi-bin, and portbase options in config file
    of primary host.
    <LI>Authorisation now works on any URL, including '/'.
    <LI>Webmasks extended to allow multiple combinations.
    <LI>Aliases did not work with virtual hosts - fixed.
    <LI>Added full logging of URL translation if server:debug set; this
    is useful when debugging complex virtual hosts.
    <LI>New security:password-case option controls whether passwords
    are case-sensitive. (User names are always compared in lowercase.)
    <LI>Security:dynamic option no longer applicable - removed.
    <LI>Sometimes showed junk in error headers/footers from files.
    <LI>'Location:' header did not work in CGIs - fixed.
    <LI>WinNT service did not recognise config files - fixed.
    <LI>WinNT service died if specified with -r option - fixed.
    <LI>WinNT control panel now runs in Xitami service directory.
    <LI>Server died if run without a Xitami .cfg file; now works.
    <LI>Server died if root directory was on an invalid drive - fixed.
    <LI>Server died on URLs like "http://127.0.0.1/buttons.map' - fixed.
    <LI>Server looped if URL argument contained accented chars - fixed.
    <LI>Virtual host names containing a hyphen did not work - fixed.
    <LI>You can now specify a password as "-", meaning 'not allowed'.
    <LI>CGI output sometimes failed on fast NT systems - fixed.
    <LI>CGI SCRIPT_NAME now works with normal and CGI aliases.
    <LI>Custom.cfg renamed to defaults.cfg.
    <LI>Added error simulation URL '/error?xxx'.
    <LI>Added server:text-xxx options for customised HTTP error texts.
    <LI>Added server:error-url option for error simulation.
    <LI>Added cgi:stdio option to support Basic CGI programs.
    <LI>Added cgi:dirlist option to control CGI directory lists.
    <LI>Added server:base-host option for base host definition.
    <LI>Added browser-based configuration screen via /admin URL.
    <LI>Added win32:16bit-cgi option allows fast 32-bit CGIS.
    <LI>Added win32:secure option to secure Windows control panel.
    <LI>Added security:superuser password (default disabled).
    <LI>Added [Console] configuration section.
    <LI>Added [CGI-Alias] section for CGI aliases.
    <LI>Added [WSX] section for web-server extensions, and added
    support for WSX to server kernel.
    <LI>Sometimes failed on large forms - fixed.
    <LI>Windows control panels completely redesigned.
  </UL>

  <LI>Xitami 1.3c released 97/07/31 with these changes:
  <UL>
    <LI>Alias handling cleaned-up; converts alias in URL to lowercase
    to match alias name (always lowercase).
    <LI>CGI SCRIPT_NAME now compatible with MS IIS (starts with '/').
    <LI>URLs can contain spaces (did not work with Netscape Navigator).
    <LI>Would abort on incomplete requests like 'GET xxxxx'.
    <LI>Virtual host server:cgi-dir option was not being used.
    <LI>NT service control panel crashed if you started on port 0.
    <LI>Added support for Visual Basic through CGI_STDIN and related
    environment variables.
  </UL>

  <LI>Xitami 1.3b released 97/07/22 with these changes:
  <UL>
    <LI>Windows control panel shows more statistics.
    <LI>New [CGI-Environment] option for arbitrary CGI variables.
    <LI>New server:hostname option for redirected URLs.
    <LI>New [ErrorLog] section for HTTP errors.
    <LI>Fixed various minor bugs with virtual host logic.
  </UL>

  <LI>Xitami 1.3a released 97/07/16 with these changes:
  <UL>
    <LI>New virtual hosts/multihoming facility.
    <LI>New [Alias] option allows multiple document roots.
    <LI>New webmask= option in xitami.aut lets you restrict access
    to a directory depending on the client's IP address.
    <LI>New configuration schema, custom.cfg, simplifies upgrading
    from older versions of Xitami.
    <LI>New option 'cgi:workdir=-' means always use script directory.
    <LI>New option 'server:cgi-url' defines '/cgi-bin' prefix.
    <LI>Windows control panel now works correctly with the keyboard.
    <LI>Improved REXX CGI support (*/ allowed on first line).
    <LI>New CGI environment variable: SCRIPT_PATH.
    <LI>CGI SCRIPT_NAME no longer includes the PATH_INFO.
    <LI>Fixed bug: NT service version did not let you change the
    webpages or CGI directory.
    <LI>Fixed bug: CGI script 'magic header' did not work fully.
    <LI>Fixed bug: server could block while sending a file if the
    browser closed the connection during the transfer.
    <LI>Fixed bug: "cgi:workdir" did not work under UNIX.
    <LI>Fixed bug: no longer freezes-up if you change the clock.
    <LI>Fixed bug: CGI URLs in map files can now have arguments.
    <LI>Eliminated caching for default pages; browser now always
    shows correct page if you change the document root directory.
    <LI>Keep-Alive default raised from 5 to 50.
    <LI>Error-Header, Footer now reloaded for each 4xx response.
    <LI>Added support for Midi MIME types (.mid, .rmi).
  </UL>

  <LI>Xitami 1.2e released 97/06/16 with these changes:
  <UL>
    <LI>Webpages directory can now be a disk drive, e.g. I:\.
    <LI>Added server:translate option for working on dynamic
    IP connections (e.g. PPP).
    <LI>Added support for REXX CGIs using "/*!" magic header.
    <LI>Xitami would sometimes freeze-up: this has been fixed.
    <LI>You can now limit clients to a specific IP subnet mask.
    <LI>CGI scripts (e.g. Perl) can use #! /usr/bin/perl header;
    the path is removed if it does not actually exist.
    <LI>server:error-header/footer can come from a file.
  </UL>

  <LI>Xitami 1.2d released 97/05/31 to correct a security
  hole in 1.2c; protected URLs could be accessed by supplying
  an empty username and password.

  <LI>Xitami 1.2c released 97/05/28 with these changes:
  <UL>
    <LI>Under 32-bit Windows, executable files can have any
    extension.
    <LI>Now correctly asks for password when listing a directory.
    <LI>Password protection also applied to CGI programs.
    <LI>Keep-Alive did not work for some directory listings.
    <LI>Closed security hole that allowed '...' in URLs.
    <LI>Added REMOTE_HOST and REMOTE_ADDR variables for CGI.
    <LI>Under Windows 95 & NT, CGI response-time was improved by
    an average of 500ms thanks to improved SFL timer functions.
    <LI>New configuration option cgi:timeout specifies timeout
    for CGI programs.  The cgi:monitor option specifies CGI monitor
    rate.
    <LI>Sometimes gave file errors during rapid reloading of CGI
    programs; this has been improved.
    <LI>You can now modify the xitami.aut file on-the-fly: it is
    refreshed every 60 seconds (by default) See server:refresh
    configuration option.
    <LI>cgi:exit-ok controls whether CGI programs' exit code is
    checked or not.
    <LI>Server crashed on some URLs (http://localhost/myfile.htm/);
    the server was treating these as directory names; fixed.
    <LI>Server crashed when running CGI script if #! command did
    not exist as an executable file; fixed.
    <LI>'Browse' and 'Defaults' buttons added to Windows panels.
    <LI>Improved error messages in Windows versions when there is
    a TCP/IP error; e.g. port in use or TCP/IP not installed.
    <LI>Windows versions allow Terminate action at all times.
    <LI>Relaxed HTTP header parsing to support more HTTP clients;
    headers may use either CRLF or LF end-of-line sequences.
  </UL>

  <LI>Xitami 1.2b released 97/04/23 with these changes:
  <UL>
    <LI>Improved Keep-Alive handling; sometimes failed.
    <LI>Keep-Alive arguments are now configurable.
    <LI>Sometimes died if very long URLs were used.
    <LI>Windows NT control panel did not work.
  </UL>

  <LI>Xitami 1.2a limited release with these changes:
  <UL>
    <LI>Added server:portbaseN configuration option.
    <LI>Keep-Alive works for CGI programs.
    <LI>Allows non-CGI files in cgi-bin directory.
    <LI>cgi:mixed-url controls non-CGI files in cgi-bin directory.
    <LI>CGI stderr output logged to cgi:stderr file
    <LI>Corrected access log file format, which had errors.
    <LI>Output from CGI programs is now handled correctly.
    <LI>Server occasionally aborted due to an assertion.
    <LI>If-Modified-Since: header was not being used correctly.
  </UL>

  <LI>Xitami 1.1b released 97/03/17 with these changes:
  <UL>
    <LI>Improved use of 'cgi-bin' option; can now specify an
    absolute directory, and 'cgi-bin' can occur at any level
    in the URL path.
    <LI>Added PATH_INFO variable for CGI programs.
    <LI>Directory listings can be disabled.
    <LI>Added support for user-defined MIME types.
    <LI>Added support for absolute URLs in image maps.
    <LI>Customisable CGI support.
    <LI>Customisable server error pages.
    <LI>Windows NT service control panel added.
    <LI>Reduced CPU usage in 32-bit Windows versions.
    <LI>Added support for Perl CGI programs under Windows and OS/2.
    <LI>Added optional Xitami configuration file.
    <LI>Auto reloading of configuration and authorization files
    when modified.
    <LI>Hourly, daily, weekly, monthly cycling of log files.
    <LI>Log files can be in any directory.
  </UL>

  <LI>Xitami 1.0d released 97/02/23 with these changes:
  <UL>
    <LI>Windows NT service version added.
    <LI>16-bit Windows version released.
    <LI>Windows versions permit customised web pages and CGI
    directories; previously these were fixed.
    <LI>Returns MIME type */* for unknown file types; previously
    returned text/html, which caused unknown files (such as zip
    files) to be shown as HTML text.
    <LI>CGI programs get their arguments in the same way for GET
    methods as for PUT methods.
    <LI>More variables passed to CGI programs.
    <LI>Too-long requests are correctly handled, returning a 500
    or 413 error code.
    <LI>Xitami now tries port 5080 if 80 is unavailable (previous
    versions tried 8080, but this is commonly used for HTTP proxy
    servers).
    <LI>A bug in previous versions allowed a user to browse into
    directories by adding '..' to the URL.  This has been fixed.
  </UL>

  <LI>Xitami 1.0c released 97/01/01 with various improvements:
  <UL>
    <LI>Access log file using CERN/NCSA common log format.
    <LI>Access log files automatically cycled.
    <LI>Console log file kept separate from access log file.
  </UL>

  <LI>Xitami 1.0b was released as a separate product in December
  1996.

  <LI>Xitami 1.0a was released as part of the SMT product in
  October 1996.
</UL>

.-----------------------------------------------------------------
.page license.htm=License Agreement

.build anchor license
<H2>$(TITLE)</H2>

<PRE>
LICENSE AGREEMENT

This license agreement covers your use of the iMatix Corporation XITAMI WEB
SERVER, its source code, documentation, and executable files, hereinafter
referred to as "the Product".

The Product is Copyright (c) 1991-99 iMatix Corporation. You may use it and
distribute it according to this following License Agreement. If you do not
agree with these terms, please remove the Product from your system. By
incorporating the Product in your work or distributing the Product to others
you implicitly agree to these license terms.

This License Agreement covers the current version of The Product. iMatix
Corporation reserves the right to modify the terms of this License Agreement
at any moment, and without prior notification, in future releases of The
Product.

STATEMENT OF COPYRIGHT

The Product is, and remains, copyright 1991-99 iMatix Corporation, with
exception of specific copyrights as noted in the individual source files.

GENERAL CONDITIONS

The Product is provided in two forms: as a ready-to-run installation kit
consisting of executable programs, help files, etc. (the "Product
Executable") and as a package of source files, the "Product Sources".

You may freely use and distribute the Product Executable so long as you
provide the complete and unmodified original Product Executable installation
kit as supplied by iMatix Corporation.

The Product Sources fall under the License Agreement for the iMatix SMT
product. The applicable terms and conditions are repeated here.

CONDITIONS OF USE FOR PRODUCT SOURCES

You do not need to provide the source code for the Product as part of your
product. However, you must do one of these things to comply with the Product
License Agreement:

1.  Provide the source code for Product modules that you use, and include
    this License Agreement, or
2.  Make your product freely available according to a license similar to
    the GNU General Public License, or the Perl Artistic License, or this
    License Agreement, or
3.  Add this phrase to the documentation for your product: "This product
    uses parts of the SMT Kernel, Copyright (c) 1991-99 iMatix Corporation
    &lt;http://www.imatix.com&gt;".

RIGHTS OF USAGE

You may freely and at no cost use the Product in any project, commercial,
academic, military, or private, so long as you respect the License
Agreement. The License Agreement does not affect any software except the
Product. In particular, any application that uses the Product does not
itself fall under the License Agreement.

You may modify any part of the Product, including sources and documentation,
except this License Agreement, which you may not modify.

You must clearly indicate any modifications at the start of each source
file. The user of any modified Product code must know that the source file
is not original.

At your discretion, you may rewrite or reuse any part of the Product so that
your derived code is not obviously part of the Product. This derived code
does not fall under the Product License Agreement directly, but you must
include a credit at the start of each source file indicating the original
authorship and source of the code, and a statement of copyright as follows:

    "Parts copyright (c) 1991-99 iMatix Corporation"

RIGHTS OF DISTRIBUTION

You may freely distribute the Product, or any subset of the Product, by any
means. This covers, but is not limited to, distribution of binaries built
from original or modified copies of the product source code. The License, in
the form of the file called "LICENSE.TXT" must accompany any such
distribution.

You may charge a fee for distributing the Product, for providing a warranty
on the Product, for making modifications to the Product, or for any other
service provided in relation to the Product. You are not required to ask our
permission for any of these activities.

At no time will iMatix Corporation associate itself with any distribution of
the Product except that supplied from the iMatix Corporation Internet site
http://www.imatix.com.

DISCLAIMER OF WARRANTY

The Product is provided as free software, in the hope that it will be
useful. It is provided "as-is", without warranty of any kind, either
expressed or implied, including, but not limited to, the implied warranties
of merchantability and fitness for a particular purpose. The entire risk as
to determining the suitability, quality and performance of the Product is
with you. Should the Product prove defective, the full cost of repair,
servicing, or correction lies with you.

TECHNICAL SUPPORT

Limited technical support can be had from support@imatix.com.  Full
guaranteed technical support is subject to an iMatix Corporation support
license: current prices and commercial conditions can be had on request from
sales@imatix.com.


Published by iMatix Corporation
http://www.imatix.com
15 May, 1999
</PRE>
